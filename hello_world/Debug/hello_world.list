
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007018  08007018  00017018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c4  080071c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080071c4  080071c4  000171c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071cc  080071cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080071d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013ce8  20000078  0800724c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013d60  0800724c  00023d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed48  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b80  00000000  00000000  0003edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00042970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00043f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2e5  00000000  00000000  000453c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018547  00000000  00000000  0005f6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d88b  00000000  00000000  00077bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011547f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006228  00000000  00000000  001154d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007000 	.word	0x08007000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007000 	.word	0x08007000

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013ca8 	.word	0x20013ca8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb23 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f853 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8db 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057e:	f000 f8af 	bl	80006e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Enable_CCYNT |= (1 << 0); //Enabling time stamps for SEGGER
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <main+0x98>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1f      	ldr	r2, [pc, #124]	; (8000604 <main+0x98>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058e:	f004 fa11 	bl	80049b4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000592:	f005 fa55 	bl	8005a40 <SEGGER_SYSVIEW_Start>
	stat = xTaskCreate(task_handler1, "Task-1", 200, "Hello World from Task-1",	\
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <main+0x9c>)
 80005a2:	22c8      	movs	r2, #200	; 0xc8
 80005a4:	4919      	ldr	r1, [pc, #100]	; (800060c <main+0xa0>)
 80005a6:	481a      	ldr	r0, [pc, #104]	; (8000610 <main+0xa4>)
 80005a8:	f002 fac6 	bl	8002b38 <xTaskCreate>
 80005ac:	6178      	str	r0, [r7, #20]
			2, &task_handle1);
	configASSERT(stat == pdPASS);
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d00a      	beq.n	80005ca <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b8:	f383 8811 	msr	BASEPRI, r3
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c6:	bf00      	nop
 80005c8:	e7fe      	b.n	80005c8 <main+0x5c>
	stat = xTaskCreate(task_handler2, "Task-2", 200, "Hello World from Task-2",  \
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <main+0xa8>)
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	4910      	ldr	r1, [pc, #64]	; (8000618 <main+0xac>)
 80005d8:	4810      	ldr	r0, [pc, #64]	; (800061c <main+0xb0>)
 80005da:	f002 faad 	bl	8002b38 <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]
			2, &task_handle2);
	configASSERT(stat == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x90>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x8e>
    vTaskStartScheduler();
 80005fc:	f002 fc36 	bl	8002e6c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000600:	e7fe      	b.n	8000600 <main+0x94>
 8000602:	bf00      	nop
 8000604:	e0001000 	.word	0xe0001000
 8000608:	08007018 	.word	0x08007018
 800060c:	08007030 	.word	0x08007030
 8000610:	08000811 	.word	0x08000811
 8000614:	08007038 	.word	0x08007038
 8000618:	08007050 	.word	0x08007050
 800061c:	08000821 	.word	0x08000821

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 f82a 	bl	8006688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <SystemClock_Config+0xb8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <SystemClock_Config+0xbc>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fd53 	bl	8001140 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 f8d8 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 ffb5 	bl	8001630 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006cc:	f000 f8c2 	bl	8000854 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f001 fc38 	bl	8001f8c <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f897 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20013bd8 	.word	0x20013bd8
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0xd4>)
 80007c0:	f000 fca4 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0xd8>)
 80007dc:	f000 fb12 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e0:	2320      	movs	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xd4>)
 80007f8:	f000 fb04 	bl	8000e04 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800

08000810 <task_handler1>:

/* USER CODE BEGIN 4 */
static void task_handler1(void *para) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("%s\n", (char*) para);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f005 ffab 	bl	8006774 <puts>
 800081e:	e7fb      	b.n	8000818 <task_handler1+0x8>

08000820 <task_handler2>:
	//	taskYIELD();
	}
}

static void task_handler2(void *para) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("%s\n", (char*) para);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f005 ffa3 	bl	8006774 <puts>
 800082e:	e7fb      	b.n	8000828 <task_handler2+0x8>

08000830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000842:	f000 f9dd 	bl	8000c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40000c00 	.word	0x40000c00

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 800089e:	f003 fcd3 	bl	8004248 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <HAL_UART_MspInit+0x84>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d12b      	bne.n	800092a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_UART_MspInit+0x88>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_UART_MspInit+0x88>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_UART_MspInit+0x88>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_UART_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <HAL_UART_MspInit+0x88>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_UART_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800090a:	230c      	movs	r3, #12
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091a:	2307      	movs	r3, #7
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <HAL_UART_MspInit+0x8c>)
 8000926:	f000 fa6d 	bl	8000e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40004400 	.word	0x40004400
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000

08000940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	2032      	movs	r0, #50	; 0x32
 8000956:	f000 fa2b 	bl	8000db0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800095a:	2032      	movs	r0, #50	; 0x32
 800095c:	f000 fa44 	bl	8000de8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <HAL_InitTick+0xa4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <HAL_InitTick+0xa4>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_InitTick+0xa4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 f84e 	bl	8001a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800098c:	f001 f824 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8000990:	4603      	mov	r3, r0
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000998:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <HAL_InitTick+0xa8>)
 800099a:	fba2 2303 	umull	r2, r3, r2, r3
 800099e:	0c9b      	lsrs	r3, r3, #18
 80009a0:	3b01      	subs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_InitTick+0xac>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <HAL_InitTick+0xb0>)
 80009a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_InitTick+0xac>)
 80009ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_InitTick+0xac>)
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_InitTick+0xac>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_InitTick+0xac>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <HAL_InitTick+0xac>)
 80009c6:	f001 f861 	bl	8001a8c <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d104      	bne.n	80009da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <HAL_InitTick+0xac>)
 80009d2:	f001 f8b5 	bl	8001b40 <HAL_TIM_Base_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3730      	adds	r7, #48	; 0x30
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	431bde83 	.word	0x431bde83
 80009ec:	20013c1c 	.word	0x20013c1c
 80009f0:	40000c00 	.word	0x40000c00

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM5_IRQHandler+0x10>)
 8000a26:	f001 f8ed 	bl	8001c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20013c1c 	.word	0x20013c1c

08000a34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
	}

return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a96:	605a      	str	r2, [r3, #4]
	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_isatty>:

int _isatty(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f005 fd78 	bl	80065fc <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <_sbrk+0x64>)
 8000b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20018000 	.word	0x20018000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	20013d60 	.word	0x20013d60

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b92:	f7ff ffd7 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f005 fd37 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fce7 	bl	800056c <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bac:	080071d4 	.word	0x080071d4
  ldr r2, =_sbss
 8000bb0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bb4:	20013d60 	.word	0x20013d60

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f8d8 	bl	8000d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fea8 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fe36 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20013c64 	.word	0x20013c64

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20013c64 	.word	0x20013c64

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff4c 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc2:	f7ff ff61 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	6978      	ldr	r0, [r7, #20]
 8000dce:	f7ff ffb1 	bl	8000d34 <NVIC_EncodePriority>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff80 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff54 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e159      	b.n	80010d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8148 	bne.w	80010ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d005      	beq.n	8000e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	69b9      	ldr	r1, [r7, #24]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80a2 	beq.w	80010ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <HAL_GPIO_Init+0x2e8>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a56      	ldr	r2, [pc, #344]	; (80010ec <HAL_GPIO_Init+0x2e8>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <HAL_GPIO_Init+0x2e8>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a52      	ldr	r2, [pc, #328]	; (80010f0 <HAL_GPIO_Init+0x2ec>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x202>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_GPIO_Init+0x2f4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x1fe>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a47      	ldr	r2, [pc, #284]	; (80010fc <HAL_GPIO_Init+0x2f8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x1fa>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a46      	ldr	r2, [pc, #280]	; (8001100 <HAL_GPIO_Init+0x2fc>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x1f6>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_GPIO_Init+0x300>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x1f2>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8001006:	2300      	movs	r3, #0
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x2ec>)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_GPIO_Init+0x304>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104a:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x304>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_GPIO_Init+0x304>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001074:	4a24      	ldr	r2, [pc, #144]	; (8001108 <HAL_GPIO_Init+0x304>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_GPIO_Init+0x304>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	f67f aea2 	bls.w	8000e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e264      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115e:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b04      	cmp	r3, #4
 8001168:	d00c      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4ba0      	ldr	r3, [pc, #640]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001172:	2b08      	cmp	r3, #8
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b9d      	ldr	r3, [pc, #628]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b99      	ldr	r3, [pc, #612]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e23f      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a90      	ldr	r2, [pc, #576]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8a      	ldr	r2, [pc, #552]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b84      	ldr	r3, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a83      	ldr	r2, [pc, #524]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a80      	ldr	r2, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fd16 	bl	8000c28 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fd12 	bl	8000c28 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e204      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fd02 	bl	8000c28 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fcfe 	bl	8000c28 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1f0      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1c4      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4952      	ldr	r1, [pc, #328]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fcb7 	bl	8000c28 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fcb3 	bl	8000c28 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e1a5      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4940      	ldr	r1, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc96 	bl	8000c28 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc92 	bl	8000c28 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e184      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d016      	beq.n	8001360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fc76 	bl	8000c28 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fc72 	bl	8000c28 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e164      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fc5f 	bl	8000c28 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fc5b 	bl	8000c28 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e14d      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a0 	beq.w	80014da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d121      	bne.n	800141a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fc21 	bl	8000c28 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e011      	b.n	800140e <HAL_RCC_OscConfig+0x2ce>
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	42470000 	.word	0x42470000
 80013f4:	42470e80 	.word	0x42470e80
 80013f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7ff fc14 	bl	8000c28 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e106      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4e4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x2f0>
 8001422:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a80      	ldr	r2, [pc, #512]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e01c      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x312>
 8001438:	4b7b      	ldr	r3, [pc, #492]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	4a7a      	ldr	r2, [pc, #488]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6713      	str	r3, [r2, #112]	; 0x70
 8001444:	4b78      	ldr	r3, [pc, #480]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a77      	ldr	r2, [pc, #476]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001452:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a74      	ldr	r2, [pc, #464]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	4b72      	ldr	r3, [pc, #456]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a71      	ldr	r2, [pc, #452]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fbd9 	bl	8000c28 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fbd5 	bl	8000c28 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0c5      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <HAL_RCC_OscConfig+0x33a>
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbc3 	bl	8000c28 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fbbf 	bl	8000c28 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0af      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ee      	bne.n	80014a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a55      	ldr	r2, [pc, #340]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 809b 	beq.w	800161a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d05c      	beq.n	80015aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d141      	bne.n	800157c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x4ec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb93 	bl	8000c28 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb8f 	bl	8000c28 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e081      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	3b01      	subs	r3, #1
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
 8001548:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x4ec>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb68 	bl	8000c28 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb64 	bl	8000c28 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e056      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x41c>
 800157a:	e04e      	b.n	800161a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_OscConfig+0x4ec>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb51 	bl	8000c28 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb4d 	bl	8000c28 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e03f      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x44a>
 80015a8:	e037      	b.n	800161a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e032      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d028      	beq.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d121      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d11a      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e6:	4013      	ands	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d111      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d107      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40007000 	.word	0x40007000
 8001628:	40023800 	.word	0x40023800
 800162c:	42470060 	.word	0x42470060

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0cc      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d90c      	bls.n	800166c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800168e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d044      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d119      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e067      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4934      	ldr	r1, [pc, #208]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff fa82 	bl	8000c28 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff fa7e 	bl	8000c28 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e04f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d20c      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f8b2 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	08007134 	.word	0x08007134
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d00d      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x40>
 8001820:	2b08      	cmp	r3, #8
 8001822:	f200 80bd 	bhi.w	80019a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x34>
 800182a:	2b04      	cmp	r3, #4
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x3a>
 800182e:	e0b7      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001832:	60bb      	str	r3, [r7, #8]
       break;
 8001834:	e0b7      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001838:	60bb      	str	r3, [r7, #8]
      break;
 800183a:	e0b4      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183c:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04d      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	461a      	mov	r2, r3
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001862:	f04f 0100 	mov.w	r1, #0
 8001866:	ea02 0800 	and.w	r8, r2, r0
 800186a:	ea03 0901 	and.w	r9, r3, r1
 800186e:	4640      	mov	r0, r8
 8001870:	4649      	mov	r1, r9
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	014b      	lsls	r3, r1, #5
 800187c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001880:	0142      	lsls	r2, r0, #5
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	ebb0 0008 	subs.w	r0, r0, r8
 800188a:	eb61 0109 	sbc.w	r1, r1, r9
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	018b      	lsls	r3, r1, #6
 8001898:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800189c:	0182      	lsls	r2, r0, #6
 800189e:	1a12      	subs	r2, r2, r0
 80018a0:	eb63 0301 	sbc.w	r3, r3, r1
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	00d9      	lsls	r1, r3, #3
 80018ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018b2:	00d0      	lsls	r0, r2, #3
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	eb12 0208 	adds.w	r2, r2, r8
 80018bc:	eb43 0309 	adc.w	r3, r3, r9
 80018c0:	f04f 0000 	mov.w	r0, #0
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	0259      	lsls	r1, r3, #9
 80018ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018ce:	0250      	lsls	r0, r2, #9
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	461a      	mov	r2, r3
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	f7fe fcc8 	bl	8000274 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e04a      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	461a      	mov	r2, r3
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	ea02 0400 	and.w	r4, r2, r0
 8001906:	ea03 0501 	and.w	r5, r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	014b      	lsls	r3, r1, #5
 8001918:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800191c:	0142      	lsls	r2, r0, #5
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	1b00      	subs	r0, r0, r4
 8001924:	eb61 0105 	sbc.w	r1, r1, r5
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	018b      	lsls	r3, r1, #6
 8001932:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001936:	0182      	lsls	r2, r0, #6
 8001938:	1a12      	subs	r2, r2, r0
 800193a:	eb63 0301 	sbc.w	r3, r3, r1
 800193e:	f04f 0000 	mov.w	r0, #0
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	00d9      	lsls	r1, r3, #3
 8001948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800194c:	00d0      	lsls	r0, r2, #3
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	1912      	adds	r2, r2, r4
 8001954:	eb45 0303 	adc.w	r3, r5, r3
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	0299      	lsls	r1, r3, #10
 8001962:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001966:	0290      	lsls	r0, r2, #10
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	f7fe fc7c 	bl	8000274 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	60bb      	str	r3, [r7, #8]
      break;
 800199e:	e002      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019a2:	60bb      	str	r3, [r7, #8]
      break;
 80019a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a6:	68bb      	ldr	r3, [r7, #8]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200

080019c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08007144 	.word	0x08007144

08001a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a04:	f7ff ffdc 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0b5b      	lsrs	r3, r3, #13
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08007144 	.word	0x08007144

08001a28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	220f      	movs	r2, #15
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_RCC_GetClockConfig+0x60>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0207 	and.w	r2, r3, #7
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e041      	b.n	8001b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f839 	bl	8001b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f000 f9ca 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e044      	b.n	8001be2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d018      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b82:	d013      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_TIM_Base_Start_IT+0xbc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d111      	bne.n	8001bd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d010      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bce:	e007      	b.n	8001be0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40000c00 	.word	0x40000c00
 8001c00:	40014000 	.word	0x40014000

08001c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d122      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d11b      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0202 	mvn.w	r2, #2
 8001c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8ee 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8e0 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f1 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d122      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d11b      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0204 	mvn.w	r2, #4
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8c4 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8b6 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8c7 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d122      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d11b      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0208 	mvn.w	r2, #8
 8001cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f89a 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f88c 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f89d 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d122      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d11b      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0210 	mvn.w	r2, #16
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2208      	movs	r2, #8
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f870 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f862 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f873 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0201 	mvn.w	r2, #1
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fd54 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b80      	cmp	r3, #128	; 0x80
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8e2 	bl	8001f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f838 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0220 	mvn.w	r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ac 	bl	8001f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00f      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d00b      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <TIM_Base_SetConfig+0xe8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a30      	ldr	r2, [pc, #192]	; (8001f50 <TIM_Base_SetConfig+0xec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <TIM_Base_SetConfig+0xf0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d108      	bne.n	8001eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d017      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <TIM_Base_SetConfig+0xe8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <TIM_Base_SetConfig+0xec>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <TIM_Base_SetConfig+0xf0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <TIM_Base_SetConfig+0xf4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <TIM_Base_SetConfig+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d103      	bne.n	8001f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40000800 	.word	0x40000800
 8001f54:	40000c00 	.word	0x40000c00
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	40014400 	.word	0x40014400
 8001f60:	40014800 	.word	0x40014800

08001f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e03f      	b.n	800201e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fc7c 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f829 	bl	8002028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800202c:	b09f      	sub	sp, #124	; 0x7c
 800202e:	af00      	add	r7, sp, #0
 8002030:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	68d9      	ldr	r1, [r3, #12]
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	ea40 0301 	orr.w	r3, r0, r1
 8002048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	431a      	orrs	r2, r3
 8002054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	431a      	orrs	r2, r3
 800205a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4313      	orrs	r3, r2
 8002060:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800206c:	f021 010c 	bic.w	r1, r1, #12
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002076:	430b      	orrs	r3, r1
 8002078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002086:	6999      	ldr	r1, [r3, #24]
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	ea40 0301 	orr.w	r3, r0, r1
 8002090:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4bc5      	ldr	r3, [pc, #788]	; (80023ac <UART_SetConfig+0x384>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d004      	beq.n	80020a6 <UART_SetConfig+0x7e>
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4bc3      	ldr	r3, [pc, #780]	; (80023b0 <UART_SetConfig+0x388>)
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d103      	bne.n	80020ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020a6:	f7ff fcab 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 80020aa:	6778      	str	r0, [r7, #116]	; 0x74
 80020ac:	e002      	b.n	80020b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ae:	f7ff fc93 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 80020b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020bc:	f040 80b6 	bne.w	800222c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c2:	461c      	mov	r4, r3
 80020c4:	f04f 0500 	mov.w	r5, #0
 80020c8:	4622      	mov	r2, r4
 80020ca:	462b      	mov	r3, r5
 80020cc:	1891      	adds	r1, r2, r2
 80020ce:	6439      	str	r1, [r7, #64]	; 0x40
 80020d0:	415b      	adcs	r3, r3
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
 80020d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020d8:	1912      	adds	r2, r2, r4
 80020da:	eb45 0303 	adc.w	r3, r5, r3
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	00d9      	lsls	r1, r3, #3
 80020e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020ec:	00d0      	lsls	r0, r2, #3
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	1911      	adds	r1, r2, r4
 80020f4:	6639      	str	r1, [r7, #96]	; 0x60
 80020f6:	416b      	adcs	r3, r5
 80020f8:	667b      	str	r3, [r7, #100]	; 0x64
 80020fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	461a      	mov	r2, r3
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	1891      	adds	r1, r2, r2
 8002106:	63b9      	str	r1, [r7, #56]	; 0x38
 8002108:	415b      	adcs	r3, r3
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002110:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002114:	f7fe f8ae 	bl	8000274 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4ba5      	ldr	r3, [pc, #660]	; (80023b4 <UART_SetConfig+0x38c>)
 800211e:	fba3 2302 	umull	r2, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	011e      	lsls	r6, r3, #4
 8002126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002128:	461c      	mov	r4, r3
 800212a:	f04f 0500 	mov.w	r5, #0
 800212e:	4622      	mov	r2, r4
 8002130:	462b      	mov	r3, r5
 8002132:	1891      	adds	r1, r2, r2
 8002134:	6339      	str	r1, [r7, #48]	; 0x30
 8002136:	415b      	adcs	r3, r3
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
 800213a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800213e:	1912      	adds	r2, r2, r4
 8002140:	eb45 0303 	adc.w	r3, r5, r3
 8002144:	f04f 0000 	mov.w	r0, #0
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	00d9      	lsls	r1, r3, #3
 800214e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002152:	00d0      	lsls	r0, r2, #3
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	1911      	adds	r1, r2, r4
 800215a:	65b9      	str	r1, [r7, #88]	; 0x58
 800215c:	416b      	adcs	r3, r5
 800215e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	461a      	mov	r2, r3
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	1891      	adds	r1, r2, r2
 800216c:	62b9      	str	r1, [r7, #40]	; 0x28
 800216e:	415b      	adcs	r3, r3
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002176:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800217a:	f7fe f87b 	bl	8000274 <__aeabi_uldivmod>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <UART_SetConfig+0x38c>)
 8002184:	fba3 1302 	umull	r1, r3, r3, r2
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	2164      	movs	r1, #100	; 0x64
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	3332      	adds	r3, #50	; 0x32
 8002196:	4a87      	ldr	r2, [pc, #540]	; (80023b4 <UART_SetConfig+0x38c>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021a4:	441e      	add	r6, r3
 80021a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a8:	4618      	mov	r0, r3
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	1894      	adds	r4, r2, r2
 80021b4:	623c      	str	r4, [r7, #32]
 80021b6:	415b      	adcs	r3, r3
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021be:	1812      	adds	r2, r2, r0
 80021c0:	eb41 0303 	adc.w	r3, r1, r3
 80021c4:	f04f 0400 	mov.w	r4, #0
 80021c8:	f04f 0500 	mov.w	r5, #0
 80021cc:	00dd      	lsls	r5, r3, #3
 80021ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021d2:	00d4      	lsls	r4, r2, #3
 80021d4:	4622      	mov	r2, r4
 80021d6:	462b      	mov	r3, r5
 80021d8:	1814      	adds	r4, r2, r0
 80021da:	653c      	str	r4, [r7, #80]	; 0x50
 80021dc:	414b      	adcs	r3, r1
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
 80021e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	1891      	adds	r1, r2, r2
 80021ec:	61b9      	str	r1, [r7, #24]
 80021ee:	415b      	adcs	r3, r3
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021fa:	f7fe f83b 	bl	8000274 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <UART_SetConfig+0x38c>)
 8002204:	fba3 1302 	umull	r1, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	2164      	movs	r1, #100	; 0x64
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	3332      	adds	r3, #50	; 0x32
 8002216:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <UART_SetConfig+0x38c>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	f003 0207 	and.w	r2, r3, #7
 8002222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4432      	add	r2, r6
 8002228:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800222a:	e0b9      	b.n	80023a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222e:	461c      	mov	r4, r3
 8002230:	f04f 0500 	mov.w	r5, #0
 8002234:	4622      	mov	r2, r4
 8002236:	462b      	mov	r3, r5
 8002238:	1891      	adds	r1, r2, r2
 800223a:	6139      	str	r1, [r7, #16]
 800223c:	415b      	adcs	r3, r3
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002244:	1912      	adds	r2, r2, r4
 8002246:	eb45 0303 	adc.w	r3, r5, r3
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	00d9      	lsls	r1, r3, #3
 8002254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002258:	00d0      	lsls	r0, r2, #3
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	eb12 0804 	adds.w	r8, r2, r4
 8002262:	eb43 0905 	adc.w	r9, r3, r5
 8002266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800227e:	0082      	lsls	r2, r0, #2
 8002280:	4640      	mov	r0, r8
 8002282:	4649      	mov	r1, r9
 8002284:	f7fd fff6 	bl	8000274 <__aeabi_uldivmod>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <UART_SetConfig+0x38c>)
 800228e:	fba3 2302 	umull	r2, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	011e      	lsls	r6, r3, #4
 8002296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002298:	4618      	mov	r0, r3
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	1894      	adds	r4, r2, r2
 80022a4:	60bc      	str	r4, [r7, #8]
 80022a6:	415b      	adcs	r3, r3
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ae:	1812      	adds	r2, r2, r0
 80022b0:	eb41 0303 	adc.w	r3, r1, r3
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	f04f 0500 	mov.w	r5, #0
 80022bc:	00dd      	lsls	r5, r3, #3
 80022be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022c2:	00d4      	lsls	r4, r2, #3
 80022c4:	4622      	mov	r2, r4
 80022c6:	462b      	mov	r3, r5
 80022c8:	1814      	adds	r4, r2, r0
 80022ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80022cc:	414b      	adcs	r3, r1
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	008b      	lsls	r3, r1, #2
 80022e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022e8:	0082      	lsls	r2, r0, #2
 80022ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022ee:	f7fd ffc1 	bl	8000274 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <UART_SetConfig+0x38c>)
 80022f8:	fba3 1302 	umull	r1, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2164      	movs	r1, #100	; 0x64
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a2a      	ldr	r2, [pc, #168]	; (80023b4 <UART_SetConfig+0x38c>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002316:	441e      	add	r6, r3
 8002318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231a:	4618      	mov	r0, r3
 800231c:	f04f 0100 	mov.w	r1, #0
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	1894      	adds	r4, r2, r2
 8002326:	603c      	str	r4, [r7, #0]
 8002328:	415b      	adcs	r3, r3
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002330:	1812      	adds	r2, r2, r0
 8002332:	eb41 0303 	adc.w	r3, r1, r3
 8002336:	f04f 0400 	mov.w	r4, #0
 800233a:	f04f 0500 	mov.w	r5, #0
 800233e:	00dd      	lsls	r5, r3, #3
 8002340:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002344:	00d4      	lsls	r4, r2, #3
 8002346:	4622      	mov	r2, r4
 8002348:	462b      	mov	r3, r5
 800234a:	eb12 0a00 	adds.w	sl, r2, r0
 800234e:	eb43 0b01 	adc.w	fp, r3, r1
 8002352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	008b      	lsls	r3, r1, #2
 8002366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800236a:	0082      	lsls	r2, r0, #2
 800236c:	4650      	mov	r0, sl
 800236e:	4659      	mov	r1, fp
 8002370:	f7fd ff80 	bl	8000274 <__aeabi_uldivmod>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <UART_SetConfig+0x38c>)
 800237a:	fba3 1302 	umull	r1, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2164      	movs	r1, #100	; 0x64
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <UART_SetConfig+0x38c>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4432      	add	r2, r6
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	bf00      	nop
 80023a2:	377c      	adds	r7, #124	; 0x7c
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023aa:	bf00      	nop
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40011400 	.word	0x40011400
 80023b4:	51eb851f 	.word	0x51eb851f

080023b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0208 	add.w	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f103 0208 	add.w	r2, r3, #8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0208 	add.w	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d103      	bne.n	8002432 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e00c      	b.n	800244c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3308      	adds	r3, #8
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e002      	b.n	8002440 <vListInsert+0x2e>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d2f6      	bcs.n	800243a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	601a      	str	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6892      	ldr	r2, [r2, #8]
 800249a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6852      	ldr	r2, [r2, #4]
 80024a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d103      	bne.n	80024b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <xQueueGenericReset+0x2e>
        __asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	60fb      	str	r3, [r7, #12]
    }
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05d      	beq.n	80025c8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d059      	beq.n	80025c8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	2100      	movs	r1, #0
 800251e:	fba3 2302 	umull	r2, r3, r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d000      	beq.n	8002528 <xQueueGenericReset+0x50>
 8002526:	2101      	movs	r1, #1
 8002528:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d14c      	bne.n	80025c8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800252e:	f001 ff09 	bl	8004344 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	441a      	add	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	3b01      	subs	r3, #1
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	441a      	add	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d114      	bne.n	80025ae <xQueueGenericReset+0xd6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01a      	beq.n	80025c2 <xQueueGenericReset+0xea>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3310      	adds	r3, #16
 8002590:	4618      	mov	r0, r3
 8002592:	f000 ffed 	bl	8003570 <xTaskRemoveFromEventList>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <xQueueGenericReset+0xea>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <xQueueGenericReset+0x11c>)
 800259e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	e009      	b.n	80025c2 <xQueueGenericReset+0xea>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	3310      	adds	r3, #16
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff00 	bl	80023b8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	3324      	adds	r3, #36	; 0x24
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fefb 	bl	80023b8 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 80025c2:	f001 feef 	bl	80043a4 <vPortExitCritical>
 80025c6:	e001      	b.n	80025cc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <xQueueGenericReset+0x110>
        __asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	60bb      	str	r3, [r7, #8]
    }
 80025e4:	bf00      	nop
 80025e6:	e7fe      	b.n	80025e6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025e8:	697b      	ldr	r3, [r7, #20]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02e      	beq.n	800266e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002610:	2100      	movs	r1, #0
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	fba3 2302 	umull	r2, r3, r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d000      	beq.n	8002620 <xQueueGenericCreate+0x28>
 800261e:	2101      	movs	r1, #1
 8002620:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d123      	bne.n	800266e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800262e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002632:	d81c      	bhi.n	800266e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	3350      	adds	r3, #80	; 0x50
 8002642:	4618      	mov	r0, r3
 8002644:	f001 ffaa 	bl	800459c <pvPortMalloc>
 8002648:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01c      	beq.n	800268a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3350      	adds	r3, #80	; 0x50
 8002658:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800265a:	79fa      	ldrb	r2, [r7, #7]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f814 	bl	8002694 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800266c:	e00d      	b.n	800268a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xQueueGenericCreate+0x92>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	613b      	str	r3, [r7, #16]
    }
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800268a:	69fb      	ldr	r3, [r7, #28]
    }
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e002      	b.n	80026b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026c2:	2101      	movs	r1, #1
 80026c4:	69b8      	ldr	r0, [r7, #24]
 80026c6:	f7ff ff07 	bl	80024d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	68f9      	ldr	r1, [r7, #12]
 80026d8:	2073      	movs	r0, #115	; 0x73
 80026da:	f003 f8a9 	bl	8005830 <SEGGER_SYSVIEW_RecordU32x3>
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b08f      	sub	sp, #60	; 0x3c
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <xQueueReceive+0x30>
        __asm volatile
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	623b      	str	r3, [r7, #32]
    }
 8002714:	bf00      	nop
 8002716:	e7fe      	b.n	8002716 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <xQueueReceive+0x3e>
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <xQueueReceive+0x42>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <xQueueReceive+0x44>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <xQueueReceive+0x5e>
        __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	61fb      	str	r3, [r7, #28]
    }
 8002742:	bf00      	nop
 8002744:	e7fe      	b.n	8002744 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002746:	f001 f925 	bl	8003994 <xTaskGetSchedulerState>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <xQueueReceive+0x6e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <xQueueReceive+0x72>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <xQueueReceive+0x74>
 800275a:	2300      	movs	r3, #0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <xQueueReceive+0x8e>
        __asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	61bb      	str	r3, [r7, #24]
    }
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002776:	f001 fde5 	bl	8004344 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d02f      	beq.n	80027e6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278a:	f000 f8bd 	bl	8002908 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fdd9 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 8002796:	4604      	mov	r4, r0
 8002798:	2000      	movs	r0, #0
 800279a:	f003 fdd5 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 800279e:	4602      	mov	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2101      	movs	r1, #1
 80027a4:	9100      	str	r1, [sp, #0]
 80027a6:	4621      	mov	r1, r4
 80027a8:	205c      	movs	r0, #92	; 0x5c
 80027aa:	f003 f8b7 	bl	800591c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00f      	beq.n	80027de <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	3310      	adds	r3, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fed4 	bl	8003570 <xTaskRemoveFromEventList>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027ce:	4b4d      	ldr	r3, [pc, #308]	; (8002904 <xQueueReceive+0x21c>)
 80027d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027de:	f001 fde1 	bl	80043a4 <vPortExitCritical>
                return pdPASS;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e08a      	b.n	80028fc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d113      	bne.n	8002814 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027ec:	f001 fdda 	bl	80043a4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fda8 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 80027f8:	4604      	mov	r4, r0
 80027fa:	2000      	movs	r0, #0
 80027fc:	f003 fda4 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 8002800:	4602      	mov	r2, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2101      	movs	r1, #1
 8002806:	9100      	str	r1, [sp, #0]
 8002808:	4621      	mov	r1, r4
 800280a:	205c      	movs	r0, #92	; 0x5c
 800280c:	f003 f886 	bl	800591c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002810:	2300      	movs	r3, #0
 8002812:	e073      	b.n	80028fc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ff7e 	bl	8003720 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002828:	f001 fdbc 	bl	80043a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800282c:	f000 fb80 	bl	8002f30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002830:	f001 fd88 	bl	8004344 <vPortEnterCritical>
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800283a:	b25b      	sxtb	r3, r3
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002840:	d103      	bne.n	800284a <xQueueReceive+0x162>
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002850:	b25b      	sxtb	r3, r3
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002856:	d103      	bne.n	8002860 <xQueueReceive+0x178>
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002860:	f001 fda0 	bl	80043a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002864:	1d3a      	adds	r2, r7, #4
 8002866:	f107 0310 	add.w	r3, r7, #16
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f000 ff6d 	bl	800374c <xTaskCheckForTimeOut>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d124      	bne.n	80028c2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287a:	f000 f8bd 	bl	80029f8 <prvIsQueueEmpty>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d018      	beq.n	80028b6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fe03 	bl	8003498 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002894:	f000 f85e 	bl	8002954 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002898:	f000 fb58 	bl	8002f4c <xTaskResumeAll>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f47f af69 	bne.w	8002776 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <xQueueReceive+0x21c>)
 80028a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	e75f      	b.n	8002776 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b8:	f000 f84c 	bl	8002954 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028bc:	f000 fb46 	bl	8002f4c <xTaskResumeAll>
 80028c0:	e759      	b.n	8002776 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c4:	f000 f846 	bl	8002954 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028c8:	f000 fb40 	bl	8002f4c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ce:	f000 f893 	bl	80029f8 <prvIsQueueEmpty>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f43f af4e 	beq.w	8002776 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 fd33 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 80028e2:	4604      	mov	r4, r0
 80028e4:	2000      	movs	r0, #0
 80028e6:	f003 fd2f 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 80028ea:	4602      	mov	r2, r0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2101      	movs	r1, #1
 80028f0:	9100      	str	r1, [sp, #0]
 80028f2:	4621      	mov	r1, r4
 80028f4:	205c      	movs	r0, #92	; 0x5c
 80028f6:	f003 f811 	bl	800591c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80028fa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3734      	adds	r7, #52	; 0x34
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d018      	beq.n	800294c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	441a      	add	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	429a      	cmp	r2, r3
 8002932:	d303      	bcc.n	800293c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68d9      	ldr	r1, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	461a      	mov	r2, r3
 8002946:	6838      	ldr	r0, [r7, #0]
 8002948:	f003 fe90 	bl	800666c <memcpy>
    }
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800295c:	f001 fcf2 	bl	8004344 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002966:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002968:	e011      	b.n	800298e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3324      	adds	r3, #36	; 0x24
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fdfa 	bl	8003570 <xTaskRemoveFromEventList>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002982:	f000 ff49 	bl	8003818 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	3b01      	subs	r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	dce9      	bgt.n	800296a <prvUnlockQueue+0x16>
 8002996:	e000      	b.n	800299a <prvUnlockQueue+0x46>
                        break;
 8002998:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	22ff      	movs	r2, #255	; 0xff
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80029a2:	f001 fcff 	bl	80043a4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80029a6:	f001 fccd 	bl	8004344 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029b0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029b2:	e011      	b.n	80029d8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3310      	adds	r3, #16
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fdd5 	bl	8003570 <xTaskRemoveFromEventList>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80029cc:	f000 ff24 	bl	8003818 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80029d0:	7bbb      	ldrb	r3, [r7, #14]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	dce9      	bgt.n	80029b4 <prvUnlockQueue+0x60>
 80029e0:	e000      	b.n	80029e4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80029e2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	22ff      	movs	r2, #255	; 0xff
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80029ec:	f001 fcda 	bl	80043a4 <vPortExitCritical>
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a00:	f001 fca0 	bl	8004344 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e001      	b.n	8002a16 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a16:	f001 fcc5 	bl	80043a4 <vPortExitCritical>

    return xReturn;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <vQueueAddToRegistry+0x26>
        __asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	60fb      	str	r3, [r7, #12]
    }
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d024      	beq.n	8002a9e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e01e      	b.n	8002a98 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <vQueueAddToRegistry+0xa8>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d105      	bne.n	8002a76 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <vQueueAddToRegistry+0xa8>)
 8002a70:	4413      	add	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
                    break;
 8002a74:	e013      	b.n	8002a9e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <vQueueAddToRegistry+0x6e>
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <vQueueAddToRegistry+0xa8>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <vQueueAddToRegistry+0xa8>)
 8002a8e:	4413      	add	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	d9dd      	bls.n	8002a5a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00f      	beq.n	8002ac4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fc48 	bl	8006348 <SEGGER_SYSVIEW_ShrinkId>
 8002ab8:	4601      	mov	r1, r0
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	2071      	movs	r0, #113	; 0x71
 8002ac0:	f002 fe5c 	bl	800577c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002ac4:	bf00      	nop
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20013c68 	.word	0x20013c68

08002ad0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ae0:	f001 fc30 	bl	8004344 <vPortEnterCritical>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af0:	d103      	bne.n	8002afa <vQueueWaitForMessageRestricted+0x2a>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b06:	d103      	bne.n	8002b10 <vQueueWaitForMessageRestricted+0x40>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b10:	f001 fc48 	bl	80043a4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3324      	adds	r3, #36	; 0x24
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fcdb 	bl	80034e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff ff12 	bl	8002954 <prvUnlockQueue>
    }
 8002b30:	bf00      	nop
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af04      	add	r7, sp, #16
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 fd25 	bl	800459c <pvPortMalloc>
 8002b52:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00e      	beq.n	8002b78 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b5a:	2058      	movs	r0, #88	; 0x58
 8002b5c:	f001 fd1e 	bl	800459c <pvPortMalloc>
 8002b60:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6e:	e005      	b.n	8002b7c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f001 fdf3 	bl	800475c <vPortFree>
 8002b76:	e001      	b.n	8002b7c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d013      	beq.n	8002baa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	2300      	movs	r3, #0
 8002b86:	9303      	str	r3, [sp, #12]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f80e 	bl	8002bba <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b9e:	69f8      	ldr	r0, [r7, #28]
 8002ba0:	f000 f8b0 	bl	8002d04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	e002      	b.n	8002bb0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bae:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
    }
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b088      	sub	sp, #32
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	21a5      	movs	r1, #165	; 0xa5
 8002bd4:	f003 fd58 	bl	8006688 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002be2:	3b01      	subs	r3, #1
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f023 0307 	bic.w	r3, r3, #7
 8002bf0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	617b      	str	r3, [r7, #20]
    }
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01f      	beq.n	8002c58 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e012      	b.n	8002c44 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	7819      	ldrb	r1, [r3, #0]
 8002c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3334      	adds	r3, #52	; 0x34
 8002c2e:	460a      	mov	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3301      	adds	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d9e9      	bls.n	8002c1e <prvInitialiseNewTask+0x64>
 8002c4a:	e000      	b.n	8002c4e <prvInitialiseNewTask+0x94>
            {
                break;
 8002c4c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c56:	e003      	b.n	8002c60 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d90a      	bls.n	8002c7c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	613b      	str	r3, [r7, #16]
    }
 8002c78:	bf00      	nop
 8002c7a:	e7fe      	b.n	8002c7a <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d901      	bls.n	8002c86 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c82:	2304      	movs	r3, #4
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c90:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	2200      	movs	r2, #0
 8002c96:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fbab 	bl	80023f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	3318      	adds	r3, #24
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fba6 	bl	80023f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	f1c3 0205 	rsb	r2, r3, #5
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	3350      	adds	r3, #80	; 0x50
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 fcdc 	bl	8006688 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	3354      	adds	r3, #84	; 0x54
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fcd5 	bl	8006688 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	69b8      	ldr	r0, [r7, #24]
 8002ce4:	f001 f984 	bl	8003ff0 <pxPortInitialiseStack>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cfa:	bf00      	nop
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d0c:	f001 fb1a 	bl	8004344 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d10:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <prvAddNewTaskToReadyList+0x14c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <prvAddNewTaskToReadyList+0x14c>)
 8002d18:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d22:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <prvAddNewTaskToReadyList+0x14c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d110      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d30:	f000 fd96 	bl	8003860 <prvInitialiseTaskLists>
 8002d34:	e00d      	b.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d36:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <prvAddNewTaskToReadyList+0x154>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d3e:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d802      	bhi.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d4c:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <prvAddNewTaskToReadyList+0x158>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <prvAddNewTaskToReadyList+0x158>)
 8002d5a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <prvAddNewTaskToReadyList+0x158>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <prvAddNewTaskToReadyList+0x94>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 f9c5 	bl	80060fc <SEGGER_SYSVIEW_OnTaskCreate>
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	461d      	mov	r5, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461c      	mov	r4, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	1ae3      	subs	r3, r4, r3
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	462b      	mov	r3, r5
 8002d94:	f001 fea8 	bl	8004ae8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fa32 	bl	8006204 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	2201      	movs	r2, #1
 8002da6:	409a      	lsls	r2, r3
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <prvAddNewTaskToReadyList+0x15c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <prvAddNewTaskToReadyList+0x15c>)
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	492b      	ldr	r1, [pc, #172]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	3204      	adds	r2, #4
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1d1a      	adds	r2, r3, #4
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002df6:	441a      	add	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4918      	ldr	r1, [pc, #96]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	4814      	ldr	r0, [pc, #80]	; (8002e64 <prvAddNewTaskToReadyList+0x160>)
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4403      	add	r3, r0
 8002e1c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e1e:	f001 fac1 	bl	80043a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <prvAddNewTaskToReadyList+0x154>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00e      	beq.n	8002e48 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <prvAddNewTaskToReadyList+0x150>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <prvAddNewTaskToReadyList+0x164>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	20000170 	.word	0x20000170
 8002e54:	20000098 	.word	0x20000098
 8002e58:	2000017c 	.word	0x2000017c
 8002e5c:	2000018c 	.word	0x2000018c
 8002e60:	20000178 	.word	0x20000178
 8002e64:	2000009c 	.word	0x2000009c
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <vTaskStartScheduler+0xa4>)
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2282      	movs	r2, #130	; 0x82
 8002e7e:	4925      	ldr	r1, [pc, #148]	; (8002f14 <vTaskStartScheduler+0xa8>)
 8002e80:	4825      	ldr	r0, [pc, #148]	; (8002f18 <vTaskStartScheduler+0xac>)
 8002e82:	f7ff fe59 	bl	8002b38 <xTaskCreate>
 8002e86:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d102      	bne.n	8002e94 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e8e:	f000 fe2b 	bl	8003ae8 <xTimerCreateTimerTask>
 8002e92:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d124      	bne.n	8002ee4 <vTaskStartScheduler+0x78>
        __asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60bb      	str	r3, [r7, #8]
    }
 8002eac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <vTaskStartScheduler+0xb0>)
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <vTaskStartScheduler+0xb4>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <vTaskStartScheduler+0xb8>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <vTaskStartScheduler+0xbc>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <vTaskStartScheduler+0xa4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d102      	bne.n	8002ed4 <vTaskStartScheduler+0x68>
 8002ece:	f003 f8f9 	bl	80060c4 <SEGGER_SYSVIEW_OnIdle>
 8002ed2:	e004      	b.n	8002ede <vTaskStartScheduler+0x72>
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <vTaskStartScheduler+0xbc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 f951 	bl	8006180 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002ede:	f001 f911 	bl	8004104 <xPortStartScheduler>
 8002ee2:	e00e      	b.n	8002f02 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eea:	d10a      	bne.n	8002f02 <vTaskStartScheduler+0x96>
        __asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	607b      	str	r3, [r7, #4]
    }
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <vTaskStartScheduler+0xc0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000194 	.word	0x20000194
 8002f14:	08007058 	.word	0x08007058
 8002f18:	08003831 	.word	0x08003831
 8002f1c:	20000190 	.word	0x20000190
 8002f20:	2000017c 	.word	0x2000017c
 8002f24:	20000174 	.word	0x20000174
 8002f28:	20000098 	.word	0x20000098
 8002f2c:	2000000c 	.word	0x2000000c

08002f30 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <vTaskSuspendAll+0x18>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <vTaskSuspendAll+0x18>)
 8002f3c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	20000198 	.word	0x20000198

08002f4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f5a:	4b73      	ldr	r3, [pc, #460]	; (8003128 <xTaskResumeAll+0x1dc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	607b      	str	r3, [r7, #4]
    }
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f78:	f001 f9e4 	bl	8004344 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <xTaskResumeAll+0x1dc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4a69      	ldr	r2, [pc, #420]	; (8003128 <xTaskResumeAll+0x1dc>)
 8002f84:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f86:	4b68      	ldr	r3, [pc, #416]	; (8003128 <xTaskResumeAll+0x1dc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 80c4 	bne.w	8003118 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f90:	4b66      	ldr	r3, [pc, #408]	; (800312c <xTaskResumeAll+0x1e0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80bf 	beq.w	8003118 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f9a:	e08e      	b.n	80030ba <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9c:	4b64      	ldr	r3, [pc, #400]	; (8003130 <xTaskResumeAll+0x1e4>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	6a12      	ldr	r2, [r2, #32]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	69d2      	ldr	r2, [r2, #28]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d103      	bne.n	8002fd2 <xTaskResumeAll+0x86>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	68d2      	ldr	r2, [r2, #12]
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3304      	adds	r3, #4
 8003004:	429a      	cmp	r2, r3
 8003006:	d103      	bne.n	8003010 <xTaskResumeAll+0xc4>
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2200      	movs	r2, #0
 8003014:	615a      	str	r2, [r3, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1e5a      	subs	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 f8ee 	bl	8006204 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2201      	movs	r2, #1
 800302e:	409a      	lsls	r2, r3
 8003030:	4b40      	ldr	r3, [pc, #256]	; (8003134 <xTaskResumeAll+0x1e8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	4a3f      	ldr	r2, [pc, #252]	; (8003134 <xTaskResumeAll+0x1e8>)
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303e:	493e      	ldr	r1, [pc, #248]	; (8003138 <xTaskResumeAll+0x1ec>)
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3304      	adds	r3, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	3204      	adds	r2, #4
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	1d1a      	adds	r2, r3, #4
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4a2e      	ldr	r2, [pc, #184]	; (8003138 <xTaskResumeAll+0x1ec>)
 800307e:	441a      	add	r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	615a      	str	r2, [r3, #20]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003088:	492b      	ldr	r1, [pc, #172]	; (8003138 <xTaskResumeAll+0x1ec>)
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	1c59      	adds	r1, r3, #1
 8003098:	4827      	ldr	r0, [pc, #156]	; (8003138 <xTaskResumeAll+0x1ec>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4403      	add	r3, r0
 80030a4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <xTaskResumeAll+0x1f0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80030b4:	4b22      	ldr	r3, [pc, #136]	; (8003140 <xTaskResumeAll+0x1f4>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ba:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <xTaskResumeAll+0x1e4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f47f af6c 	bne.w	8002f9c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030ca:	f000 fc47 	bl	800395c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <xTaskResumeAll+0x1f8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030da:	f000 f859 	bl	8003190 <xTaskIncrementTick>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80030e4:	4b16      	ldr	r3, [pc, #88]	; (8003140 <xTaskResumeAll+0x1f4>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f1      	bne.n	80030da <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <xTaskResumeAll+0x1f8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <xTaskResumeAll+0x1f4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <xTaskResumeAll+0x1fc>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003118:	f001 f944 	bl	80043a4 <vPortExitCritical>

    return xAlreadyYielded;
 800311c:	69bb      	ldr	r3, [r7, #24]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000198 	.word	0x20000198
 800312c:	20000170 	.word	0x20000170
 8003130:	20000130 	.word	0x20000130
 8003134:	20000178 	.word	0x20000178
 8003138:	2000009c 	.word	0x2000009c
 800313c:	20000098 	.word	0x20000098
 8003140:	20000184 	.word	0x20000184
 8003144:	20000180 	.word	0x20000180
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <xTaskGetTickCount+0x1c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003158:	687b      	ldr	r3, [r7, #4]
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000174 	.word	0x20000174

0800316c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003172:	f001 f9d3 	bl	800451c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <xTaskGetTickCountFromISR+0x20>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003180:	683b      	ldr	r3, [r7, #0]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000174 	.word	0x20000174

08003190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <xTaskIncrementTick+0x208>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80f0 	bne.w	8003384 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031a4:	4b7d      	ldr	r3, [pc, #500]	; (800339c <xTaskIncrementTick+0x20c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031ac:	4a7b      	ldr	r2, [pc, #492]	; (800339c <xTaskIncrementTick+0x20c>)
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d120      	bne.n	80031fa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031b8:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <xTaskIncrementTick+0x210>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <xTaskIncrementTick+0x48>
        __asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	607b      	str	r3, [r7, #4]
    }
 80031d4:	bf00      	nop
 80031d6:	e7fe      	b.n	80031d6 <xTaskIncrementTick+0x46>
 80031d8:	4b71      	ldr	r3, [pc, #452]	; (80033a0 <xTaskIncrementTick+0x210>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	4b71      	ldr	r3, [pc, #452]	; (80033a4 <xTaskIncrementTick+0x214>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6f      	ldr	r2, [pc, #444]	; (80033a0 <xTaskIncrementTick+0x210>)
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4a6f      	ldr	r2, [pc, #444]	; (80033a4 <xTaskIncrementTick+0x214>)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b6e      	ldr	r3, [pc, #440]	; (80033a8 <xTaskIncrementTick+0x218>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a6d      	ldr	r2, [pc, #436]	; (80033a8 <xTaskIncrementTick+0x218>)
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	f000 fbb1 	bl	800395c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031fa:	4b6c      	ldr	r3, [pc, #432]	; (80033ac <xTaskIncrementTick+0x21c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	f0c0 80aa 	bcc.w	800335a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003206:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <xTaskIncrementTick+0x210>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003210:	4b66      	ldr	r3, [pc, #408]	; (80033ac <xTaskIncrementTick+0x21c>)
 8003212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003216:	601a      	str	r2, [r3, #0]
                    break;
 8003218:	e09f      	b.n	800335a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321a:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <xTaskIncrementTick+0x210>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800322a:	6a3a      	ldr	r2, [r7, #32]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d203      	bcs.n	800323a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003232:	4a5e      	ldr	r2, [pc, #376]	; (80033ac <xTaskIncrementTick+0x21c>)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003238:	e08f      	b.n	800335a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	68d2      	ldr	r2, [r2, #12]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	6892      	ldr	r2, [r2, #8]
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	3304      	adds	r3, #4
 800325c:	429a      	cmp	r2, r3
 800325e:	d103      	bne.n	8003268 <xTaskIncrementTick+0xd8>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1e5a      	subs	r2, r3, #1
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01e      	beq.n	80032be <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	6a12      	ldr	r2, [r2, #32]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	69d2      	ldr	r2, [r2, #28]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	3318      	adds	r3, #24
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d103      	bne.n	80032ae <xTaskIncrementTick+0x11e>
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2200      	movs	r2, #0
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 ff9f 	bl	8006204 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	2201      	movs	r2, #1
 80032cc:	409a      	lsls	r2, r3
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <xTaskIncrementTick+0x220>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	4a36      	ldr	r2, [pc, #216]	; (80033b0 <xTaskIncrementTick+0x220>)
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032dc:	4935      	ldr	r1, [pc, #212]	; (80033b4 <xTaskIncrementTick+0x224>)
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3304      	adds	r3, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	3204      	adds	r2, #4
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	1d1a      	adds	r2, r3, #4
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <xTaskIncrementTick+0x224>)
 800331c:	441a      	add	r2, r3
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	615a      	str	r2, [r3, #20]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	4923      	ldr	r1, [pc, #140]	; (80033b4 <xTaskIncrementTick+0x224>)
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1c59      	adds	r1, r3, #1
 8003336:	481f      	ldr	r0, [pc, #124]	; (80033b4 <xTaskIncrementTick+0x224>)
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4403      	add	r3, r0
 8003342:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <xTaskIncrementTick+0x228>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	429a      	cmp	r2, r3
 8003350:	f4ff af59 	bcc.w	8003206 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003358:	e755      	b.n	8003206 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800335a:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <xTaskIncrementTick+0x228>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4914      	ldr	r1, [pc, #80]	; (80033b4 <xTaskIncrementTick+0x224>)
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d901      	bls.n	8003376 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8003372:	2301      	movs	r3, #1
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <xTaskIncrementTick+0x22c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 800337e:	2301      	movs	r3, #1
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	e004      	b.n	800338e <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <xTaskIncrementTick+0x230>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <xTaskIncrementTick+0x230>)
 800338c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000198 	.word	0x20000198
 800339c:	20000174 	.word	0x20000174
 80033a0:	20000128 	.word	0x20000128
 80033a4:	2000012c 	.word	0x2000012c
 80033a8:	20000188 	.word	0x20000188
 80033ac:	20000190 	.word	0x20000190
 80033b0:	20000178 	.word	0x20000178
 80033b4:	2000009c 	.word	0x2000009c
 80033b8:	20000098 	.word	0x20000098
 80033bc:	20000184 	.word	0x20000184
 80033c0:	20000180 	.word	0x20000180

080033c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <vTaskSwitchContext+0xbc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <vTaskSwitchContext+0xc0>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033d8:	e04d      	b.n	8003476 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <vTaskSwitchContext+0xc0>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <vTaskSwitchContext+0xc4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	f1c3 031f 	rsb	r3, r3, #31
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	4925      	ldr	r1, [pc, #148]	; (800348c <vTaskSwitchContext+0xc8>)
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <vTaskSwitchContext+0x5c>
        __asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	607b      	str	r3, [r7, #4]
    }
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vTaskSwitchContext+0x5a>
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4a18      	ldr	r2, [pc, #96]	; (800348c <vTaskSwitchContext+0xc8>)
 800342c:	4413      	add	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	3308      	adds	r3, #8
 8003442:	429a      	cmp	r2, r3
 8003444:	d104      	bne.n	8003450 <vTaskSwitchContext+0x8c>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <vTaskSwitchContext+0xcc>)
 8003458:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <vTaskSwitchContext+0xcc>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <vTaskSwitchContext+0xd0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d102      	bne.n	800346c <vTaskSwitchContext+0xa8>
 8003466:	f002 fe2d 	bl	80060c4 <SEGGER_SYSVIEW_OnIdle>
}
 800346a:	e004      	b.n	8003476 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <vTaskSwitchContext+0xcc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f002 fe85 	bl	8006180 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000198 	.word	0x20000198
 8003484:	20000184 	.word	0x20000184
 8003488:	20000178 	.word	0x20000178
 800348c:	2000009c 	.word	0x2000009c
 8003490:	20000098 	.word	0x20000098
 8003494:	20000194 	.word	0x20000194

08003498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	60fb      	str	r3, [r7, #12]
    }
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <vTaskPlaceOnEventList+0x44>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3318      	adds	r3, #24
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe ffa3 	bl	8002412 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034cc:	2101      	movs	r1, #1
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f000 fa7e 	bl	80039d0 <prvAddCurrentTaskToDelayedList>
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000098 	.word	0x20000098

080034e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	613b      	str	r3, [r7, #16]
    }
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	61da      	str	r2, [r3, #28]
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	621a      	str	r2, [r3, #32]
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	3218      	adds	r2, #24
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <vTaskPlaceOnEventListRestricted+0x8c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f103 0218 	add.w	r2, r3, #24
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <vTaskPlaceOnEventListRestricted+0x8c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003554:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003556:	2024      	movs	r0, #36	; 0x24
 8003558:	f002 f8b6 	bl	80056c8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	68b8      	ldr	r0, [r7, #8]
 8003560:	f000 fa36 	bl	80039d0 <prvAddCurrentTaskToDelayedList>
    }
 8003564:	bf00      	nop
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000098 	.word	0x20000098

08003570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	60fb      	str	r3, [r7, #12]
    }
 8003598:	bf00      	nop
 800359a:	e7fe      	b.n	800359a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	6a3a      	ldr	r2, [r7, #32]
 80035a8:	6a12      	ldr	r2, [r2, #32]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	69d2      	ldr	r2, [r2, #28]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	3318      	adds	r3, #24
 80035be:	429a      	cmp	r2, r3
 80035c0:	d103      	bne.n	80035ca <xTaskRemoveFromEventList+0x5a>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035da:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <xTaskRemoveFromEventList+0x198>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d162      	bne.n	80036a8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	68d2      	ldr	r2, [r2, #12]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	6a3a      	ldr	r2, [r7, #32]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	3304      	adds	r3, #4
 8003604:	429a      	cmp	r2, r3
 8003606:	d103      	bne.n	8003610 <xTaskRemoveFromEventList+0xa0>
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	2200      	movs	r2, #0
 8003614:	615a      	str	r2, [r3, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	1e5a      	subs	r2, r3, #1
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	4618      	mov	r0, r3
 8003624:	f002 fdee 	bl	8006204 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	409a      	lsls	r2, r3
 8003630:	4b36      	ldr	r3, [pc, #216]	; (800370c <xTaskRemoveFromEventList+0x19c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4313      	orrs	r3, r2
 8003636:	4a35      	ldr	r2, [pc, #212]	; (800370c <xTaskRemoveFromEventList+0x19c>)
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	4934      	ldr	r1, [pc, #208]	; (8003710 <xTaskRemoveFromEventList+0x1a0>)
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3304      	adds	r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	6a3a      	ldr	r2, [r7, #32]
 8003664:	3204      	adds	r2, #4
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4a24      	ldr	r2, [pc, #144]	; (8003710 <xTaskRemoveFromEventList+0x1a0>)
 800367e:	441a      	add	r2, r3
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	615a      	str	r2, [r3, #20]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4921      	ldr	r1, [pc, #132]	; (8003710 <xTaskRemoveFromEventList+0x1a0>)
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1c59      	adds	r1, r3, #1
 8003698:	481d      	ldr	r0, [pc, #116]	; (8003710 <xTaskRemoveFromEventList+0x1a0>)
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4403      	add	r3, r0
 80036a4:	6019      	str	r1, [r3, #0]
 80036a6:	e01b      	b.n	80036e0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <xTaskRemoveFromEventList+0x1a4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	61da      	str	r2, [r3, #28]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	621a      	str	r2, [r3, #32]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	3218      	adds	r2, #24
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f103 0218 	add.w	r2, r3, #24
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <xTaskRemoveFromEventList+0x1a4>)
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
 80036d6:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <xTaskRemoveFromEventList+0x1a4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <xTaskRemoveFromEventList+0x1a4>)
 80036de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <xTaskRemoveFromEventList+0x1a8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d905      	bls.n	80036fa <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <xTaskRemoveFromEventList+0x1ac>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e001      	b.n	80036fe <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003700:	4618      	mov	r0, r3
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000198 	.word	0x20000198
 800370c:	20000178 	.word	0x20000178
 8003710:	2000009c 	.word	0x2000009c
 8003714:	20000130 	.word	0x20000130
 8003718:	20000098 	.word	0x20000098
 800371c:	20000184 	.word	0x20000184

08003720 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <vTaskInternalSetTimeOutState+0x24>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <vTaskInternalSetTimeOutState+0x28>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	605a      	str	r2, [r3, #4]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	20000188 	.word	0x20000188
 8003748:	20000174 	.word	0x20000174

0800374c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	613b      	str	r3, [r7, #16]
    }
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	60fb      	str	r3, [r7, #12]
    }
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800378e:	f000 fdd9 	bl	8004344 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <xTaskCheckForTimeOut+0xc4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037aa:	d102      	bne.n	80037b2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e026      	b.n	8003800 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <xTaskCheckForTimeOut+0xc8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d00a      	beq.n	80037d4 <xTaskCheckForTimeOut+0x88>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d305      	bcc.n	80037d4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037c8:	2301      	movs	r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e015      	b.n	8003800 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d20b      	bcs.n	80037f6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff98 	bl	8003720 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	e004      	b.n	8003800 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003800:	f000 fdd0 	bl	80043a4 <vPortExitCritical>

    return xReturn;
 8003804:	69fb      	ldr	r3, [r7, #28]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000174 	.word	0x20000174
 8003814:	20000188 	.word	0x20000188

08003818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <vTaskMissedYield+0x14>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	20000184 	.word	0x20000184

08003830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003838:	f000 f852 	bl	80038e0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <prvIdleTask+0x28>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d9f9      	bls.n	8003838 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <prvIdleTask+0x2c>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003854:	e7f0      	b.n	8003838 <prvIdleTask+0x8>
 8003856:	bf00      	nop
 8003858:	2000009c 	.word	0x2000009c
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	e00c      	b.n	8003886 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <prvInitialiseTaskLists+0x60>)
 8003878:	4413      	add	r3, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fd9c 	bl	80023b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3301      	adds	r3, #1
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d9ef      	bls.n	800386c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800388c:	480d      	ldr	r0, [pc, #52]	; (80038c4 <prvInitialiseTaskLists+0x64>)
 800388e:	f7fe fd93 	bl	80023b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003892:	480d      	ldr	r0, [pc, #52]	; (80038c8 <prvInitialiseTaskLists+0x68>)
 8003894:	f7fe fd90 	bl	80023b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003898:	480c      	ldr	r0, [pc, #48]	; (80038cc <prvInitialiseTaskLists+0x6c>)
 800389a:	f7fe fd8d 	bl	80023b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800389e:	480c      	ldr	r0, [pc, #48]	; (80038d0 <prvInitialiseTaskLists+0x70>)
 80038a0:	f7fe fd8a 	bl	80023b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038a4:	480b      	ldr	r0, [pc, #44]	; (80038d4 <prvInitialiseTaskLists+0x74>)
 80038a6:	f7fe fd87 	bl	80023b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <prvInitialiseTaskLists+0x78>)
 80038ac:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <prvInitialiseTaskLists+0x64>)
 80038ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <prvInitialiseTaskLists+0x7c>)
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <prvInitialiseTaskLists+0x68>)
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	2000009c 	.word	0x2000009c
 80038c4:	20000100 	.word	0x20000100
 80038c8:	20000114 	.word	0x20000114
 80038cc:	20000130 	.word	0x20000130
 80038d0:	20000144 	.word	0x20000144
 80038d4:	2000015c 	.word	0x2000015c
 80038d8:	20000128 	.word	0x20000128
 80038dc:	2000012c 	.word	0x2000012c

080038e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038e6:	e019      	b.n	800391c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80038e8:	f000 fd2c 	bl	8004344 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ec:	4b10      	ldr	r3, [pc, #64]	; (8003930 <prvCheckTasksWaitingTermination+0x50>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fdc3 	bl	8002484 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <prvCheckTasksWaitingTermination+0x54>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <prvCheckTasksWaitingTermination+0x54>)
 8003906:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <prvCheckTasksWaitingTermination+0x58>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3b01      	subs	r3, #1
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <prvCheckTasksWaitingTermination+0x58>)
 8003910:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003912:	f000 fd47 	bl	80043a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f810 	bl	800393c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <prvCheckTasksWaitingTermination+0x58>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e1      	bne.n	80038e8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000144 	.word	0x20000144
 8003934:	20000170 	.word	0x20000170
 8003938:	20000158 	.word	0x20000158

0800393c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	4618      	mov	r0, r3
 800394a:	f000 ff07 	bl	800475c <vPortFree>
                vPortFree( pxTCB );
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 ff04 	bl	800475c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <prvResetNextTaskUnblockTime+0x30>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <prvResetNextTaskUnblockTime+0x34>)
 800396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003970:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003972:	e005      	b.n	8003980 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <prvResetNextTaskUnblockTime+0x30>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <prvResetNextTaskUnblockTime+0x34>)
 800397e:	6013      	str	r3, [r2, #0]
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000128 	.word	0x20000128
 8003990:	20000190 	.word	0x20000190

08003994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <xTaskGetSchedulerState+0x34>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039a2:	2301      	movs	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	e008      	b.n	80039ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <xTaskGetSchedulerState+0x38>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039b0:	2302      	movs	r3, #2
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	e001      	b.n	80039ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039ba:	687b      	ldr	r3, [r7, #4]
    }
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	2000017c 	.word	0x2000017c
 80039cc:	20000198 	.word	0x20000198

080039d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039da:	4b3c      	ldr	r3, [pc, #240]	; (8003acc <prvAddCurrentTaskToDelayedList+0xfc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e0:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fd4c 	bl	8002484 <uxListRemove>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	2201      	movs	r2, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0x104>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4013      	ands	r3, r2
 8003a06:	4a33      	ldr	r2, [pc, #204]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0x104>)
 8003a08:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a10:	d124      	bne.n	8003a5c <prvAddCurrentTaskToDelayedList+0x8c>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d021      	beq.n	8003a5c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a18:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	6892      	ldr	r2, [r2, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	3204      	adds	r2, #4
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	1d1a      	adds	r2, r3, #4
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003a4c:	615a      	str	r2, [r3, #20]
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a5a:	e032      	b.n	8003ac2 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d20f      	bcs.n	8003a94 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2104      	movs	r1, #4
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f002 fc04 	bl	8006288 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <prvAddCurrentTaskToDelayedList+0x10c>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f7fe fcc0 	bl	8002412 <vListInsert>
}
 8003a92:	e016      	b.n	8003ac2 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2104      	movs	r1, #4
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 fbf4 	bl	8006288 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0x110>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fe fcb0 	bl	8002412 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d202      	bcs.n	8003ac2 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003abc:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6013      	str	r3, [r2, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000174 	.word	0x20000174
 8003ad0:	20000098 	.word	0x20000098
 8003ad4:	20000178 	.word	0x20000178
 8003ad8:	2000015c 	.word	0x2000015c
 8003adc:	2000012c 	.word	0x2000012c
 8003ae0:	20000128 	.word	0x20000128
 8003ae4:	20000190 	.word	0x20000190

08003ae8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003af2:	f000 fa47 	bl	8003f84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <xTimerCreateTimerTask+0x54>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <xTimerCreateTimerTask+0x58>)
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	2302      	movs	r3, #2
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b0c:	490d      	ldr	r1, [pc, #52]	; (8003b44 <xTimerCreateTimerTask+0x5c>)
 8003b0e:	480e      	ldr	r0, [pc, #56]	; (8003b48 <xTimerCreateTimerTask+0x60>)
 8003b10:	f7ff f812 	bl	8002b38 <xTaskCreate>
 8003b14:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	603b      	str	r3, [r7, #0]
    }
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003b32:	687b      	ldr	r3, [r7, #4]
    }
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200001cc 	.word	0x200001cc
 8003b40:	200001d0 	.word	0x200001d0
 8003b44:	08007060 	.word	0x08007060
 8003b48:	08003bf1 	.word	0x08003bf1

08003b4c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b58:	e008      	b.n	8003b6c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	18d1      	adds	r1, r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f8dd 	bl	8003d38 <prvInsertTimerInActiveList>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ea      	bne.n	8003b5a <prvReloadTimer+0xe>
        }
    }
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <prvProcessExpiredTimer+0x5c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fc6b 	bl	8002484 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff ffc3 	bl	8003b4c <prvReloadTimer>
 8003bc6:	e008      	b.n	8003bda <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	4798      	blx	r3
    }
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200001c4 	.word	0x200001c4

08003bf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bf8:	f107 0308 	add.w	r3, r7, #8
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 f857 	bl	8003cb0 <prvGetNextExpireTime>
 8003c02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4619      	mov	r1, r3
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f803 	bl	8003c14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c0e:	f000 f8d5 	bl	8003dbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c12:	e7f1      	b.n	8003bf8 <prvTimerTask+0x8>

08003c14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c1e:	f7ff f987 	bl	8002f30 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f866 	bl	8003cf8 <prvSampleTimeNow>
 8003c2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d130      	bne.n	8003c96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <prvProcessTimerOrBlockTask+0x3c>
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d806      	bhi.n	8003c50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c42:	f7ff f983 	bl	8002f4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ffa1 	bl	8003b90 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c4e:	e024      	b.n	8003c9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <prvProcessTimerOrBlockTask+0x90>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <prvProcessTimerOrBlockTask+0x50>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <prvProcessTimerOrBlockTask+0x52>
 8003c64:	2300      	movs	r3, #0
 8003c66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <prvProcessTimerOrBlockTask+0x94>)
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4619      	mov	r1, r3
 8003c76:	f7fe ff2b 	bl	8002ad0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c7a:	f7ff f967 	bl	8002f4c <xTaskResumeAll>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <prvProcessTimerOrBlockTask+0x98>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
    }
 8003c94:	e001      	b.n	8003c9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c96:	f7ff f959 	bl	8002f4c <xTaskResumeAll>
    }
 8003c9a:	bf00      	nop
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200001c8 	.word	0x200001c8
 8003ca8:	200001cc 	.word	0x200001cc
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <prvGetNextExpireTime+0x44>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <prvGetNextExpireTime+0x16>
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	e000      	b.n	8003cc8 <prvGetNextExpireTime+0x18>
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cd4:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <prvGetNextExpireTime+0x44>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e001      	b.n	8003ce4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	200001c4 	.word	0x200001c4

08003cf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d00:	f7ff fa24 	bl	800314c <xTaskGetTickCount>
 8003d04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <prvSampleTimeNow+0x3c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d205      	bcs.n	8003d1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d10:	f000 f912 	bl	8003f38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e002      	b.n	8003d22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d22:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <prvSampleTimeNow+0x3c>)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d28:	68fb      	ldr	r3, [r7, #12]
    }
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200001d4 	.word	0x200001d4

08003d38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d812      	bhi.n	8003d84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e01b      	b.n	8003daa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <prvInsertTimerInActiveList+0x7c>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7fe fb48 	bl	8002412 <vListInsert>
 8003d82:	e012      	b.n	8003daa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d206      	bcs.n	8003d9a <prvInsertTimerInActiveList+0x62>
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e007      	b.n	8003daa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <prvInsertTimerInActiveList+0x80>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7fe fb34 	bl	8002412 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003daa:	697b      	ldr	r3, [r7, #20]
    }
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200001c8 	.word	0x200001c8
 8003db8:	200001c4 	.word	0x200001c4

08003dbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dc2:	e0a6      	b.n	8003f12 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f2c0 80a2 	blt.w	8003f10 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fb51 	bl	8002484 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff87 	bl	8003cf8 <prvSampleTimeNow>
 8003dea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	f200 808e 	bhi.w	8003f12 <prvProcessReceivedCommands+0x156>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <prvProcessReceivedCommands+0x40>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e21 	.word	0x08003e21
 8003e04:	08003e89 	.word	0x08003e89
 8003e08:	08003e9d 	.word	0x08003e9d
 8003e0c:	08003ee7 	.word	0x08003ee7
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e21 	.word	0x08003e21
 8003e18:	08003e89 	.word	0x08003e89
 8003e1c:	08003e9d 	.word	0x08003e9d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	18d1      	adds	r1, r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	69f8      	ldr	r0, [r7, #28]
 8003e40:	f7ff ff7a 	bl	8003d38 <prvInsertTimerInActiveList>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d063      	beq.n	8003f12 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4619      	mov	r1, r3
 8003e64:	69f8      	ldr	r0, [r7, #28]
 8003e66:	f7ff fe71 	bl	8003b4c <prvReloadTimer>
 8003e6a:	e008      	b.n	8003e7e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	69f8      	ldr	r0, [r7, #28]
 8003e84:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e86:	e044      	b.n	8003f12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e9a:	e03a      	b.n	8003f12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	617b      	str	r3, [r7, #20]
    }
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	18d1      	adds	r1, r2, r3
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	69f8      	ldr	r0, [r7, #28]
 8003ee0:	f7ff ff2a 	bl	8003d38 <prvInsertTimerInActiveList>
                        break;
 8003ee4:	e015      	b.n	8003f12 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d103      	bne.n	8003efc <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003ef4:	69f8      	ldr	r0, [r7, #28]
 8003ef6:	f000 fc31 	bl	800475c <vPortFree>
 8003efa:	e00a      	b.n	8003f12 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f0e:	e000      	b.n	8003f12 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f10:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f12:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <prvProcessReceivedCommands+0x178>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f107 0108 	add.w	r1, r7, #8
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fbe3 	bl	80026e8 <xQueueReceive>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f af4d 	bne.w	8003dc4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	200001cc 	.word	0x200001cc

08003f38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f3e:	e009      	b.n	8003f54 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <prvSwitchTimerLists+0x44>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003f4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f4e:	6838      	ldr	r0, [r7, #0]
 8003f50:	f7ff fe1e 	bl	8003b90 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <prvSwitchTimerLists+0x44>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <prvSwitchTimerLists+0x44>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <prvSwitchTimerLists+0x48>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <prvSwitchTimerLists+0x44>)
 8003f6a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <prvSwitchTimerLists+0x48>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
    }
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200001c4 	.word	0x200001c4
 8003f80:	200001c8 	.word	0x200001c8

08003f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f88:	f000 f9dc 	bl	8004344 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11d      	bne.n	8003fd0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f94:	4811      	ldr	r0, [pc, #68]	; (8003fdc <prvCheckForValidListAndQueue+0x58>)
 8003f96:	f7fe fa0f 	bl	80023b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f9a:	4811      	ldr	r0, [pc, #68]	; (8003fe0 <prvCheckForValidListAndQueue+0x5c>)
 8003f9c:	f7fe fa0c 	bl	80023b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <prvCheckForValidListAndQueue+0x60>)
 8003fa2:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <prvCheckForValidListAndQueue+0x58>)
 8003fa4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <prvCheckForValidListAndQueue+0x64>)
 8003fa8:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <prvCheckForValidListAndQueue+0x5c>)
 8003faa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fac:	2200      	movs	r2, #0
 8003fae:	210c      	movs	r1, #12
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f7fe fb21 	bl	80025f8 <xQueueGenericCreate>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003fba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <prvCheckForValidListAndQueue+0x54>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4908      	ldr	r1, [pc, #32]	; (8003fec <prvCheckForValidListAndQueue+0x68>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fd2a 	bl	8002a24 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fd0:	f000 f9e8 	bl	80043a4 <vPortExitCritical>
    }
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	200001cc 	.word	0x200001cc
 8003fdc:	2000019c 	.word	0x2000019c
 8003fe0:	200001b0 	.word	0x200001b0
 8003fe4:	200001c4 	.word	0x200001c4
 8003fe8:	200001c8 	.word	0x200001c8
 8003fec:	08007068 	.word	0x08007068

08003ff0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b04      	subs	r3, #4
 8004000:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004008:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b04      	subs	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b04      	subs	r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004020:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <pxPortInitialiseStack+0x64>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b14      	subs	r3, #20
 800402a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b04      	subs	r3, #4
 8004036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f06f 0202 	mvn.w	r2, #2
 800403e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b20      	subs	r3, #32
 8004044:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	08004059 	.word	0x08004059

08004058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <prvTaskExitError+0x54>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406a:	d00a      	beq.n	8004082 <prvTaskExitError+0x2a>
        __asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
    }
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <prvTaskExitError+0x28>
        __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60bb      	str	r3, [r7, #8]
    }
 8004094:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004096:	bf00      	nop
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0fc      	beq.n	8004098 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800409e:	bf00      	nop
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	20000010 	.word	0x20000010

080040b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <pxCurrentTCBConst2>)
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	6808      	ldr	r0, [r1, #0]
 80040b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ba:	f380 8809 	msr	PSP, r0
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8811 	msr	BASEPRI, r0
 80040ca:	4770      	bx	lr
 80040cc:	f3af 8000 	nop.w

080040d0 <pxCurrentTCBConst2>:
 80040d0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop

080040d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040d8:	4808      	ldr	r0, [pc, #32]	; (80040fc <prvPortStartFirstTask+0x24>)
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	6800      	ldr	r0, [r0, #0]
 80040de:	f380 8808 	msr	MSP, r0
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8814 	msr	CONTROL, r0
 80040ea:	b662      	cpsie	i
 80040ec:	b661      	cpsie	f
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	df00      	svc	0
 80040f8:	bf00      	nop
 80040fa:	0000      	.short	0x0000
 80040fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop

08004104 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800410a:	4b46      	ldr	r3, [pc, #280]	; (8004224 <xPortStartScheduler+0x120>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a46      	ldr	r2, [pc, #280]	; (8004228 <xPortStartScheduler+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10a      	bne.n	800412a <xPortStartScheduler+0x26>
        __asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	613b      	str	r3, [r7, #16]
    }
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800412a:	4b3e      	ldr	r3, [pc, #248]	; (8004224 <xPortStartScheduler+0x120>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3f      	ldr	r2, [pc, #252]	; (800422c <xPortStartScheduler+0x128>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10a      	bne.n	800414a <xPortStartScheduler+0x46>
        __asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	60fb      	str	r3, [r7, #12]
    }
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800414a:	4b39      	ldr	r3, [pc, #228]	; (8004230 <xPortStartScheduler+0x12c>)
 800414c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	22ff      	movs	r2, #255	; 0xff
 800415a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <xPortStartScheduler+0x130>)
 8004170:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <xPortStartScheduler+0x134>)
 8004174:	2207      	movs	r2, #7
 8004176:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004178:	e009      	b.n	800418e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <xPortStartScheduler+0x134>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3b01      	subs	r3, #1
 8004180:	4a2d      	ldr	r2, [pc, #180]	; (8004238 <xPortStartScheduler+0x134>)
 8004182:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d0ef      	beq.n	800417a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800419a:	4b27      	ldr	r3, [pc, #156]	; (8004238 <xPortStartScheduler+0x134>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1c3 0307 	rsb	r3, r3, #7
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d00a      	beq.n	80041bc <xPortStartScheduler+0xb8>
        __asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	60bb      	str	r3, [r7, #8]
    }
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041bc:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <xPortStartScheduler+0x134>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <xPortStartScheduler+0x134>)
 80041c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041c6:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <xPortStartScheduler+0x134>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <xPortStartScheduler+0x134>)
 80041d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041da:	4b18      	ldr	r3, [pc, #96]	; (800423c <xPortStartScheduler+0x138>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a17      	ldr	r2, [pc, #92]	; (800423c <xPortStartScheduler+0x138>)
 80041e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <xPortStartScheduler+0x138>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a14      	ldr	r2, [pc, #80]	; (800423c <xPortStartScheduler+0x138>)
 80041ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041f2:	f000 f963 	bl	80044bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <xPortStartScheduler+0x13c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041fc:	f000 f982 	bl	8004504 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <xPortStartScheduler+0x140>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <xPortStartScheduler+0x140>)
 8004206:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800420c:	f7ff ff64 	bl	80040d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004210:	f7ff f8d8 	bl	80033c4 <vTaskSwitchContext>
    prvTaskExitError();
 8004214:	f7ff ff20 	bl	8004058 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000ed00 	.word	0xe000ed00
 8004228:	410fc271 	.word	0x410fc271
 800422c:	410fc270 	.word	0x410fc270
 8004230:	e000e400 	.word	0xe000e400
 8004234:	200001d8 	.word	0x200001d8
 8004238:	200001dc 	.word	0x200001dc
 800423c:	e000ed20 	.word	0xe000ed20
 8004240:	20000010 	.word	0x20000010
 8004244:	e000ef34 	.word	0xe000ef34

08004248 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800424e:	4b37      	ldr	r3, [pc, #220]	; (800432c <vInitPrioGroupValue+0xe4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a37      	ldr	r2, [pc, #220]	; (8004330 <vInitPrioGroupValue+0xe8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10a      	bne.n	800426e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	613b      	str	r3, [r7, #16]
    }
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800426e:	4b2f      	ldr	r3, [pc, #188]	; (800432c <vInitPrioGroupValue+0xe4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a30      	ldr	r2, [pc, #192]	; (8004334 <vInitPrioGroupValue+0xec>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10a      	bne.n	800428e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60fb      	str	r3, [r7, #12]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800428e:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <vInitPrioGroupValue+0xf0>)
 8004290:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <vInitPrioGroupValue+0xf4>)
 80042b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042b6:	4b22      	ldr	r3, [pc, #136]	; (8004340 <vInitPrioGroupValue+0xf8>)
 80042b8:	2207      	movs	r2, #7
 80042ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042bc:	e009      	b.n	80042d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <vInitPrioGroupValue+0xf8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <vInitPrioGroupValue+0xf8>)
 80042c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d0ef      	beq.n	80042be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <vInitPrioGroupValue+0xf8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f1c3 0307 	rsb	r3, r3, #7
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00a      	beq.n	8004300 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	60bb      	str	r3, [r7, #8]
    }
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <vInitPrioGroupValue+0xf8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	4a0e      	ldr	r2, [pc, #56]	; (8004340 <vInitPrioGroupValue+0xf8>)
 8004308:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <vInitPrioGroupValue+0xf8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <vInitPrioGroupValue+0xf8>)
 8004314:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000ed00 	.word	0xe000ed00
 8004330:	410fc271 	.word	0x410fc271
 8004334:	410fc270 	.word	0x410fc270
 8004338:	e000e400 	.word	0xe000e400
 800433c:	200001d8 	.word	0x200001d8
 8004340:	200001dc 	.word	0x200001dc

08004344 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
        __asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	607b      	str	r3, [r7, #4]
    }
 800435c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <vPortEnterCritical+0x58>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	4a0d      	ldr	r2, [pc, #52]	; (800439c <vPortEnterCritical+0x58>)
 8004366:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <vPortEnterCritical+0x58>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10f      	bne.n	8004390 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <vPortEnterCritical+0x5c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <vPortEnterCritical+0x4c>
        __asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	603b      	str	r3, [r7, #0]
    }
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <vPortEnterCritical+0x4a>
    }
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20000010 	.word	0x20000010
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <vPortExitCritical+0x50>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <vPortExitCritical+0x24>
        __asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	607b      	str	r3, [r7, #4]
    }
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <vPortExitCritical+0x50>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <vPortExitCritical+0x50>)
 80043d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <vPortExitCritical+0x50>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <vPortExitCritical+0x42>
 80043da:	2300      	movs	r3, #0
 80043dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80043e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000010 	.word	0x20000010
	...

08004400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004400:	f3ef 8009 	mrs	r0, PSP
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <pxCurrentTCBConst>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f01e 0f10 	tst.w	lr, #16
 8004410:	bf08      	it	eq
 8004412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	6010      	str	r0, [r2, #0]
 800441c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004424:	f380 8811 	msr	BASEPRI, r0
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f7fe ffc8 	bl	80033c4 <vTaskSwitchContext>
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f380 8811 	msr	BASEPRI, r0
 800443c:	bc09      	pop	{r0, r3}
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004446:	f01e 0f10 	tst.w	lr, #16
 800444a:	bf08      	it	eq
 800444c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004450:	f380 8809 	msr	PSP, r0
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst>:
 8004460:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
    }
 8004480:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004482:	f001 fda5 	bl	8005fd0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004486:	f7fe fe83 	bl	8003190 <xTaskIncrementTick>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d006      	beq.n	800449e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004490:	f001 fdfc 	bl	800608c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <SysTick_Handler+0x50>)
 8004496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e001      	b.n	80044a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800449e:	f001 fdd9 	bl	8006054 <SEGGER_SYSVIEW_RecordExitISR>
 80044a2:	2300      	movs	r3, #0
 80044a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f383 8811 	msr	BASEPRI, r3
    }
 80044ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <vPortSetupTimerInterrupt+0x34>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <vPortSetupTimerInterrupt+0x38>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <vPortSetupTimerInterrupt+0x3c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <vPortSetupTimerInterrupt+0x40>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	4a09      	ldr	r2, [pc, #36]	; (8004500 <vPortSetupTimerInterrupt+0x44>)
 80044da:	3b01      	subs	r3, #1
 80044dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044de:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <vPortSetupTimerInterrupt+0x34>)
 80044e0:	2207      	movs	r2, #7
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000e010 	.word	0xe000e010
 80044f4:	e000e018 	.word	0xe000e018
 80044f8:	20000000 	.word	0x20000000
 80044fc:	10624dd3 	.word	0x10624dd3
 8004500:	e000e014 	.word	0xe000e014

08004504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004514 <vPortEnableVFP+0x10>
 8004508:	6801      	ldr	r1, [r0, #0]
 800450a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800450e:	6001      	str	r1, [r0, #0]
 8004510:	4770      	bx	lr
 8004512:	0000      	.short	0x0000
 8004514:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop

0800451c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004522:	f3ef 8305 	mrs	r3, IPSR
 8004526:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b0f      	cmp	r3, #15
 800452c:	d914      	bls.n	8004558 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <vPortValidateInterruptPriority+0x70>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004538:	4b15      	ldr	r3, [pc, #84]	; (8004590 <vPortValidateInterruptPriority+0x74>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	7afa      	ldrb	r2, [r7, #11]
 800453e:	429a      	cmp	r2, r3
 8004540:	d20a      	bcs.n	8004558 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	607b      	str	r3, [r7, #4]
    }
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <vPortValidateInterruptPriority+0x78>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <vPortValidateInterruptPriority+0x7c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d90a      	bls.n	800457e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	603b      	str	r3, [r7, #0]
    }
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <vPortValidateInterruptPriority+0x60>
    }
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e3f0 	.word	0xe000e3f0
 8004590:	200001d8 	.word	0x200001d8
 8004594:	e000ed0c 	.word	0xe000ed0c
 8004598:	200001dc 	.word	0x200001dc

0800459c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045a8:	f7fe fcc2 	bl	8002f30 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045ac:	4b65      	ldr	r3, [pc, #404]	; (8004744 <pvPortMalloc+0x1a8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045b4:	f000 f934 	bl	8004820 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045b8:	4b63      	ldr	r3, [pc, #396]	; (8004748 <pvPortMalloc+0x1ac>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 80a7 	bne.w	8004714 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02d      	beq.n	8004628 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045cc:	2208      	movs	r2, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d227      	bcs.n	8004628 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80045d8:	2208      	movs	r2, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d021      	beq.n	800462e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	3308      	adds	r3, #8
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d214      	bcs.n	8004622 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	3308      	adds	r3, #8
 8004600:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	2b00      	cmp	r3, #0
 800460a:	d010      	beq.n	800462e <pvPortMalloc+0x92>
        __asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	617b      	str	r3, [r7, #20]
    }
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004626:	e002      	b.n	800462e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e000      	b.n	8004630 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800462e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d06e      	beq.n	8004714 <pvPortMalloc+0x178>
 8004636:	4b45      	ldr	r3, [pc, #276]	; (800474c <pvPortMalloc+0x1b0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d869      	bhi.n	8004714 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <pvPortMalloc+0x1b4>)
 8004642:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <pvPortMalloc+0x1b4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800464a:	e004      	b.n	8004656 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d903      	bls.n	8004668 <pvPortMalloc+0xcc>
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f1      	bne.n	800464c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <pvPortMalloc+0x1a8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	d050      	beq.n	8004714 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2208      	movs	r2, #8
 8004678:	4413      	add	r3, r2
 800467a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	1ad2      	subs	r2, r2, r3
 800468c:	2308      	movs	r3, #8
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	429a      	cmp	r2, r3
 8004692:	d91f      	bls.n	80046d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <pvPortMalloc+0x120>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	613b      	str	r3, [r7, #16]
    }
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046ce:	69b8      	ldr	r0, [r7, #24]
 80046d0:	f000 f908 	bl	80048e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <pvPortMalloc+0x1b0>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <pvPortMalloc+0x1b0>)
 80046e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <pvPortMalloc+0x1b0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <pvPortMalloc+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d203      	bcs.n	80046f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046ee:	4b17      	ldr	r3, [pc, #92]	; (800474c <pvPortMalloc+0x1b0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <pvPortMalloc+0x1b8>)
 80046f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <pvPortMalloc+0x1ac>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	431a      	orrs	r2, r3
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <pvPortMalloc+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	4a11      	ldr	r2, [pc, #68]	; (8004758 <pvPortMalloc+0x1bc>)
 8004712:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004714:	f7fe fc1a 	bl	8002f4c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <pvPortMalloc+0x19c>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60fb      	str	r3, [r7, #12]
    }
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <pvPortMalloc+0x19a>
    return pvReturn;
 8004738:	69fb      	ldr	r3, [r7, #28]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20012de8 	.word	0x20012de8
 8004748:	20012dfc 	.word	0x20012dfc
 800474c:	20012dec 	.word	0x20012dec
 8004750:	20012de0 	.word	0x20012de0
 8004754:	20012df0 	.word	0x20012df0
 8004758:	20012df4 	.word	0x20012df4

0800475c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d04d      	beq.n	800480a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800476e:	2308      	movs	r3, #8
 8004770:	425b      	negs	r3, r3
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4413      	add	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4b24      	ldr	r3, [pc, #144]	; (8004814 <vPortFree+0xb8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <vPortFree+0x44>
        __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60fb      	str	r3, [r7, #12]
    }
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <vPortFree+0x62>
        __asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	60bb      	str	r3, [r7, #8]
    }
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <vPortFree+0xb8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01e      	beq.n	800480a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11a      	bne.n	800480a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <vPortFree+0xb8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047e4:	f7fe fba4 	bl	8002f30 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <vPortFree+0xbc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <vPortFree+0xbc>)
 80047f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047f6:	6938      	ldr	r0, [r7, #16]
 80047f8:	f000 f874 	bl	80048e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <vPortFree+0xc0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	4a06      	ldr	r2, [pc, #24]	; (800481c <vPortFree+0xc0>)
 8004804:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004806:	f7fe fba1 	bl	8002f4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800480a:	bf00      	nop
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20012dfc 	.word	0x20012dfc
 8004818:	20012dec 	.word	0x20012dec
 800481c:	20012df8 	.word	0x20012df8

08004820 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004826:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800482a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800482c:	4b27      	ldr	r3, [pc, #156]	; (80048cc <prvHeapInit+0xac>)
 800482e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3307      	adds	r3, #7
 800483e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <prvHeapInit+0xac>)
 8004850:	4413      	add	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004858:	4a1d      	ldr	r2, [pc, #116]	; (80048d0 <prvHeapInit+0xb0>)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800485e:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <prvHeapInit+0xb0>)
 8004860:	2200      	movs	r2, #0
 8004862:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	4413      	add	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800486c:	2208      	movs	r2, #8
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <prvHeapInit+0xb4>)
 8004880:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <prvHeapInit+0xb4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <prvHeapInit+0xb4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <prvHeapInit+0xb4>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <prvHeapInit+0xb8>)
 80048ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a09      	ldr	r2, [pc, #36]	; (80048dc <prvHeapInit+0xbc>)
 80048b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <prvHeapInit+0xc0>)
 80048ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	200001e0 	.word	0x200001e0
 80048d0:	20012de0 	.word	0x20012de0
 80048d4:	20012de8 	.word	0x20012de8
 80048d8:	20012df0 	.word	0x20012df0
 80048dc:	20012dec 	.word	0x20012dec
 80048e0:	20012dfc 	.word	0x20012dfc

080048e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <prvInsertBlockIntoFreeList+0xac>)
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e002      	b.n	80048f8 <prvInsertBlockIntoFreeList+0x14>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d8f7      	bhi.n	80048f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d108      	bne.n	8004926 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d118      	bne.n	800496c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <prvInsertBlockIntoFreeList+0xb0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d00d      	beq.n	8004962 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e008      	b.n	8004974 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <prvInsertBlockIntoFreeList+0xb0>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e003      	b.n	8004974 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	d002      	beq.n	8004982 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20012de0 	.word	0x20012de0
 8004994:	20012de8 	.word	0x20012de8

08004998 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800499c:	4803      	ldr	r0, [pc, #12]	; (80049ac <_cbSendSystemDesc+0x14>)
 800499e:	f001 fac1 	bl	8005f24 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049a2:	4803      	ldr	r0, [pc, #12]	; (80049b0 <_cbSendSystemDesc+0x18>)
 80049a4:	f001 fabe 	bl	8005f24 <SEGGER_SYSVIEW_SendSysDesc>
}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	08007070 	.word	0x08007070
 80049b0:	080070ac 	.word	0x080070ac

080049b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80049c2:	4a06      	ldr	r2, [pc, #24]	; (80049dc <SEGGER_SYSVIEW_Conf+0x28>)
 80049c4:	f000 fe2c 	bl	8005620 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80049cc:	f000 fe6c 	bl	80056a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000000 	.word	0x20000000
 80049d8:	08004999 	.word	0x08004999
 80049dc:	0800714c 	.word	0x0800714c

080049e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	e033      	b.n	8004a54 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80049ec:	491e      	ldr	r1, [pc, #120]	; (8004a68 <_cbSendTaskList+0x88>)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	491a      	ldr	r1, [pc, #104]	; (8004a68 <_cbSendTaskList+0x88>)
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	4c16      	ldr	r4, [pc, #88]	; (8004a68 <_cbSendTaskList+0x88>)
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4423      	add	r3, r4
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	681c      	ldr	r4, [r3, #0]
 8004a20:	4d11      	ldr	r5, [pc, #68]	; (8004a68 <_cbSendTaskList+0x88>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	442b      	add	r3, r5
 8004a2e:	330c      	adds	r3, #12
 8004a30:	681d      	ldr	r5, [r3, #0]
 8004a32:	4e0d      	ldr	r6, [pc, #52]	; (8004a68 <_cbSendTaskList+0x88>)
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4433      	add	r3, r6
 8004a40:	3310      	adds	r3, #16
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462b      	mov	r3, r5
 8004a48:	4622      	mov	r2, r4
 8004a4a:	f000 f8b5 	bl	8004bb8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3301      	adds	r3, #1
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <_cbSendTaskList+0x8c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3c6      	bcc.n	80049ec <_cbSendTaskList+0xc>
  }
}
 8004a5e:	bf00      	nop
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a68:	20012e00 	.word	0x20012e00
 8004a6c:	20012ea0 	.word	0x20012ea0

08004a70 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a76:	f7fe fb79 	bl	800316c <xTaskGetTickCountFromISR>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	f04f 0500 	mov.w	r5, #0
 8004a96:	015d      	lsls	r5, r3, #5
 8004a98:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004a9c:	0154      	lsls	r4, r2, #5
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	1a12      	subs	r2, r2, r0
 8004aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	f04f 0500 	mov.w	r5, #0
 8004ab0:	009d      	lsls	r5, r3, #2
 8004ab2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004ab6:	0094      	lsls	r4, r2, #2
 8004ab8:	4622      	mov	r2, r4
 8004aba:	462b      	mov	r3, r5
 8004abc:	1812      	adds	r2, r2, r0
 8004abe:	eb41 0303 	adc.w	r3, r1, r3
 8004ac2:	f04f 0000 	mov.w	r0, #0
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	00d9      	lsls	r1, r3, #3
 8004acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad0:	00d0      	lsls	r0, r2, #3
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004ada:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bdb0      	pop	{r4, r5, r7, pc}

08004ae8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004af6:	2205      	movs	r2, #5
 8004af8:	492b      	ldr	r1, [pc, #172]	; (8004ba8 <SYSVIEW_AddTask+0xc0>)
 8004afa:	68b8      	ldr	r0, [r7, #8]
 8004afc:	f001 fda8 	bl	8006650 <memcmp>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04b      	beq.n	8004b9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b06:	4b29      	ldr	r3, [pc, #164]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b07      	cmp	r3, #7
 8004b0c:	d903      	bls.n	8004b16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b0e:	4828      	ldr	r0, [pc, #160]	; (8004bb0 <SYSVIEW_AddTask+0xc8>)
 8004b10:	f001 fd06 	bl	8006520 <SEGGER_SYSVIEW_Warn>
    return;
 8004b14:	e044      	b.n	8004ba0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b16:	4b25      	ldr	r3, [pc, #148]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4926      	ldr	r1, [pc, #152]	; (8004bb4 <SYSVIEW_AddTask+0xcc>)
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4921      	ldr	r1, [pc, #132]	; (8004bb4 <SYSVIEW_AddTask+0xcc>)
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b40:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	491b      	ldr	r1, [pc, #108]	; (8004bb4 <SYSVIEW_AddTask+0xcc>)
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	3308      	adds	r3, #8
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4916      	ldr	r1, [pc, #88]	; (8004bb4 <SYSVIEW_AddTask+0xcc>)
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	330c      	adds	r3, #12
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4910      	ldr	r1, [pc, #64]	; (8004bb4 <SYSVIEW_AddTask+0xcc>)
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <SYSVIEW_AddTask+0xc4>)
 8004b8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f80e 	bl	8004bb8 <SYSVIEW_SendTaskInfo>
 8004b9c:	e000      	b.n	8004ba0 <SYSVIEW_AddTask+0xb8>
    return;
 8004b9e:	bf00      	nop

}
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	080070bc 	.word	0x080070bc
 8004bac:	20012ea0 	.word	0x20012ea0
 8004bb0:	080070c4 	.word	0x080070c4
 8004bb4:	20012e00 	.word	0x20012e00

08004bb8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004bc6:	f107 0314 	add.w	r3, r7, #20
 8004bca:	2214      	movs	r2, #20
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fd5a 	bl	8006688 <memset>
  TaskInfo.TaskID     = TaskID;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 f8a1 	bl	8005d34 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004bf2:	bf00      	nop
 8004bf4:	3728      	adds	r7, #40	; 0x28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <_DoInit+0x98>)
 8004c04:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <_DoInit+0x9c>)
 8004c16:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <_DoInit+0xa0>)
 8004c1c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c24:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <_DoInit+0x9c>)
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <_DoInit+0xa4>)
 8004c42:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2210      	movs	r2, #16
 8004c48:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3307      	adds	r3, #7
 8004c60:	4a10      	ldr	r2, [pc, #64]	; (8004ca4 <_DoInit+0xa8>)
 8004c62:	6810      	ldr	r0, [r2, #0]
 8004c64:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c66:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <_DoInit+0xac>)
 8004c6e:	6810      	ldr	r0, [r2, #0]
 8004c70:	6018      	str	r0, [r3, #0]
 8004c72:	8891      	ldrh	r1, [r2, #4]
 8004c74:	7992      	ldrb	r2, [r2, #6]
 8004c76:	8099      	strh	r1, [r3, #4]
 8004c78:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c7a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c84:	f3bf 8f5f 	dmb	sy
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20013ca8 	.word	0x20013ca8
 8004c98:	08007114 	.word	0x08007114
 8004c9c:	20012ea4 	.word	0x20012ea4
 8004ca0:	200132a4 	.word	0x200132a4
 8004ca4:	08007120 	.word	0x08007120
 8004ca8:	08007124 	.word	0x08007124

08004cac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d905      	bls.n	8004cdc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	e007      	b.n	8004cec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	69b9      	ldr	r1, [r7, #24]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	1acb      	subs	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	bf28      	it	cs
 8004cfa:	4613      	movcs	r3, r2
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4293      	cmp	r3, r2
 8004d04:	bf28      	it	cs
 8004d06:	4613      	movcs	r3, r2
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	6978      	ldr	r0, [r7, #20]
 8004d1a:	f001 fca7 	bl	800666c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	4413      	add	r3, r2
 8004d24:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	4413      	add	r3, r2
 8004d2c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	4413      	add	r3, r2
 8004d3c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d101      	bne.n	8004d4c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d4c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1b2      	bne.n	8004cc2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b088      	sub	sp, #32
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d911      	bls.n	8004dae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	6938      	ldr	r0, [r7, #16]
 8004d9a:	f001 fc67 	bl	800666c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d9e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	441a      	add	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004dac:	e01f      	b.n	8004dee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	6938      	ldr	r0, [r7, #16]
 8004dc2:	f001 fc53 	bl	800666c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	4413      	add	r3, r2
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6938      	ldr	r0, [r7, #16]
 8004de0:	f001 fc44 	bl	800666c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004de4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	60da      	str	r2, [r3, #12]
}
 8004dee:	bf00      	nop
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d808      	bhi.n	8004e24 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad2      	subs	r2, r2, r3
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e004      	b.n	8004e2e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e2e:	697b      	ldr	r3, [r7, #20]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e48:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e56:	f7ff fed1 	bl	8004bfc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	3360      	adds	r3, #96	; 0x60
 8004e66:	4a37      	ldr	r2, [pc, #220]	; (8004f44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d92b      	bls.n	8004ee0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bf28      	it	cs
 8004e9a:	4613      	movcs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	4413      	add	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	6939      	ldr	r1, [r7, #16]
 8004eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eae:	f001 fbdd 	bl	800666c <memcpy>
    NumBytesRead += NumBytesRem;
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d101      	bne.n	8004ee0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004edc:	2300      	movs	r3, #0
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bf28      	it	cs
 8004ef0:	4613      	movcs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d019      	beq.n	8004f2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	4413      	add	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0a:	f001 fbaf 	bl	800666c <memcpy>
    NumBytesRead += NumBytesRem;
 8004f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3730      	adds	r7, #48	; 0x30
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20013ca8 	.word	0x20013ca8

08004f48 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d029      	beq.n	8004fc6 <SEGGER_RTT_WriteNoLock+0x7e>
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d82e      	bhi.n	8004fd4 <SEGGER_RTT_WriteNoLock+0x8c>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <SEGGER_RTT_WriteNoLock+0x38>
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d013      	beq.n	8004fa6 <SEGGER_RTT_WriteNoLock+0x5e>
 8004f7e:	e029      	b.n	8004fd4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004f80:	6978      	ldr	r0, [r7, #20]
 8004f82:	f7ff ff38 	bl	8004df6 <_GetAvailWriteSpace>
 8004f86:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d202      	bcs.n	8004f96 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004f94:	e021      	b.n	8004fda <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	f7ff fee1 	bl	8004d66 <_WriteNoCheck>
    break;
 8004fa4:	e019      	b.n	8004fda <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004fa6:	6978      	ldr	r0, [r7, #20]
 8004fa8:	f7ff ff25 	bl	8004df6 <_GetAvailWriteSpace>
 8004fac:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	bf28      	it	cs
 8004fb6:	4613      	movcs	r3, r2
 8004fb8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7ff fed1 	bl	8004d66 <_WriteNoCheck>
    break;
 8004fc4:	e009      	b.n	8004fda <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	6978      	ldr	r0, [r7, #20]
 8004fcc:	f7ff fe6e 	bl	8004cac <_WriteBlocking>
 8004fd0:	61f8      	str	r0, [r7, #28]
    break;
 8004fd2:	e002      	b.n	8004fda <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
    break;
 8004fd8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20013ca8 	.word	0x20013ca8

08004fe8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <SEGGER_RTT_Write+0x48>)
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <SEGGER_RTT_Write+0x1e>
 8005002:	f7ff fdfb 	bl	8004bfc <_DoInit>
  SEGGER_RTT_LOCK();
 8005006:	f3ef 8311 	mrs	r3, BASEPRI
 800500a:	f04f 0120 	mov.w	r1, #32
 800500e:	f381 8811 	msr	BASEPRI, r1
 8005012:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff ff95 	bl	8004f48 <SEGGER_RTT_WriteNoLock>
 800501e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005026:	697b      	ldr	r3, [r7, #20]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20013ca8 	.word	0x20013ca8

08005034 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005042:	4b3d      	ldr	r3, [pc, #244]	; (8005138 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005050:	f7ff fdd4 	bl	8004bfc <_DoInit>
  SEGGER_RTT_LOCK();
 8005054:	f3ef 8311 	mrs	r3, BASEPRI
 8005058:	f04f 0120 	mov.w	r1, #32
 800505c:	f381 8811 	msr	BASEPRI, r1
 8005060:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005062:	4b35      	ldr	r3, [pc, #212]	; (8005138 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005064:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	3304      	adds	r3, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	429a      	cmp	r2, r3
 8005090:	dbeb      	blt.n	800506a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005092:	e000      	b.n	8005096 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005094:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	429a      	cmp	r2, r3
 800509e:	da3f      	bge.n	8005120 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050a0:	6939      	ldr	r1, [r7, #16]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	3304      	adds	r3, #4
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80050ca:	6939      	ldr	r1, [r7, #16]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	440b      	add	r3, r1
 80050d8:	3320      	adds	r3, #32
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80050de:	6939      	ldr	r1, [r7, #16]
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	4613      	mov	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	3328      	adds	r3, #40	; 0x28
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80050f2:	6939      	ldr	r1, [r7, #16]
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3324      	adds	r3, #36	; 0x24
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005106:	6939      	ldr	r1, [r7, #16]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	440b      	add	r3, r1
 8005114:	332c      	adds	r3, #44	; 0x2c
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800511a:	f3bf 8f5f 	dmb	sy
 800511e:	e002      	b.n	8005126 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005124:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800512c:	69fb      	ldr	r3, [r7, #28]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20013ca8 	.word	0x20013ca8

0800513c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800514a:	4b21      	ldr	r3, [pc, #132]	; (80051d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005158:	f7ff fd50 	bl	8004bfc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800515c:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800515e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d82c      	bhi.n	80051c0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005166:	f3ef 8311 	mrs	r3, BASEPRI
 800516a:	f04f 0120 	mov.w	r1, #32
 800516e:	f381 8811 	msr	BASEPRI, r1
 8005172:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	3360      	adds	r3, #96	; 0x60
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00e      	beq.n	80051aa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2200      	movs	r2, #0
 80051a8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ae:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051b0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	e002      	b.n	80051c6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80051c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20013ca8 	.word	0x20013ca8

080051d4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00f      	beq.n	800520a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80051ea:	e002      	b.n	80051f2 <_EncodeStr+0x1e>
      Len++;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	3301      	adds	r3, #1
 80051f0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f6      	bne.n	80051ec <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d901      	bls.n	800520a <_EncodeStr+0x36>
      Len = Limit;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2bfe      	cmp	r3, #254	; 0xfe
 800520e:	d806      	bhi.n	800521e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	60fa      	str	r2, [r7, #12]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e011      	b.n	8005242 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	22ff      	movs	r2, #255	; 0xff
 8005226:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	60fa      	str	r2, [r7, #12]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	0a19      	lsrs	r1, r3, #8
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	60fa      	str	r2, [r7, #12]
 800523e:	b2ca      	uxtb	r2, r1
 8005240:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005246:	e00a      	b.n	800525e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	1c53      	adds	r3, r2, #1
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	60f9      	str	r1, [r7, #12]
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	701a      	strb	r2, [r3, #0]
    n++;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3301      	adds	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	429a      	cmp	r2, r3
 8005264:	d3f0      	bcc.n	8005248 <_EncodeStr+0x74>
  }
  return pPayload;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005292:	4b36      	ldr	r3, [pc, #216]	; (800536c <_HandleIncomingPacket+0xe0>)
 8005294:	7e1b      	ldrb	r3, [r3, #24]
 8005296:	4618      	mov	r0, r3
 8005298:	1cfb      	adds	r3, r7, #3
 800529a:	2201      	movs	r2, #1
 800529c:	4619      	mov	r1, r3
 800529e:	f7ff fdcd 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
 80052a2:	4603      	mov	r3, r0
 80052a4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd54      	ble.n	8005356 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	2b80      	cmp	r3, #128	; 0x80
 80052b0:	d032      	beq.n	8005318 <_HandleIncomingPacket+0x8c>
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	dc42      	bgt.n	800533c <_HandleIncomingPacket+0xb0>
 80052b6:	2b07      	cmp	r3, #7
 80052b8:	dc16      	bgt.n	80052e8 <_HandleIncomingPacket+0x5c>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dd3e      	ble.n	800533c <_HandleIncomingPacket+0xb0>
 80052be:	3b01      	subs	r3, #1
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d83b      	bhi.n	800533c <_HandleIncomingPacket+0xb0>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <_HandleIncomingPacket+0x40>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	080052ef 	.word	0x080052ef
 80052d0:	080052f5 	.word	0x080052f5
 80052d4:	080052fb 	.word	0x080052fb
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005307 	.word	0x08005307
 80052e0:	0800530d 	.word	0x0800530d
 80052e4:	08005313 	.word	0x08005313
 80052e8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ea:	d036      	beq.n	800535a <_HandleIncomingPacket+0xce>
 80052ec:	e026      	b.n	800533c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80052ee:	f000 fba7 	bl	8005a40 <SEGGER_SYSVIEW_Start>
      break;
 80052f2:	e037      	b.n	8005364 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80052f4:	f000 fc5e 	bl	8005bb4 <SEGGER_SYSVIEW_Stop>
      break;
 80052f8:	e034      	b.n	8005364 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80052fa:	f000 fe37 	bl	8005f6c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80052fe:	e031      	b.n	8005364 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005300:	f000 fdfc 	bl	8005efc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005304:	e02e      	b.n	8005364 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005306:	f000 fc7b 	bl	8005c00 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800530a:	e02b      	b.n	8005364 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800530c:	f001 f8ca 	bl	80064a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005310:	e028      	b.n	8005364 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005312:	f001 f8a9 	bl	8006468 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005316:	e025      	b.n	8005364 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <_HandleIncomingPacket+0xe0>)
 800531a:	7e1b      	ldrb	r3, [r3, #24]
 800531c:	4618      	mov	r0, r3
 800531e:	1cfb      	adds	r3, r7, #3
 8005320:	2201      	movs	r2, #1
 8005322:	4619      	mov	r1, r3
 8005324:	f7ff fd8a 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
 8005328:	4603      	mov	r3, r0
 800532a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	dd15      	ble.n	800535e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	4618      	mov	r0, r3
 8005336:	f001 f817 	bl	8006368 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800533a:	e010      	b.n	800535e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	b25b      	sxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	da0e      	bge.n	8005362 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <_HandleIncomingPacket+0xe0>)
 8005346:	7e1b      	ldrb	r3, [r3, #24]
 8005348:	4618      	mov	r0, r3
 800534a:	1cfb      	adds	r3, r7, #3
 800534c:	2201      	movs	r2, #1
 800534e:	4619      	mov	r1, r3
 8005350:	f7ff fd74 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005354:	e005      	b.n	8005362 <_HandleIncomingPacket+0xd6>
    }
  }
 8005356:	bf00      	nop
 8005358:	e004      	b.n	8005364 <_HandleIncomingPacket+0xd8>
      break;
 800535a:	bf00      	nop
 800535c:	e002      	b.n	8005364 <_HandleIncomingPacket+0xd8>
      break;
 800535e:	bf00      	nop
 8005360:	e000      	b.n	8005364 <_HandleIncomingPacket+0xd8>
      break;
 8005362:	bf00      	nop
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20013abc 	.word	0x20013abc

08005370 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b08c      	sub	sp, #48	; 0x30
 8005374:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005376:	2301      	movs	r3, #1
 8005378:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	3301      	adds	r3, #1
 800537e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005384:	4b31      	ldr	r3, [pc, #196]	; (800544c <_TrySendOverflowPacket+0xdc>)
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
 800538a:	e00b      	b.n	80053a4 <_TrySendOverflowPacket+0x34>
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	09db      	lsrs	r3, r3, #7
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	2b7f      	cmp	r3, #127	; 0x7f
 80053a8:	d8f0      	bhi.n	800538c <_TrySendOverflowPacket+0x1c>
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80053ba:	4b25      	ldr	r3, [pc, #148]	; (8005450 <_TrySendOverflowPacket+0xe0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <_TrySendOverflowPacket+0xdc>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	623b      	str	r3, [r7, #32]
 80053d2:	e00b      	b.n	80053ec <_TrySendOverflowPacket+0x7c>
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	1c59      	adds	r1, r3, #1
 80053dc:	6279      	str	r1, [r7, #36]	; 0x24
 80053de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	09db      	lsrs	r3, r3, #7
 80053ea:	623b      	str	r3, [r7, #32]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b7f      	cmp	r3, #127	; 0x7f
 80053f0:	d8f0      	bhi.n	80053d4 <_TrySendOverflowPacket+0x64>
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	627a      	str	r2, [r7, #36]	; 0x24
 80053f8:	6a3a      	ldr	r2, [r7, #32]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <_TrySendOverflowPacket+0xdc>)
 8005404:	785b      	ldrb	r3, [r3, #1]
 8005406:	4618      	mov	r0, r3
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	461a      	mov	r2, r3
 8005410:	1d3b      	adds	r3, r7, #4
 8005412:	4619      	mov	r1, r3
 8005414:	f7fa fee4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005418:	4603      	mov	r3, r0
 800541a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <_TrySendOverflowPacket+0xdc>)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <_TrySendOverflowPacket+0xdc>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	3b01      	subs	r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <_TrySendOverflowPacket+0xdc>)
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	e004      	b.n	8005440 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <_TrySendOverflowPacket+0xdc>)
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	3301      	adds	r3, #1
 800543c:	4a03      	ldr	r2, [pc, #12]	; (800544c <_TrySendOverflowPacket+0xdc>)
 800543e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005440:	693b      	ldr	r3, [r7, #16]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3730      	adds	r7, #48	; 0x30
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20013abc 	.word	0x20013abc
 8005450:	e0001004 	.word	0xe0001004

08005454 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	; 0x28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005460:	4b6c      	ldr	r3, [pc, #432]	; (8005614 <_SendPacket+0x1c0>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d010      	beq.n	800548a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005468:	4b6a      	ldr	r3, [pc, #424]	; (8005614 <_SendPacket+0x1c0>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80a3 	beq.w	80055b8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005472:	4b68      	ldr	r3, [pc, #416]	; (8005614 <_SendPacket+0x1c0>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d109      	bne.n	800548e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800547a:	f7ff ff79 	bl	8005370 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800547e:	4b65      	ldr	r3, [pc, #404]	; (8005614 <_SendPacket+0x1c0>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b01      	cmp	r3, #1
 8005484:	f040 809a 	bne.w	80055bc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005488:	e001      	b.n	800548e <_SendPacket+0x3a>
    goto Send;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <_SendPacket+0x3c>
Send:
 800548e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b1f      	cmp	r3, #31
 8005494:	d809      	bhi.n	80054aa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005496:	4b5f      	ldr	r3, [pc, #380]	; (8005614 <_SendPacket+0x1c0>)
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 808b 	bne.w	80055c0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b17      	cmp	r3, #23
 80054ae:	d807      	bhi.n	80054c0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e03d      	b.n	800553c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b7f      	cmp	r3, #127	; 0x7f
 80054cc:	d912      	bls.n	80054f4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	09da      	lsrs	r2, r3, #7
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	3a01      	subs	r2, #1
 80054e6:	60fa      	str	r2, [r7, #12]
 80054e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e006      	b.n	8005502 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b7f      	cmp	r3, #127	; 0x7f
 8005506:	d912      	bls.n	800552e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	09da      	lsrs	r2, r3, #7
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3b01      	subs	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	3a01      	subs	r2, #1
 8005520:	60fa      	str	r2, [r7, #12]
 8005522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e006      	b.n	800553c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3b01      	subs	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <_SendPacket+0x1c4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005542:	4b34      	ldr	r3, [pc, #208]	; (8005614 <_SendPacket+0x1c0>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	e00b      	b.n	800556e <_SendPacket+0x11a>
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1c59      	adds	r1, r3, #1
 800555e:	6279      	str	r1, [r7, #36]	; 0x24
 8005560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	09db      	lsrs	r3, r3, #7
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	2b7f      	cmp	r3, #127	; 0x7f
 8005572:	d8f0      	bhi.n	8005556 <_SendPacket+0x102>
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	627a      	str	r2, [r7, #36]	; 0x24
 800557a:	6a3a      	ldr	r2, [r7, #32]
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005584:	4b23      	ldr	r3, [pc, #140]	; (8005614 <_SendPacket+0x1c0>)
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	4618      	mov	r0, r3
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	461a      	mov	r2, r3
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	f7fa fe24 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005598:	4603      	mov	r3, r0
 800559a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055a2:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <_SendPacket+0x1c0>)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	60d3      	str	r3, [r2, #12]
 80055a8:	e00b      	b.n	80055c2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80055aa:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <_SendPacket+0x1c0>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	4b18      	ldr	r3, [pc, #96]	; (8005614 <_SendPacket+0x1c0>)
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e004      	b.n	80055c2 <_SendPacket+0x16e>
    goto SendDone;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <_SendPacket+0x16e>
      goto SendDone;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <_SendPacket+0x16e>
      goto SendDone;
 80055c0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <_SendPacket+0x1c0>)
 80055c4:	7e1b      	ldrb	r3, [r3, #24]
 80055c6:	4619      	mov	r1, r3
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <_SendPacket+0x1c8>)
 80055ca:	460b      	mov	r3, r1
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	440b      	add	r3, r1
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4413      	add	r3, r2
 80055d4:	336c      	adds	r3, #108	; 0x6c
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <_SendPacket+0x1c0>)
 80055da:	7e1b      	ldrb	r3, [r3, #24]
 80055dc:	4618      	mov	r0, r3
 80055de:	490f      	ldr	r1, [pc, #60]	; (800561c <_SendPacket+0x1c8>)
 80055e0:	4603      	mov	r3, r0
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4403      	add	r3, r0
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	440b      	add	r3, r1
 80055ea:	3370      	adds	r3, #112	; 0x70
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d00b      	beq.n	800560a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <_SendPacket+0x1c0>)
 80055f4:	789b      	ldrb	r3, [r3, #2]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d107      	bne.n	800560a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <_SendPacket+0x1c0>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005600:	f7ff fe44 	bl	800528c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <_SendPacket+0x1c0>)
 8005606:	2200      	movs	r2, #0
 8005608:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800560a:	bf00      	nop
 800560c:	3728      	adds	r7, #40	; 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20013abc 	.word	0x20013abc
 8005618:	e0001004 	.word	0xe0001004
 800561c:	20013ca8 	.word	0x20013ca8

08005620 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af02      	add	r7, sp, #8
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800562e:	2300      	movs	r3, #0
 8005630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005634:	4917      	ldr	r1, [pc, #92]	; (8005694 <SEGGER_SYSVIEW_Init+0x74>)
 8005636:	4818      	ldr	r0, [pc, #96]	; (8005698 <SEGGER_SYSVIEW_Init+0x78>)
 8005638:	f7ff fcfc 	bl	8005034 <SEGGER_RTT_AllocUpBuffer>
 800563c:	4603      	mov	r3, r0
 800563e:	b2da      	uxtb	r2, r3
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 8005642:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005644:	4b15      	ldr	r3, [pc, #84]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 8005646:	785a      	ldrb	r2, [r3, #1]
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 800564a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800564c:	4b13      	ldr	r3, [pc, #76]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 800564e:	7e1b      	ldrb	r3, [r3, #24]
 8005650:	4618      	mov	r0, r3
 8005652:	2300      	movs	r3, #0
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	2308      	movs	r3, #8
 8005658:	4a11      	ldr	r2, [pc, #68]	; (80056a0 <SEGGER_SYSVIEW_Init+0x80>)
 800565a:	490f      	ldr	r1, [pc, #60]	; (8005698 <SEGGER_SYSVIEW_Init+0x78>)
 800565c:	f7ff fd6e 	bl	800513c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005666:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <SEGGER_SYSVIEW_Init+0x84>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a0c      	ldr	r2, [pc, #48]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 800566c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800566e:	4a0b      	ldr	r2, [pc, #44]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005674:	4a09      	ldr	r2, [pc, #36]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800567a:	4a08      	ldr	r2, [pc, #32]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005680:	4a06      	ldr	r2, [pc, #24]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <SEGGER_SYSVIEW_Init+0x7c>)
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	200132b4 	.word	0x200132b4
 8005698:	0800712c 	.word	0x0800712c
 800569c:	20013abc 	.word	0x20013abc
 80056a0:	20013ab4 	.word	0x20013ab4
 80056a4:	e0001004 	.word	0xe0001004

080056a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80056b0:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6113      	str	r3, [r2, #16]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20013abc 	.word	0x20013abc

080056c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056d0:	f3ef 8311 	mrs	r3, BASEPRI
 80056d4:	f04f 0120 	mov.w	r1, #32
 80056d8:	f381 8811 	msr	BASEPRI, r1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	4808      	ldr	r0, [pc, #32]	; (8005700 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80056e0:	f7ff fdc8 	bl	8005274 <_PreparePacket>
 80056e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68b8      	ldr	r0, [r7, #8]
 80056ec:	f7ff feb2 	bl	8005454 <_SendPacket>
  RECORD_END();
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f383 8811 	msr	BASEPRI, r3
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20013aec 	.word	0x20013aec

08005704 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800570e:	f3ef 8311 	mrs	r3, BASEPRI
 8005712:	f04f 0120 	mov.w	r1, #32
 8005716:	f381 8811 	msr	BASEPRI, r1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	4816      	ldr	r0, [pc, #88]	; (8005778 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800571e:	f7ff fda9 	bl	8005274 <_PreparePacket>
 8005722:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e00b      	b.n	800574a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	b2da      	uxtb	r2, r3
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	1c59      	adds	r1, r3, #1
 800573a:	61f9      	str	r1, [r7, #28]
 800573c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	09db      	lsrs	r3, r3, #7
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b7f      	cmp	r3, #127	; 0x7f
 800574e:	d8f0      	bhi.n	8005732 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	61fa      	str	r2, [r7, #28]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	6938      	ldr	r0, [r7, #16]
 8005766:	f7ff fe75 	bl	8005454 <_SendPacket>
  RECORD_END();
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f383 8811 	msr	BASEPRI, r3
}
 8005770:	bf00      	nop
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20013aec 	.word	0x20013aec

0800577c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	; 0x30
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005788:	f3ef 8311 	mrs	r3, BASEPRI
 800578c:	f04f 0120 	mov.w	r1, #32
 8005790:	f381 8811 	msr	BASEPRI, r1
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	4825      	ldr	r0, [pc, #148]	; (800582c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005798:	f7ff fd6c 	bl	8005274 <_PreparePacket>
 800579c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057aa:	e00b      	b.n	80057c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	1c59      	adds	r1, r3, #1
 80057b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	09db      	lsrs	r3, r3, #7
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2b7f      	cmp	r3, #127	; 0x7f
 80057c8:	d8f0      	bhi.n	80057ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	e00b      	b.n	80057fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	6279      	str	r1, [r7, #36]	; 0x24
 80057ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	09db      	lsrs	r3, r3, #7
 80057fa:	623b      	str	r3, [r7, #32]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005800:	d8f0      	bhi.n	80057e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	627a      	str	r2, [r7, #36]	; 0x24
 8005808:	6a3a      	ldr	r2, [r7, #32]
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	69b8      	ldr	r0, [r7, #24]
 8005818:	f7ff fe1c 	bl	8005454 <_SendPacket>
  RECORD_END();
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f383 8811 	msr	BASEPRI, r3
}
 8005822:	bf00      	nop
 8005824:	3730      	adds	r7, #48	; 0x30
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20013aec 	.word	0x20013aec

08005830 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	; 0x38
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800583e:	f3ef 8311 	mrs	r3, BASEPRI
 8005842:	f04f 0120 	mov.w	r1, #32
 8005846:	f381 8811 	msr	BASEPRI, r1
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	4832      	ldr	r0, [pc, #200]	; (8005918 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800584e:	f7ff fd11 	bl	8005274 <_PreparePacket>
 8005852:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
 8005860:	e00b      	b.n	800587a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	b2da      	uxtb	r2, r3
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	6379      	str	r1, [r7, #52]	; 0x34
 800586c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	09db      	lsrs	r3, r3, #7
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	2b7f      	cmp	r3, #127	; 0x7f
 800587e:	d8f0      	bhi.n	8005862 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	637a      	str	r2, [r7, #52]	; 0x34
 8005886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
 8005898:	e00b      	b.n	80058b2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	b2da      	uxtb	r2, r3
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	1c59      	adds	r1, r3, #1
 80058a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	09db      	lsrs	r3, r3, #7
 80058b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	2b7f      	cmp	r3, #127	; 0x7f
 80058b6:	d8f0      	bhi.n	800589a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	e00b      	b.n	80058ea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	6279      	str	r1, [r7, #36]	; 0x24
 80058dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	09db      	lsrs	r3, r3, #7
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	2b7f      	cmp	r3, #127	; 0x7f
 80058ee:	d8f0      	bhi.n	80058d2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	627a      	str	r2, [r7, #36]	; 0x24
 80058f6:	6a3a      	ldr	r2, [r7, #32]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	69b8      	ldr	r0, [r7, #24]
 8005906:	f7ff fda5 	bl	8005454 <_SendPacket>
  RECORD_END();
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f383 8811 	msr	BASEPRI, r3
}
 8005910:	bf00      	nop
 8005912:	3738      	adds	r7, #56	; 0x38
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20013aec 	.word	0x20013aec

0800591c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b090      	sub	sp, #64	; 0x40
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800592a:	f3ef 8311 	mrs	r3, BASEPRI
 800592e:	f04f 0120 	mov.w	r1, #32
 8005932:	f381 8811 	msr	BASEPRI, r1
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	4840      	ldr	r0, [pc, #256]	; (8005a3c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800593a:	f7ff fc9b 	bl	8005274 <_PreparePacket>
 800593e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	63bb      	str	r3, [r7, #56]	; 0x38
 800594c:	e00b      	b.n	8005966 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	b2da      	uxtb	r2, r3
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	1c59      	adds	r1, r3, #1
 8005956:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005958:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	09db      	lsrs	r3, r3, #7
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	2b7f      	cmp	r3, #127	; 0x7f
 800596a:	d8f0      	bhi.n	800594e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
 8005984:	e00b      	b.n	800599e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	b2da      	uxtb	r2, r3
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	1c59      	adds	r1, r3, #1
 800598e:	6379      	str	r1, [r7, #52]	; 0x34
 8005990:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	09db      	lsrs	r3, r3, #7
 800599c:	633b      	str	r3, [r7, #48]	; 0x30
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	2b7f      	cmp	r3, #127	; 0x7f
 80059a2:	d8f0      	bhi.n	8005986 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	637a      	str	r2, [r7, #52]	; 0x34
 80059aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80059bc:	e00b      	b.n	80059d6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	1c59      	adds	r1, r3, #1
 80059c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	09db      	lsrs	r3, r3, #7
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	2b7f      	cmp	r3, #127	; 0x7f
 80059da:	d8f0      	bhi.n	80059be <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	e00b      	b.n	8005a0e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1c59      	adds	r1, r3, #1
 80059fe:	6279      	str	r1, [r7, #36]	; 0x24
 8005a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	09db      	lsrs	r3, r3, #7
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	2b7f      	cmp	r3, #127	; 0x7f
 8005a12:	d8f0      	bhi.n	80059f6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	627a      	str	r2, [r7, #36]	; 0x24
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	6979      	ldr	r1, [r7, #20]
 8005a28:	69b8      	ldr	r0, [r7, #24]
 8005a2a:	f7ff fd13 	bl	8005454 <_SendPacket>
  RECORD_END();
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f383 8811 	msr	BASEPRI, r3
}
 8005a34:	bf00      	nop
 8005a36:	3740      	adds	r7, #64	; 0x40
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20013aec 	.word	0x20013aec

08005a40 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	; 0x30
 8005a44:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005a46:	4b58      	ldr	r3, [pc, #352]	; (8005ba8 <SEGGER_SYSVIEW_Start+0x168>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a50:	f04f 0120 	mov.w	r1, #32
 8005a54:	f381 8811 	msr	BASEPRI, r1
 8005a58:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005a5a:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <SEGGER_SYSVIEW_Start+0x168>)
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	220a      	movs	r2, #10
 8005a60:	4952      	ldr	r1, [pc, #328]	; (8005bac <SEGGER_SYSVIEW_Start+0x16c>)
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fa fbbc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005a6e:	200a      	movs	r0, #10
 8005a70:	f7ff fe2a 	bl	80056c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a74:	f3ef 8311 	mrs	r3, BASEPRI
 8005a78:	f04f 0120 	mov.w	r1, #32
 8005a7c:	f381 8811 	msr	BASEPRI, r1
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	484b      	ldr	r0, [pc, #300]	; (8005bb0 <SEGGER_SYSVIEW_Start+0x170>)
 8005a84:	f7ff fbf6 	bl	8005274 <_PreparePacket>
 8005a88:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a92:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <SEGGER_SYSVIEW_Start+0x168>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a98:	e00b      	b.n	8005ab2 <SEGGER_SYSVIEW_Start+0x72>
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	09db      	lsrs	r3, r3, #7
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab6:	d8f0      	bhi.n	8005a9a <SEGGER_SYSVIEW_Start+0x5a>
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <SEGGER_SYSVIEW_Start+0x168>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	e00b      	b.n	8005aec <SEGGER_SYSVIEW_Start+0xac>
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	1c59      	adds	r1, r3, #1
 8005adc:	6279      	str	r1, [r7, #36]	; 0x24
 8005ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	09db      	lsrs	r3, r3, #7
 8005aea:	623b      	str	r3, [r7, #32]
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	2b7f      	cmp	r3, #127	; 0x7f
 8005af0:	d8f0      	bhi.n	8005ad4 <SEGGER_SYSVIEW_Start+0x94>
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	627a      	str	r2, [r7, #36]	; 0x24
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <SEGGER_SYSVIEW_Start+0x168>)
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e00b      	b.n	8005b26 <SEGGER_SYSVIEW_Start+0xe6>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	61f9      	str	r1, [r7, #28]
 8005b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	09db      	lsrs	r3, r3, #7
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2a:	d8f0      	bhi.n	8005b0e <SEGGER_SYSVIEW_Start+0xce>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	61fa      	str	r2, [r7, #28]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	e00b      	b.n	8005b5e <SEGGER_SYSVIEW_Start+0x11e>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	1c59      	adds	r1, r3, #1
 8005b4e:	6179      	str	r1, [r7, #20]
 8005b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	09db      	lsrs	r3, r3, #7
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b7f      	cmp	r3, #127	; 0x7f
 8005b62:	d8f0      	bhi.n	8005b46 <SEGGER_SYSVIEW_Start+0x106>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	617a      	str	r2, [r7, #20]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b74:	2218      	movs	r2, #24
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fc6b 	bl	8005454 <_SendPacket>
      RECORD_END();
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b84:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <SEGGER_SYSVIEW_Start+0x168>)
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <SEGGER_SYSVIEW_Start+0x168>)
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005b92:	f000 f9eb 	bl	8005f6c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005b96:	f000 f9b1 	bl	8005efc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005b9a:	f000 fc83 	bl	80064a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005b9e:	bf00      	nop
 8005ba0:	3730      	adds	r7, #48	; 0x30
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20013abc 	.word	0x20013abc
 8005bac:	08007154 	.word	0x08007154
 8005bb0:	20013aec 	.word	0x20013aec

08005bb4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005bba:	f3ef 8311 	mrs	r3, BASEPRI
 8005bbe:	f04f 0120 	mov.w	r1, #32
 8005bc2:	f381 8811 	msr	BASEPRI, r1
 8005bc6:	607b      	str	r3, [r7, #4]
 8005bc8:	480b      	ldr	r0, [pc, #44]	; (8005bf8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005bca:	f7ff fb53 	bl	8005274 <_PreparePacket>
 8005bce:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <SEGGER_SYSVIEW_Stop+0x48>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005bd8:	220b      	movs	r2, #11
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6838      	ldr	r0, [r7, #0]
 8005bde:	f7ff fc39 	bl	8005454 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <SEGGER_SYSVIEW_Stop+0x48>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f383 8811 	msr	BASEPRI, r3
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20013aec 	.word	0x20013aec
 8005bfc:	20013abc 	.word	0x20013abc

08005c00 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08c      	sub	sp, #48	; 0x30
 8005c04:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c06:	f3ef 8311 	mrs	r3, BASEPRI
 8005c0a:	f04f 0120 	mov.w	r1, #32
 8005c0e:	f381 8811 	msr	BASEPRI, r1
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	4845      	ldr	r0, [pc, #276]	; (8005d2c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c16:	f7ff fb2d 	bl	8005274 <_PreparePacket>
 8005c1a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c24:	4b42      	ldr	r3, [pc, #264]	; (8005d30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2a:	e00b      	b.n	8005c44 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	1c59      	adds	r1, r3, #1
 8005c34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	09db      	lsrs	r3, r3, #7
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	2b7f      	cmp	r3, #127	; 0x7f
 8005c48:	d8f0      	bhi.n	8005c2c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5e:	4b34      	ldr	r3, [pc, #208]	; (8005d30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	e00b      	b.n	8005c7e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	09db      	lsrs	r3, r3, #7
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2b7f      	cmp	r3, #127	; 0x7f
 8005c82:	d8f0      	bhi.n	8005c66 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	627a      	str	r2, [r7, #36]	; 0x24
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	4b25      	ldr	r3, [pc, #148]	; (8005d30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e00b      	b.n	8005cb8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	61f9      	str	r1, [r7, #28]
 8005caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	09db      	lsrs	r3, r3, #7
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b7f      	cmp	r3, #127	; 0x7f
 8005cbc:	d8f0      	bhi.n	8005ca0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	61fa      	str	r2, [r7, #28]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	e00b      	b.n	8005cf0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	1c59      	adds	r1, r3, #1
 8005ce0:	6179      	str	r1, [r7, #20]
 8005ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	09db      	lsrs	r3, r3, #7
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf4:	d8f0      	bhi.n	8005cd8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	617a      	str	r2, [r7, #20]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d06:	2218      	movs	r2, #24
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	68b8      	ldr	r0, [r7, #8]
 8005d0c:	f7ff fba2 	bl	8005454 <_SendPacket>
  RECORD_END();
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	4798      	blx	r3
  }
}
 8005d24:	bf00      	nop
 8005d26:	3730      	adds	r7, #48	; 0x30
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20013aec 	.word	0x20013aec
 8005d30:	20013abc 	.word	0x20013abc

08005d34 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b092      	sub	sp, #72	; 0x48
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d40:	f04f 0120 	mov.w	r1, #32
 8005d44:	f381 8811 	msr	BASEPRI, r1
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	486a      	ldr	r0, [pc, #424]	; (8005ef4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005d4c:	f7ff fa92 	bl	8005274 <_PreparePacket>
 8005d50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4b66      	ldr	r3, [pc, #408]	; (8005ef8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	643b      	str	r3, [r7, #64]	; 0x40
 8005d66:	e00b      	b.n	8005d80 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	6479      	str	r1, [r7, #68]	; 0x44
 8005d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7c:	09db      	lsrs	r3, r3, #7
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d82:	2b7f      	cmp	r3, #127	; 0x7f
 8005d84:	d8f0      	bhi.n	8005d68 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da0:	e00b      	b.n	8005dba <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da8:	1c59      	adds	r1, r3, #1
 8005daa:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	09db      	lsrs	r3, r3, #7
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dbe:	d8f0      	bhi.n	8005da2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff f9fb 	bl	80051d4 <_EncodeStr>
 8005dde:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005de0:	2209      	movs	r2, #9
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	6938      	ldr	r0, [r7, #16]
 8005de6:	f7ff fb35 	bl	8005454 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b40      	ldr	r3, [pc, #256]	; (8005ef8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dfe:	e00b      	b.n	8005e18 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e06:	1c59      	adds	r1, r3, #1
 8005e08:	6379      	str	r1, [r7, #52]	; 0x34
 8005e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	09db      	lsrs	r3, r3, #7
 8005e16:	633b      	str	r3, [r7, #48]	; 0x30
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1c:	d8f0      	bhi.n	8005e00 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	637a      	str	r2, [r7, #52]	; 0x34
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e38:	e00b      	b.n	8005e52 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	2b7f      	cmp	r3, #127	; 0x7f
 8005e56:	d8f0      	bhi.n	8005e3a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	623b      	str	r3, [r7, #32]
 8005e72:	e00b      	b.n	8005e8c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	1c59      	adds	r1, r3, #1
 8005e7c:	6279      	str	r1, [r7, #36]	; 0x24
 8005e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	623b      	str	r3, [r7, #32]
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e90:	d8f0      	bhi.n	8005e74 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	627a      	str	r2, [r7, #36]	; 0x24
 8005e98:	6a3a      	ldr	r2, [r7, #32]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	e00b      	b.n	8005ec4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	61f9      	str	r1, [r7, #28]
 8005eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	09db      	lsrs	r3, r3, #7
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec8:	d8f0      	bhi.n	8005eac <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	61fa      	str	r2, [r7, #28]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005eda:	2215      	movs	r2, #21
 8005edc:	68f9      	ldr	r1, [r7, #12]
 8005ede:	6938      	ldr	r0, [r7, #16]
 8005ee0:	f7ff fab8 	bl	8005454 <_SendPacket>
  RECORD_END();
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f383 8811 	msr	BASEPRI, r3
}
 8005eea:	bf00      	nop
 8005eec:	3748      	adds	r7, #72	; 0x48
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20013aec 	.word	0x20013aec
 8005ef8:	20013abc 	.word	0x20013abc

08005efc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f00:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4798      	blx	r3
  }
}
 8005f1a:	bf00      	nop
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20013abc 	.word	0x20013abc

08005f24 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f30:	f04f 0120 	mov.w	r1, #32
 8005f34:	f381 8811 	msr	BASEPRI, r1
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	480b      	ldr	r0, [pc, #44]	; (8005f68 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005f3c:	f7ff f99a 	bl	8005274 <_PreparePacket>
 8005f40:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	6938      	ldr	r0, [r7, #16]
 8005f48:	f7ff f944 	bl	80051d4 <_EncodeStr>
 8005f4c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005f4e:	220e      	movs	r2, #14
 8005f50:	68f9      	ldr	r1, [r7, #12]
 8005f52:	6938      	ldr	r0, [r7, #16]
 8005f54:	f7ff fa7e 	bl	8005454 <_SendPacket>
  RECORD_END();
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20013aec 	.word	0x20013aec

08005f6c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01a      	beq.n	8005fb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005f7a:	4b13      	ldr	r3, [pc, #76]	; (8005fc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d015      	beq.n	8005fb0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005f84:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4798      	blx	r3
 8005f8c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f90:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005f92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	000a      	movs	r2, r1
 8005fa0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	200d      	movs	r0, #13
 8005faa:	f7ff fbe7 	bl	800577c <SEGGER_SYSVIEW_RecordU32x2>
 8005fae:	e006      	b.n	8005fbe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	200c      	movs	r0, #12
 8005fb8:	f7ff fba4 	bl	8005704 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd90      	pop	{r4, r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20013abc 	.word	0x20013abc
 8005fcc:	e0001004 	.word	0xe0001004

08005fd0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fda:	f04f 0120 	mov.w	r1, #32
 8005fde:	f381 8811 	msr	BASEPRI, r1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	4819      	ldr	r0, [pc, #100]	; (800604c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005fe6:	f7ff f945 	bl	8005274 <_PreparePacket>
 8005fea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005ff0:	4b17      	ldr	r3, [pc, #92]	; (8006050 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e00b      	b.n	800601c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	b2da      	uxtb	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	6179      	str	r1, [r7, #20]
 800600e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	09db      	lsrs	r3, r3, #7
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b7f      	cmp	r3, #127	; 0x7f
 8006020:	d8f0      	bhi.n	8006004 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	617a      	str	r2, [r7, #20]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006032:	2202      	movs	r2, #2
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	68b8      	ldr	r0, [r7, #8]
 8006038:	f7ff fa0c 	bl	8005454 <_SendPacket>
  RECORD_END();
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f383 8811 	msr	BASEPRI, r3
}
 8006042:	bf00      	nop
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20013aec 	.word	0x20013aec
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800605a:	f3ef 8311 	mrs	r3, BASEPRI
 800605e:	f04f 0120 	mov.w	r1, #32
 8006062:	f381 8811 	msr	BASEPRI, r1
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	4807      	ldr	r0, [pc, #28]	; (8006088 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800606a:	f7ff f903 	bl	8005274 <_PreparePacket>
 800606e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006070:	2203      	movs	r2, #3
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6838      	ldr	r0, [r7, #0]
 8006076:	f7ff f9ed 	bl	8005454 <_SendPacket>
  RECORD_END();
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f383 8811 	msr	BASEPRI, r3
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20013aec 	.word	0x20013aec

0800608c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006092:	f3ef 8311 	mrs	r3, BASEPRI
 8006096:	f04f 0120 	mov.w	r1, #32
 800609a:	f381 8811 	msr	BASEPRI, r1
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	4807      	ldr	r0, [pc, #28]	; (80060c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80060a2:	f7ff f8e7 	bl	8005274 <_PreparePacket>
 80060a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80060a8:	2212      	movs	r2, #18
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6838      	ldr	r0, [r7, #0]
 80060ae:	f7ff f9d1 	bl	8005454 <_SendPacket>
  RECORD_END();
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f383 8811 	msr	BASEPRI, r3
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20013aec 	.word	0x20013aec

080060c4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060ca:	f3ef 8311 	mrs	r3, BASEPRI
 80060ce:	f04f 0120 	mov.w	r1, #32
 80060d2:	f381 8811 	msr	BASEPRI, r1
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	4807      	ldr	r0, [pc, #28]	; (80060f8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80060da:	f7ff f8cb 	bl	8005274 <_PreparePacket>
 80060de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80060e0:	2211      	movs	r2, #17
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6838      	ldr	r0, [r7, #0]
 80060e6:	f7ff f9b5 	bl	8005454 <_SendPacket>
  RECORD_END();
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f383 8811 	msr	BASEPRI, r3
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20013aec 	.word	0x20013aec

080060fc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006104:	f3ef 8311 	mrs	r3, BASEPRI
 8006108:	f04f 0120 	mov.w	r1, #32
 800610c:	f381 8811 	msr	BASEPRI, r1
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	4819      	ldr	r0, [pc, #100]	; (8006178 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006114:	f7ff f8ae 	bl	8005274 <_PreparePacket>
 8006118:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800611e:	4b17      	ldr	r3, [pc, #92]	; (800617c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	61f9      	str	r1, [r7, #28]
 800613c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b7f      	cmp	r3, #127	; 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	61fa      	str	r2, [r7, #28]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006160:	2208      	movs	r2, #8
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	6938      	ldr	r0, [r7, #16]
 8006166:	f7ff f975 	bl	8005454 <_SendPacket>
  RECORD_END();
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f383 8811 	msr	BASEPRI, r3
}
 8006170:	bf00      	nop
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20013aec 	.word	0x20013aec
 800617c:	20013abc 	.word	0x20013abc

08006180 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006188:	f3ef 8311 	mrs	r3, BASEPRI
 800618c:	f04f 0120 	mov.w	r1, #32
 8006190:	f381 8811 	msr	BASEPRI, r1
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	4819      	ldr	r0, [pc, #100]	; (80061fc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006198:	f7ff f86c 	bl	8005274 <_PreparePacket>
 800619c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061a2:	4b17      	ldr	r3, [pc, #92]	; (8006200 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e00b      	b.n	80061ce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	61f9      	str	r1, [r7, #28]
 80061c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b7f      	cmp	r3, #127	; 0x7f
 80061d2:	d8f0      	bhi.n	80061b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	61fa      	str	r2, [r7, #28]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80061e4:	2204      	movs	r2, #4
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6938      	ldr	r0, [r7, #16]
 80061ea:	f7ff f933 	bl	8005454 <_SendPacket>
  RECORD_END();
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f383 8811 	msr	BASEPRI, r3
}
 80061f4:	bf00      	nop
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20013aec 	.word	0x20013aec
 8006200:	20013abc 	.word	0x20013abc

08006204 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800620c:	f3ef 8311 	mrs	r3, BASEPRI
 8006210:	f04f 0120 	mov.w	r1, #32
 8006214:	f381 8811 	msr	BASEPRI, r1
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	4819      	ldr	r0, [pc, #100]	; (8006280 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800621c:	f7ff f82a 	bl	8005274 <_PreparePacket>
 8006220:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006226:	4b17      	ldr	r3, [pc, #92]	; (8006284 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	e00b      	b.n	8006252 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	1c59      	adds	r1, r3, #1
 8006242:	61f9      	str	r1, [r7, #28]
 8006244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	09db      	lsrs	r3, r3, #7
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b7f      	cmp	r3, #127	; 0x7f
 8006256:	d8f0      	bhi.n	800623a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	61fa      	str	r2, [r7, #28]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006268:	2206      	movs	r2, #6
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	6938      	ldr	r0, [r7, #16]
 800626e:	f7ff f8f1 	bl	8005454 <_SendPacket>
  RECORD_END();
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f383 8811 	msr	BASEPRI, r3
}
 8006278:	bf00      	nop
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20013aec 	.word	0x20013aec
 8006284:	20013abc 	.word	0x20013abc

08006288 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006292:	f3ef 8311 	mrs	r3, BASEPRI
 8006296:	f04f 0120 	mov.w	r1, #32
 800629a:	f381 8811 	msr	BASEPRI, r1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	4827      	ldr	r0, [pc, #156]	; (8006340 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80062a2:	f7fe ffe7 	bl	8005274 <_PreparePacket>
 80062a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ac:	4b25      	ldr	r3, [pc, #148]	; (8006344 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	e00b      	b.n	80062d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	6279      	str	r1, [r7, #36]	; 0x24
 80062ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	09db      	lsrs	r3, r3, #7
 80062d6:	623b      	str	r3, [r7, #32]
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	2b7f      	cmp	r3, #127	; 0x7f
 80062dc:	d8f0      	bhi.n	80062c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	627a      	str	r2, [r7, #36]	; 0x24
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	e00b      	b.n	8006310 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	61f9      	str	r1, [r7, #28]
 8006302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	09db      	lsrs	r3, r3, #7
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b7f      	cmp	r3, #127	; 0x7f
 8006314:	d8f0      	bhi.n	80062f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	61fa      	str	r2, [r7, #28]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006326:	2207      	movs	r2, #7
 8006328:	68f9      	ldr	r1, [r7, #12]
 800632a:	6938      	ldr	r0, [r7, #16]
 800632c:	f7ff f892 	bl	8005454 <_SendPacket>
  RECORD_END();
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f383 8811 	msr	BASEPRI, r3
}
 8006336:	bf00      	nop
 8006338:	3728      	adds	r7, #40	; 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20013aec 	.word	0x20013aec
 8006344:	20013abc 	.word	0x20013abc

08006348 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	1ad3      	subs	r3, r2, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	20013abc 	.word	0x20013abc

08006368 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006372:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d06d      	beq.n	8006456 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800637a:	4b39      	ldr	r3, [pc, #228]	; (8006460 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006380:	2300      	movs	r3, #0
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
 8006384:	e008      	b.n	8006398 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	3301      	adds	r3, #1
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800639c:	429a      	cmp	r2, r3
 800639e:	d3f2      	bcc.n	8006386 <SEGGER_SYSVIEW_SendModule+0x1e>
 80063a0:	e000      	b.n	80063a4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80063a2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d055      	beq.n	8006456 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063aa:	f3ef 8311 	mrs	r3, BASEPRI
 80063ae:	f04f 0120 	mov.w	r1, #32
 80063b2:	f381 8811 	msr	BASEPRI, r1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	482a      	ldr	r0, [pc, #168]	; (8006464 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80063ba:	f7fe ff5b 	bl	8005274 <_PreparePacket>
 80063be:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	623b      	str	r3, [r7, #32]
 80063cc:	e00b      	b.n	80063e6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	1c59      	adds	r1, r3, #1
 80063d6:	6279      	str	r1, [r7, #36]	; 0x24
 80063d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	09db      	lsrs	r3, r3, #7
 80063e4:	623b      	str	r3, [r7, #32]
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ea:	d8f0      	bhi.n	80063ce <SEGGER_SYSVIEW_SendModule+0x66>
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	627a      	str	r2, [r7, #36]	; 0x24
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e00b      	b.n	8006420 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	b2da      	uxtb	r2, r3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	61f9      	str	r1, [r7, #28]
 8006412:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	09db      	lsrs	r3, r3, #7
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b7f      	cmp	r3, #127	; 0x7f
 8006424:	d8f0      	bhi.n	8006408 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	61fa      	str	r2, [r7, #28]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2280      	movs	r2, #128	; 0x80
 800643c:	4619      	mov	r1, r3
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7fe fec8 	bl	80051d4 <_EncodeStr>
 8006444:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006446:	2216      	movs	r2, #22
 8006448:	68f9      	ldr	r1, [r7, #12]
 800644a:	6938      	ldr	r0, [r7, #16]
 800644c:	f7ff f802 	bl	8005454 <_SendPacket>
      RECORD_END();
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006456:	bf00      	nop
 8006458:	3730      	adds	r7, #48	; 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20013ae4 	.word	0x20013ae4
 8006464:	20013aec 	.word	0x20013aec

08006468 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00f      	beq.n	8006496 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f2      	bne.n	800647c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20013ae4 	.word	0x20013ae4

080064a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80064aa:	f3ef 8311 	mrs	r3, BASEPRI
 80064ae:	f04f 0120 	mov.w	r1, #32
 80064b2:	f381 8811 	msr	BASEPRI, r1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	4817      	ldr	r0, [pc, #92]	; (8006518 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80064ba:	f7fe fedb 	bl	8005274 <_PreparePacket>
 80064be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	4b14      	ldr	r3, [pc, #80]	; (800651c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	e00b      	b.n	80064e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	6179      	str	r1, [r7, #20]
 80064da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	09db      	lsrs	r3, r3, #7
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b7f      	cmp	r3, #127	; 0x7f
 80064ec:	d8f0      	bhi.n	80064d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	617a      	str	r2, [r7, #20]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80064fe:	221b      	movs	r2, #27
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	68b8      	ldr	r0, [r7, #8]
 8006504:	f7fe ffa6 	bl	8005454 <_SendPacket>
  RECORD_END();
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20013aec 	.word	0x20013aec
 800651c:	20013ae8 	.word	0x20013ae8

08006520 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006528:	f3ef 8311 	mrs	r3, BASEPRI
 800652c:	f04f 0120 	mov.w	r1, #32
 8006530:	f381 8811 	msr	BASEPRI, r1
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	4827      	ldr	r0, [pc, #156]	; (80065d4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006538:	f7fe fe9c 	bl	8005274 <_PreparePacket>
 800653c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800653e:	2280      	movs	r2, #128	; 0x80
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	6938      	ldr	r0, [r7, #16]
 8006544:	f7fe fe46 	bl	80051d4 <_EncodeStr>
 8006548:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
 800654e:	2301      	movs	r3, #1
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	e00b      	b.n	800656c <SEGGER_SYSVIEW_Warn+0x4c>
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	b2da      	uxtb	r2, r3
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	1c59      	adds	r1, r3, #1
 800655c:	6279      	str	r1, [r7, #36]	; 0x24
 800655e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	09db      	lsrs	r3, r3, #7
 800656a:	623b      	str	r3, [r7, #32]
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	2b7f      	cmp	r3, #127	; 0x7f
 8006570:	d8f0      	bhi.n	8006554 <SEGGER_SYSVIEW_Warn+0x34>
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	627a      	str	r2, [r7, #36]	; 0x24
 8006578:	6a3a      	ldr	r2, [r7, #32]
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	e00b      	b.n	80065a4 <SEGGER_SYSVIEW_Warn+0x84>
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	61f9      	str	r1, [r7, #28]
 8006596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	09db      	lsrs	r3, r3, #7
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b7f      	cmp	r3, #127	; 0x7f
 80065a8:	d8f0      	bhi.n	800658c <SEGGER_SYSVIEW_Warn+0x6c>
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	61fa      	str	r2, [r7, #28]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065ba:	221a      	movs	r2, #26
 80065bc:	68f9      	ldr	r1, [r7, #12]
 80065be:	6938      	ldr	r0, [r7, #16]
 80065c0:	f7fe ff48 	bl	8005454 <_SendPacket>
  RECORD_END();
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f383 8811 	msr	BASEPRI, r3
}
 80065ca:	bf00      	nop
 80065cc:	3728      	adds	r7, #40	; 0x28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20013aec 	.word	0x20013aec

080065d8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	2000      	movs	r0, #0
 80065ec:	f7fe fcfc 	bl	8004fe8 <SEGGER_RTT_Write>
  return len;
 80065f0:	683b      	ldr	r3, [r7, #0]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	; (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000014 	.word	0x20000014

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4d0d      	ldr	r5, [pc, #52]	; (8006640 <__libc_init_array+0x38>)
 800660c:	4c0d      	ldr	r4, [pc, #52]	; (8006644 <__libc_init_array+0x3c>)
 800660e:	1b64      	subs	r4, r4, r5
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	2600      	movs	r6, #0
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	4d0b      	ldr	r5, [pc, #44]	; (8006648 <__libc_init_array+0x40>)
 800661a:	4c0c      	ldr	r4, [pc, #48]	; (800664c <__libc_init_array+0x44>)
 800661c:	f000 fcf0 	bl	8007000 <_init>
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	2600      	movs	r6, #0
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	080071cc 	.word	0x080071cc
 8006644:	080071cc 	.word	0x080071cc
 8006648:	080071cc 	.word	0x080071cc
 800664c:	080071d0 	.word	0x080071d0

08006650 <memcmp>:
 8006650:	b530      	push	{r4, r5, lr}
 8006652:	3901      	subs	r1, #1
 8006654:	2400      	movs	r4, #0
 8006656:	42a2      	cmp	r2, r4
 8006658:	d101      	bne.n	800665e <memcmp+0xe>
 800665a:	2000      	movs	r0, #0
 800665c:	e005      	b.n	800666a <memcmp+0x1a>
 800665e:	5d03      	ldrb	r3, [r0, r4]
 8006660:	3401      	adds	r4, #1
 8006662:	5d0d      	ldrb	r5, [r1, r4]
 8006664:	42ab      	cmp	r3, r5
 8006666:	d0f6      	beq.n	8006656 <memcmp+0x6>
 8006668:	1b58      	subs	r0, r3, r5
 800666a:	bd30      	pop	{r4, r5, pc}

0800666c <memcpy>:
 800666c:	440a      	add	r2, r1
 800666e:	4291      	cmp	r1, r2
 8006670:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006674:	d100      	bne.n	8006678 <memcpy+0xc>
 8006676:	4770      	bx	lr
 8006678:	b510      	push	{r4, lr}
 800667a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800667e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006682:	4291      	cmp	r1, r2
 8006684:	d1f9      	bne.n	800667a <memcpy+0xe>
 8006686:	bd10      	pop	{r4, pc}

08006688 <memset>:
 8006688:	4402      	add	r2, r0
 800668a:	4603      	mov	r3, r0
 800668c:	4293      	cmp	r3, r2
 800668e:	d100      	bne.n	8006692 <memset+0xa>
 8006690:	4770      	bx	lr
 8006692:	f803 1b01 	strb.w	r1, [r3], #1
 8006696:	e7f9      	b.n	800668c <memset+0x4>

08006698 <_puts_r>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	460e      	mov	r6, r1
 800669c:	4605      	mov	r5, r0
 800669e:	b118      	cbz	r0, 80066a8 <_puts_r+0x10>
 80066a0:	6983      	ldr	r3, [r0, #24]
 80066a2:	b90b      	cbnz	r3, 80066a8 <_puts_r+0x10>
 80066a4:	f000 fa48 	bl	8006b38 <__sinit>
 80066a8:	69ab      	ldr	r3, [r5, #24]
 80066aa:	68ac      	ldr	r4, [r5, #8]
 80066ac:	b913      	cbnz	r3, 80066b4 <_puts_r+0x1c>
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 fa42 	bl	8006b38 <__sinit>
 80066b4:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <_puts_r+0xd0>)
 80066b6:	429c      	cmp	r4, r3
 80066b8:	d120      	bne.n	80066fc <_puts_r+0x64>
 80066ba:	686c      	ldr	r4, [r5, #4]
 80066bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066be:	07db      	lsls	r3, r3, #31
 80066c0:	d405      	bmi.n	80066ce <_puts_r+0x36>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	0598      	lsls	r0, r3, #22
 80066c6:	d402      	bmi.n	80066ce <_puts_r+0x36>
 80066c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ca:	f000 fad3 	bl	8006c74 <__retarget_lock_acquire_recursive>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	0719      	lsls	r1, r3, #28
 80066d2:	d51d      	bpl.n	8006710 <_puts_r+0x78>
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	b1db      	cbz	r3, 8006710 <_puts_r+0x78>
 80066d8:	3e01      	subs	r6, #1
 80066da:	68a3      	ldr	r3, [r4, #8]
 80066dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066e0:	3b01      	subs	r3, #1
 80066e2:	60a3      	str	r3, [r4, #8]
 80066e4:	bb39      	cbnz	r1, 8006736 <_puts_r+0x9e>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	da38      	bge.n	800675c <_puts_r+0xc4>
 80066ea:	4622      	mov	r2, r4
 80066ec:	210a      	movs	r1, #10
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 f848 	bl	8006784 <__swbuf_r>
 80066f4:	3001      	adds	r0, #1
 80066f6:	d011      	beq.n	800671c <_puts_r+0x84>
 80066f8:	250a      	movs	r5, #10
 80066fa:	e011      	b.n	8006720 <_puts_r+0x88>
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <_puts_r+0xd4>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d101      	bne.n	8006706 <_puts_r+0x6e>
 8006702:	68ac      	ldr	r4, [r5, #8]
 8006704:	e7da      	b.n	80066bc <_puts_r+0x24>
 8006706:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <_puts_r+0xd8>)
 8006708:	429c      	cmp	r4, r3
 800670a:	bf08      	it	eq
 800670c:	68ec      	ldreq	r4, [r5, #12]
 800670e:	e7d5      	b.n	80066bc <_puts_r+0x24>
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f888 	bl	8006828 <__swsetup_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	d0dd      	beq.n	80066d8 <_puts_r+0x40>
 800671c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006722:	07da      	lsls	r2, r3, #31
 8006724:	d405      	bmi.n	8006732 <_puts_r+0x9a>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	059b      	lsls	r3, r3, #22
 800672a:	d402      	bmi.n	8006732 <_puts_r+0x9a>
 800672c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672e:	f000 faa2 	bl	8006c76 <__retarget_lock_release_recursive>
 8006732:	4628      	mov	r0, r5
 8006734:	bd70      	pop	{r4, r5, r6, pc}
 8006736:	2b00      	cmp	r3, #0
 8006738:	da04      	bge.n	8006744 <_puts_r+0xac>
 800673a:	69a2      	ldr	r2, [r4, #24]
 800673c:	429a      	cmp	r2, r3
 800673e:	dc06      	bgt.n	800674e <_puts_r+0xb6>
 8006740:	290a      	cmp	r1, #10
 8006742:	d004      	beq.n	800674e <_puts_r+0xb6>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	6022      	str	r2, [r4, #0]
 800674a:	7019      	strb	r1, [r3, #0]
 800674c:	e7c5      	b.n	80066da <_puts_r+0x42>
 800674e:	4622      	mov	r2, r4
 8006750:	4628      	mov	r0, r5
 8006752:	f000 f817 	bl	8006784 <__swbuf_r>
 8006756:	3001      	adds	r0, #1
 8006758:	d1bf      	bne.n	80066da <_puts_r+0x42>
 800675a:	e7df      	b.n	800671c <_puts_r+0x84>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	250a      	movs	r5, #10
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	6022      	str	r2, [r4, #0]
 8006764:	701d      	strb	r5, [r3, #0]
 8006766:	e7db      	b.n	8006720 <_puts_r+0x88>
 8006768:	08007184 	.word	0x08007184
 800676c:	080071a4 	.word	0x080071a4
 8006770:	08007164 	.word	0x08007164

08006774 <puts>:
 8006774:	4b02      	ldr	r3, [pc, #8]	; (8006780 <puts+0xc>)
 8006776:	4601      	mov	r1, r0
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	f7ff bf8d 	b.w	8006698 <_puts_r>
 800677e:	bf00      	nop
 8006780:	20000014 	.word	0x20000014

08006784 <__swbuf_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	460e      	mov	r6, r1
 8006788:	4614      	mov	r4, r2
 800678a:	4605      	mov	r5, r0
 800678c:	b118      	cbz	r0, 8006796 <__swbuf_r+0x12>
 800678e:	6983      	ldr	r3, [r0, #24]
 8006790:	b90b      	cbnz	r3, 8006796 <__swbuf_r+0x12>
 8006792:	f000 f9d1 	bl	8006b38 <__sinit>
 8006796:	4b21      	ldr	r3, [pc, #132]	; (800681c <__swbuf_r+0x98>)
 8006798:	429c      	cmp	r4, r3
 800679a:	d12b      	bne.n	80067f4 <__swbuf_r+0x70>
 800679c:	686c      	ldr	r4, [r5, #4]
 800679e:	69a3      	ldr	r3, [r4, #24]
 80067a0:	60a3      	str	r3, [r4, #8]
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	071a      	lsls	r2, r3, #28
 80067a6:	d52f      	bpl.n	8006808 <__swbuf_r+0x84>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	b36b      	cbz	r3, 8006808 <__swbuf_r+0x84>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	6820      	ldr	r0, [r4, #0]
 80067b0:	1ac0      	subs	r0, r0, r3
 80067b2:	6963      	ldr	r3, [r4, #20]
 80067b4:	b2f6      	uxtb	r6, r6
 80067b6:	4283      	cmp	r3, r0
 80067b8:	4637      	mov	r7, r6
 80067ba:	dc04      	bgt.n	80067c6 <__swbuf_r+0x42>
 80067bc:	4621      	mov	r1, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 f926 	bl	8006a10 <_fflush_r>
 80067c4:	bb30      	cbnz	r0, 8006814 <__swbuf_r+0x90>
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60a3      	str	r3, [r4, #8]
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	701e      	strb	r6, [r3, #0]
 80067d4:	6963      	ldr	r3, [r4, #20]
 80067d6:	3001      	adds	r0, #1
 80067d8:	4283      	cmp	r3, r0
 80067da:	d004      	beq.n	80067e6 <__swbuf_r+0x62>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	07db      	lsls	r3, r3, #31
 80067e0:	d506      	bpl.n	80067f0 <__swbuf_r+0x6c>
 80067e2:	2e0a      	cmp	r6, #10
 80067e4:	d104      	bne.n	80067f0 <__swbuf_r+0x6c>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f000 f911 	bl	8006a10 <_fflush_r>
 80067ee:	b988      	cbnz	r0, 8006814 <__swbuf_r+0x90>
 80067f0:	4638      	mov	r0, r7
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <__swbuf_r+0x9c>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d101      	bne.n	80067fe <__swbuf_r+0x7a>
 80067fa:	68ac      	ldr	r4, [r5, #8]
 80067fc:	e7cf      	b.n	800679e <__swbuf_r+0x1a>
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <__swbuf_r+0xa0>)
 8006800:	429c      	cmp	r4, r3
 8006802:	bf08      	it	eq
 8006804:	68ec      	ldreq	r4, [r5, #12]
 8006806:	e7ca      	b.n	800679e <__swbuf_r+0x1a>
 8006808:	4621      	mov	r1, r4
 800680a:	4628      	mov	r0, r5
 800680c:	f000 f80c 	bl	8006828 <__swsetup_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	d0cb      	beq.n	80067ac <__swbuf_r+0x28>
 8006814:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006818:	e7ea      	b.n	80067f0 <__swbuf_r+0x6c>
 800681a:	bf00      	nop
 800681c:	08007184 	.word	0x08007184
 8006820:	080071a4 	.word	0x080071a4
 8006824:	08007164 	.word	0x08007164

08006828 <__swsetup_r>:
 8006828:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <__swsetup_r+0xcc>)
 800682a:	b570      	push	{r4, r5, r6, lr}
 800682c:	681d      	ldr	r5, [r3, #0]
 800682e:	4606      	mov	r6, r0
 8006830:	460c      	mov	r4, r1
 8006832:	b125      	cbz	r5, 800683e <__swsetup_r+0x16>
 8006834:	69ab      	ldr	r3, [r5, #24]
 8006836:	b913      	cbnz	r3, 800683e <__swsetup_r+0x16>
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f97d 	bl	8006b38 <__sinit>
 800683e:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <__swsetup_r+0xd0>)
 8006840:	429c      	cmp	r4, r3
 8006842:	d10f      	bne.n	8006864 <__swsetup_r+0x3c>
 8006844:	686c      	ldr	r4, [r5, #4]
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800684c:	0719      	lsls	r1, r3, #28
 800684e:	d42c      	bmi.n	80068aa <__swsetup_r+0x82>
 8006850:	06dd      	lsls	r5, r3, #27
 8006852:	d411      	bmi.n	8006878 <__swsetup_r+0x50>
 8006854:	2309      	movs	r3, #9
 8006856:	6033      	str	r3, [r6, #0]
 8006858:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006862:	e03e      	b.n	80068e2 <__swsetup_r+0xba>
 8006864:	4b25      	ldr	r3, [pc, #148]	; (80068fc <__swsetup_r+0xd4>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d101      	bne.n	800686e <__swsetup_r+0x46>
 800686a:	68ac      	ldr	r4, [r5, #8]
 800686c:	e7eb      	b.n	8006846 <__swsetup_r+0x1e>
 800686e:	4b24      	ldr	r3, [pc, #144]	; (8006900 <__swsetup_r+0xd8>)
 8006870:	429c      	cmp	r4, r3
 8006872:	bf08      	it	eq
 8006874:	68ec      	ldreq	r4, [r5, #12]
 8006876:	e7e6      	b.n	8006846 <__swsetup_r+0x1e>
 8006878:	0758      	lsls	r0, r3, #29
 800687a:	d512      	bpl.n	80068a2 <__swsetup_r+0x7a>
 800687c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800687e:	b141      	cbz	r1, 8006892 <__swsetup_r+0x6a>
 8006880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006884:	4299      	cmp	r1, r3
 8006886:	d002      	beq.n	800688e <__swsetup_r+0x66>
 8006888:	4630      	mov	r0, r6
 800688a:	f000 fa59 	bl	8006d40 <_free_r>
 800688e:	2300      	movs	r3, #0
 8006890:	6363      	str	r3, [r4, #52]	; 0x34
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006898:	81a3      	strh	r3, [r4, #12]
 800689a:	2300      	movs	r3, #0
 800689c:	6063      	str	r3, [r4, #4]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f043 0308 	orr.w	r3, r3, #8
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	b94b      	cbnz	r3, 80068c2 <__swsetup_r+0x9a>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b8:	d003      	beq.n	80068c2 <__swsetup_r+0x9a>
 80068ba:	4621      	mov	r1, r4
 80068bc:	4630      	mov	r0, r6
 80068be:	f000 f9ff 	bl	8006cc0 <__smakebuf_r>
 80068c2:	89a0      	ldrh	r0, [r4, #12]
 80068c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c8:	f010 0301 	ands.w	r3, r0, #1
 80068cc:	d00a      	beq.n	80068e4 <__swsetup_r+0xbc>
 80068ce:	2300      	movs	r3, #0
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6963      	ldr	r3, [r4, #20]
 80068d4:	425b      	negs	r3, r3
 80068d6:	61a3      	str	r3, [r4, #24]
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	b943      	cbnz	r3, 80068ee <__swsetup_r+0xc6>
 80068dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068e0:	d1ba      	bne.n	8006858 <__swsetup_r+0x30>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	0781      	lsls	r1, r0, #30
 80068e6:	bf58      	it	pl
 80068e8:	6963      	ldrpl	r3, [r4, #20]
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	e7f4      	b.n	80068d8 <__swsetup_r+0xb0>
 80068ee:	2000      	movs	r0, #0
 80068f0:	e7f7      	b.n	80068e2 <__swsetup_r+0xba>
 80068f2:	bf00      	nop
 80068f4:	20000014 	.word	0x20000014
 80068f8:	08007184 	.word	0x08007184
 80068fc:	080071a4 	.word	0x080071a4
 8006900:	08007164 	.word	0x08007164

08006904 <__sflush_r>:
 8006904:	898a      	ldrh	r2, [r1, #12]
 8006906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690a:	4605      	mov	r5, r0
 800690c:	0710      	lsls	r0, r2, #28
 800690e:	460c      	mov	r4, r1
 8006910:	d458      	bmi.n	80069c4 <__sflush_r+0xc0>
 8006912:	684b      	ldr	r3, [r1, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	dc05      	bgt.n	8006924 <__sflush_r+0x20>
 8006918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	dc02      	bgt.n	8006924 <__sflush_r+0x20>
 800691e:	2000      	movs	r0, #0
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006926:	2e00      	cmp	r6, #0
 8006928:	d0f9      	beq.n	800691e <__sflush_r+0x1a>
 800692a:	2300      	movs	r3, #0
 800692c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006930:	682f      	ldr	r7, [r5, #0]
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	d032      	beq.n	800699c <__sflush_r+0x98>
 8006936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	075a      	lsls	r2, r3, #29
 800693c:	d505      	bpl.n	800694a <__sflush_r+0x46>
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	1ac0      	subs	r0, r0, r3
 8006942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006944:	b10b      	cbz	r3, 800694a <__sflush_r+0x46>
 8006946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006948:	1ac0      	subs	r0, r0, r3
 800694a:	2300      	movs	r3, #0
 800694c:	4602      	mov	r2, r0
 800694e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006950:	6a21      	ldr	r1, [r4, #32]
 8006952:	4628      	mov	r0, r5
 8006954:	47b0      	blx	r6
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	d106      	bne.n	800696a <__sflush_r+0x66>
 800695c:	6829      	ldr	r1, [r5, #0]
 800695e:	291d      	cmp	r1, #29
 8006960:	d82c      	bhi.n	80069bc <__sflush_r+0xb8>
 8006962:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <__sflush_r+0x108>)
 8006964:	40ca      	lsrs	r2, r1
 8006966:	07d6      	lsls	r6, r2, #31
 8006968:	d528      	bpl.n	80069bc <__sflush_r+0xb8>
 800696a:	2200      	movs	r2, #0
 800696c:	6062      	str	r2, [r4, #4]
 800696e:	04d9      	lsls	r1, r3, #19
 8006970:	6922      	ldr	r2, [r4, #16]
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	d504      	bpl.n	8006980 <__sflush_r+0x7c>
 8006976:	1c42      	adds	r2, r0, #1
 8006978:	d101      	bne.n	800697e <__sflush_r+0x7a>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	b903      	cbnz	r3, 8006980 <__sflush_r+0x7c>
 800697e:	6560      	str	r0, [r4, #84]	; 0x54
 8006980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006982:	602f      	str	r7, [r5, #0]
 8006984:	2900      	cmp	r1, #0
 8006986:	d0ca      	beq.n	800691e <__sflush_r+0x1a>
 8006988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <__sflush_r+0x92>
 8006990:	4628      	mov	r0, r5
 8006992:	f000 f9d5 	bl	8006d40 <_free_r>
 8006996:	2000      	movs	r0, #0
 8006998:	6360      	str	r0, [r4, #52]	; 0x34
 800699a:	e7c1      	b.n	8006920 <__sflush_r+0x1c>
 800699c:	6a21      	ldr	r1, [r4, #32]
 800699e:	2301      	movs	r3, #1
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b0      	blx	r6
 80069a4:	1c41      	adds	r1, r0, #1
 80069a6:	d1c7      	bne.n	8006938 <__sflush_r+0x34>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0c4      	beq.n	8006938 <__sflush_r+0x34>
 80069ae:	2b1d      	cmp	r3, #29
 80069b0:	d001      	beq.n	80069b6 <__sflush_r+0xb2>
 80069b2:	2b16      	cmp	r3, #22
 80069b4:	d101      	bne.n	80069ba <__sflush_r+0xb6>
 80069b6:	602f      	str	r7, [r5, #0]
 80069b8:	e7b1      	b.n	800691e <__sflush_r+0x1a>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	e7ad      	b.n	8006920 <__sflush_r+0x1c>
 80069c4:	690f      	ldr	r7, [r1, #16]
 80069c6:	2f00      	cmp	r7, #0
 80069c8:	d0a9      	beq.n	800691e <__sflush_r+0x1a>
 80069ca:	0793      	lsls	r3, r2, #30
 80069cc:	680e      	ldr	r6, [r1, #0]
 80069ce:	bf08      	it	eq
 80069d0:	694b      	ldreq	r3, [r1, #20]
 80069d2:	600f      	str	r7, [r1, #0]
 80069d4:	bf18      	it	ne
 80069d6:	2300      	movne	r3, #0
 80069d8:	eba6 0807 	sub.w	r8, r6, r7
 80069dc:	608b      	str	r3, [r1, #8]
 80069de:	f1b8 0f00 	cmp.w	r8, #0
 80069e2:	dd9c      	ble.n	800691e <__sflush_r+0x1a>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069e8:	4643      	mov	r3, r8
 80069ea:	463a      	mov	r2, r7
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b0      	blx	r6
 80069f0:	2800      	cmp	r0, #0
 80069f2:	dc06      	bgt.n	8006a02 <__sflush_r+0xfe>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a00:	e78e      	b.n	8006920 <__sflush_r+0x1c>
 8006a02:	4407      	add	r7, r0
 8006a04:	eba8 0800 	sub.w	r8, r8, r0
 8006a08:	e7e9      	b.n	80069de <__sflush_r+0xda>
 8006a0a:	bf00      	nop
 8006a0c:	20400001 	.word	0x20400001

08006a10 <_fflush_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b913      	cbnz	r3, 8006a20 <_fflush_r+0x10>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	b118      	cbz	r0, 8006a2a <_fflush_r+0x1a>
 8006a22:	6983      	ldr	r3, [r0, #24]
 8006a24:	b90b      	cbnz	r3, 8006a2a <_fflush_r+0x1a>
 8006a26:	f000 f887 	bl	8006b38 <__sinit>
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <_fflush_r+0x6c>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d11b      	bne.n	8006a68 <_fflush_r+0x58>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ef      	beq.n	8006a1a <_fflush_r+0xa>
 8006a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a3c:	07d0      	lsls	r0, r2, #31
 8006a3e:	d404      	bmi.n	8006a4a <_fflush_r+0x3a>
 8006a40:	0599      	lsls	r1, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_fflush_r+0x3a>
 8006a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a46:	f000 f915 	bl	8006c74 <__retarget_lock_acquire_recursive>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	f7ff ff59 	bl	8006904 <__sflush_r>
 8006a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a54:	07da      	lsls	r2, r3, #31
 8006a56:	4605      	mov	r5, r0
 8006a58:	d4e0      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	059b      	lsls	r3, r3, #22
 8006a5e:	d4dd      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f000 f908 	bl	8006c76 <__retarget_lock_release_recursive>
 8006a66:	e7d9      	b.n	8006a1c <_fflush_r+0xc>
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <_fflush_r+0x70>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d101      	bne.n	8006a72 <_fflush_r+0x62>
 8006a6e:	68ac      	ldr	r4, [r5, #8]
 8006a70:	e7df      	b.n	8006a32 <_fflush_r+0x22>
 8006a72:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <_fflush_r+0x74>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	bf08      	it	eq
 8006a78:	68ec      	ldreq	r4, [r5, #12]
 8006a7a:	e7da      	b.n	8006a32 <_fflush_r+0x22>
 8006a7c:	08007184 	.word	0x08007184
 8006a80:	080071a4 	.word	0x080071a4
 8006a84:	08007164 	.word	0x08007164

08006a88 <std>:
 8006a88:	2300      	movs	r3, #0
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a96:	6083      	str	r3, [r0, #8]
 8006a98:	8181      	strh	r1, [r0, #12]
 8006a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a9c:	81c2      	strh	r2, [r0, #14]
 8006a9e:	6183      	str	r3, [r0, #24]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	305c      	adds	r0, #92	; 0x5c
 8006aa6:	f7ff fdef 	bl	8006688 <memset>
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <std+0x38>)
 8006aac:	6263      	str	r3, [r4, #36]	; 0x24
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <std+0x3c>)
 8006ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x40>)
 8006ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x44>)
 8006ab8:	6224      	str	r4, [r4, #32]
 8006aba:	6323      	str	r3, [r4, #48]	; 0x30
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	bf00      	nop
 8006ac0:	08006eb5 	.word	0x08006eb5
 8006ac4:	08006ed7 	.word	0x08006ed7
 8006ac8:	08006f0f 	.word	0x08006f0f
 8006acc:	08006f33 	.word	0x08006f33

08006ad0 <_cleanup_r>:
 8006ad0:	4901      	ldr	r1, [pc, #4]	; (8006ad8 <_cleanup_r+0x8>)
 8006ad2:	f000 b8af 	b.w	8006c34 <_fwalk_reent>
 8006ad6:	bf00      	nop
 8006ad8:	08006a11 	.word	0x08006a11

08006adc <__sfmoreglue>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	1e4a      	subs	r2, r1, #1
 8006ae0:	2568      	movs	r5, #104	; 0x68
 8006ae2:	4355      	muls	r5, r2
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aea:	f000 f979 	bl	8006de0 <_malloc_r>
 8006aee:	4604      	mov	r4, r0
 8006af0:	b140      	cbz	r0, 8006b04 <__sfmoreglue+0x28>
 8006af2:	2100      	movs	r1, #0
 8006af4:	e9c0 1600 	strd	r1, r6, [r0]
 8006af8:	300c      	adds	r0, #12
 8006afa:	60a0      	str	r0, [r4, #8]
 8006afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b00:	f7ff fdc2 	bl	8006688 <memset>
 8006b04:	4620      	mov	r0, r4
 8006b06:	bd70      	pop	{r4, r5, r6, pc}

08006b08 <__sfp_lock_acquire>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__sfp_lock_acquire+0x8>)
 8006b0a:	f000 b8b3 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20013d58 	.word	0x20013d58

08006b14 <__sfp_lock_release>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sfp_lock_release+0x8>)
 8006b16:	f000 b8ae 	b.w	8006c76 <__retarget_lock_release_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20013d58 	.word	0x20013d58

08006b20 <__sinit_lock_acquire>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sinit_lock_acquire+0x8>)
 8006b22:	f000 b8a7 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	20013d53 	.word	0x20013d53

08006b2c <__sinit_lock_release>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__sinit_lock_release+0x8>)
 8006b2e:	f000 b8a2 	b.w	8006c76 <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	20013d53 	.word	0x20013d53

08006b38 <__sinit>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	f7ff fff0 	bl	8006b20 <__sinit_lock_acquire>
 8006b40:	69a3      	ldr	r3, [r4, #24]
 8006b42:	b11b      	cbz	r3, 8006b4c <__sinit+0x14>
 8006b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b48:	f7ff bff0 	b.w	8006b2c <__sinit_lock_release>
 8006b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b50:	6523      	str	r3, [r4, #80]	; 0x50
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <__sinit+0x68>)
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <__sinit+0x6c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	bf04      	itt	eq
 8006b5e:	2301      	moveq	r3, #1
 8006b60:	61a3      	streq	r3, [r4, #24]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f820 	bl	8006ba8 <__sfp>
 8006b68:	6060      	str	r0, [r4, #4]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f81c 	bl	8006ba8 <__sfp>
 8006b70:	60a0      	str	r0, [r4, #8]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f818 	bl	8006ba8 <__sfp>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	60e0      	str	r0, [r4, #12]
 8006b7c:	2104      	movs	r1, #4
 8006b7e:	6860      	ldr	r0, [r4, #4]
 8006b80:	f7ff ff82 	bl	8006a88 <std>
 8006b84:	68a0      	ldr	r0, [r4, #8]
 8006b86:	2201      	movs	r2, #1
 8006b88:	2109      	movs	r1, #9
 8006b8a:	f7ff ff7d 	bl	8006a88 <std>
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	2202      	movs	r2, #2
 8006b92:	2112      	movs	r1, #18
 8006b94:	f7ff ff78 	bl	8006a88 <std>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	61a3      	str	r3, [r4, #24]
 8006b9c:	e7d2      	b.n	8006b44 <__sinit+0xc>
 8006b9e:	bf00      	nop
 8006ba0:	08007160 	.word	0x08007160
 8006ba4:	08006ad1 	.word	0x08006ad1

08006ba8 <__sfp>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4607      	mov	r7, r0
 8006bac:	f7ff ffac 	bl	8006b08 <__sfp_lock_acquire>
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <__sfp+0x84>)
 8006bb2:	681e      	ldr	r6, [r3, #0]
 8006bb4:	69b3      	ldr	r3, [r6, #24]
 8006bb6:	b913      	cbnz	r3, 8006bbe <__sfp+0x16>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff ffbd 	bl	8006b38 <__sinit>
 8006bbe:	3648      	adds	r6, #72	; 0x48
 8006bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	d503      	bpl.n	8006bd0 <__sfp+0x28>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	b30b      	cbz	r3, 8006c10 <__sfp+0x68>
 8006bcc:	6836      	ldr	r6, [r6, #0]
 8006bce:	e7f7      	b.n	8006bc0 <__sfp+0x18>
 8006bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bd4:	b9d5      	cbnz	r5, 8006c0c <__sfp+0x64>
 8006bd6:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <__sfp+0x88>)
 8006bd8:	60e3      	str	r3, [r4, #12]
 8006bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bde:	6665      	str	r5, [r4, #100]	; 0x64
 8006be0:	f000 f847 	bl	8006c72 <__retarget_lock_init_recursive>
 8006be4:	f7ff ff96 	bl	8006b14 <__sfp_lock_release>
 8006be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bf0:	6025      	str	r5, [r4, #0]
 8006bf2:	61a5      	str	r5, [r4, #24]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bfc:	f7ff fd44 	bl	8006688 <memset>
 8006c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c08:	4620      	mov	r0, r4
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0c:	3468      	adds	r4, #104	; 0x68
 8006c0e:	e7d9      	b.n	8006bc4 <__sfp+0x1c>
 8006c10:	2104      	movs	r1, #4
 8006c12:	4638      	mov	r0, r7
 8006c14:	f7ff ff62 	bl	8006adc <__sfmoreglue>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	6030      	str	r0, [r6, #0]
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d1d5      	bne.n	8006bcc <__sfp+0x24>
 8006c20:	f7ff ff78 	bl	8006b14 <__sfp_lock_release>
 8006c24:	230c      	movs	r3, #12
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	e7ee      	b.n	8006c08 <__sfp+0x60>
 8006c2a:	bf00      	nop
 8006c2c:	08007160 	.word	0x08007160
 8006c30:	ffff0001 	.word	0xffff0001

08006c34 <_fwalk_reent>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	4606      	mov	r6, r0
 8006c3a:	4688      	mov	r8, r1
 8006c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c40:	2700      	movs	r7, #0
 8006c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c46:	f1b9 0901 	subs.w	r9, r9, #1
 8006c4a:	d505      	bpl.n	8006c58 <_fwalk_reent+0x24>
 8006c4c:	6824      	ldr	r4, [r4, #0]
 8006c4e:	2c00      	cmp	r4, #0
 8006c50:	d1f7      	bne.n	8006c42 <_fwalk_reent+0xe>
 8006c52:	4638      	mov	r0, r7
 8006c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c58:	89ab      	ldrh	r3, [r5, #12]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d907      	bls.n	8006c6e <_fwalk_reent+0x3a>
 8006c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c62:	3301      	adds	r3, #1
 8006c64:	d003      	beq.n	8006c6e <_fwalk_reent+0x3a>
 8006c66:	4629      	mov	r1, r5
 8006c68:	4630      	mov	r0, r6
 8006c6a:	47c0      	blx	r8
 8006c6c:	4307      	orrs	r7, r0
 8006c6e:	3568      	adds	r5, #104	; 0x68
 8006c70:	e7e9      	b.n	8006c46 <_fwalk_reent+0x12>

08006c72 <__retarget_lock_init_recursive>:
 8006c72:	4770      	bx	lr

08006c74 <__retarget_lock_acquire_recursive>:
 8006c74:	4770      	bx	lr

08006c76 <__retarget_lock_release_recursive>:
 8006c76:	4770      	bx	lr

08006c78 <__swhatbuf_r>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	460e      	mov	r6, r1
 8006c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c80:	2900      	cmp	r1, #0
 8006c82:	b096      	sub	sp, #88	; 0x58
 8006c84:	4614      	mov	r4, r2
 8006c86:	461d      	mov	r5, r3
 8006c88:	da07      	bge.n	8006c9a <__swhatbuf_r+0x22>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	89b3      	ldrh	r3, [r6, #12]
 8006c90:	061a      	lsls	r2, r3, #24
 8006c92:	d410      	bmi.n	8006cb6 <__swhatbuf_r+0x3e>
 8006c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c98:	e00e      	b.n	8006cb8 <__swhatbuf_r+0x40>
 8006c9a:	466a      	mov	r2, sp
 8006c9c:	f000 f95e 	bl	8006f5c <_fstat_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	dbf2      	blt.n	8006c8a <__swhatbuf_r+0x12>
 8006ca4:	9a01      	ldr	r2, [sp, #4]
 8006ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cae:	425a      	negs	r2, r3
 8006cb0:	415a      	adcs	r2, r3
 8006cb2:	602a      	str	r2, [r5, #0]
 8006cb4:	e7ee      	b.n	8006c94 <__swhatbuf_r+0x1c>
 8006cb6:	2340      	movs	r3, #64	; 0x40
 8006cb8:	2000      	movs	r0, #0
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	b016      	add	sp, #88	; 0x58
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}

08006cc0 <__smakebuf_r>:
 8006cc0:	898b      	ldrh	r3, [r1, #12]
 8006cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cc4:	079d      	lsls	r5, r3, #30
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	460c      	mov	r4, r1
 8006cca:	d507      	bpl.n	8006cdc <__smakebuf_r+0x1c>
 8006ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	6163      	str	r3, [r4, #20]
 8006cd8:	b002      	add	sp, #8
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	ab01      	add	r3, sp, #4
 8006cde:	466a      	mov	r2, sp
 8006ce0:	f7ff ffca 	bl	8006c78 <__swhatbuf_r>
 8006ce4:	9900      	ldr	r1, [sp, #0]
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 f879 	bl	8006de0 <_malloc_r>
 8006cee:	b948      	cbnz	r0, 8006d04 <__smakebuf_r+0x44>
 8006cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cf4:	059a      	lsls	r2, r3, #22
 8006cf6:	d4ef      	bmi.n	8006cd8 <__smakebuf_r+0x18>
 8006cf8:	f023 0303 	bic.w	r3, r3, #3
 8006cfc:	f043 0302 	orr.w	r3, r3, #2
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	e7e3      	b.n	8006ccc <__smakebuf_r+0xc>
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <__smakebuf_r+0x7c>)
 8006d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	6020      	str	r0, [r4, #0]
 8006d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	9b00      	ldr	r3, [sp, #0]
 8006d14:	6163      	str	r3, [r4, #20]
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	6120      	str	r0, [r4, #16]
 8006d1a:	b15b      	cbz	r3, 8006d34 <__smakebuf_r+0x74>
 8006d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 f92d 	bl	8006f80 <_isatty_r>
 8006d26:	b128      	cbz	r0, 8006d34 <__smakebuf_r+0x74>
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	89a0      	ldrh	r0, [r4, #12]
 8006d36:	4305      	orrs	r5, r0
 8006d38:	81a5      	strh	r5, [r4, #12]
 8006d3a:	e7cd      	b.n	8006cd8 <__smakebuf_r+0x18>
 8006d3c:	08006ad1 	.word	0x08006ad1

08006d40 <_free_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	d048      	beq.n	8006dd8 <_free_r+0x98>
 8006d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d52:	bfb8      	it	lt
 8006d54:	18e4      	addlt	r4, r4, r3
 8006d56:	f000 f935 	bl	8006fc4 <__malloc_lock>
 8006d5a:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <_free_r+0x9c>)
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	4615      	mov	r5, r2
 8006d62:	b933      	cbnz	r3, 8006d72 <_free_r+0x32>
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6014      	str	r4, [r2, #0]
 8006d68:	b003      	add	sp, #12
 8006d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6e:	f000 b92f 	b.w	8006fd0 <__malloc_unlock>
 8006d72:	42a3      	cmp	r3, r4
 8006d74:	d90b      	bls.n	8006d8e <_free_r+0x4e>
 8006d76:	6821      	ldr	r1, [r4, #0]
 8006d78:	1862      	adds	r2, r4, r1
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	bf04      	itt	eq
 8006d7e:	681a      	ldreq	r2, [r3, #0]
 8006d80:	685b      	ldreq	r3, [r3, #4]
 8006d82:	6063      	str	r3, [r4, #4]
 8006d84:	bf04      	itt	eq
 8006d86:	1852      	addeq	r2, r2, r1
 8006d88:	6022      	streq	r2, [r4, #0]
 8006d8a:	602c      	str	r4, [r5, #0]
 8006d8c:	e7ec      	b.n	8006d68 <_free_r+0x28>
 8006d8e:	461a      	mov	r2, r3
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	b10b      	cbz	r3, 8006d98 <_free_r+0x58>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d9fa      	bls.n	8006d8e <_free_r+0x4e>
 8006d98:	6811      	ldr	r1, [r2, #0]
 8006d9a:	1855      	adds	r5, r2, r1
 8006d9c:	42a5      	cmp	r5, r4
 8006d9e:	d10b      	bne.n	8006db8 <_free_r+0x78>
 8006da0:	6824      	ldr	r4, [r4, #0]
 8006da2:	4421      	add	r1, r4
 8006da4:	1854      	adds	r4, r2, r1
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	6011      	str	r1, [r2, #0]
 8006daa:	d1dd      	bne.n	8006d68 <_free_r+0x28>
 8006dac:	681c      	ldr	r4, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	6053      	str	r3, [r2, #4]
 8006db2:	4421      	add	r1, r4
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	e7d7      	b.n	8006d68 <_free_r+0x28>
 8006db8:	d902      	bls.n	8006dc0 <_free_r+0x80>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	6003      	str	r3, [r0, #0]
 8006dbe:	e7d3      	b.n	8006d68 <_free_r+0x28>
 8006dc0:	6825      	ldr	r5, [r4, #0]
 8006dc2:	1961      	adds	r1, r4, r5
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf04      	itt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	6063      	str	r3, [r4, #4]
 8006dce:	bf04      	itt	eq
 8006dd0:	1949      	addeq	r1, r1, r5
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	6054      	str	r4, [r2, #4]
 8006dd6:	e7c7      	b.n	8006d68 <_free_r+0x28>
 8006dd8:	b003      	add	sp, #12
 8006dda:	bd30      	pop	{r4, r5, pc}
 8006ddc:	20013bd0 	.word	0x20013bd0

08006de0 <_malloc_r>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	1ccd      	adds	r5, r1, #3
 8006de4:	f025 0503 	bic.w	r5, r5, #3
 8006de8:	3508      	adds	r5, #8
 8006dea:	2d0c      	cmp	r5, #12
 8006dec:	bf38      	it	cc
 8006dee:	250c      	movcc	r5, #12
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	4606      	mov	r6, r0
 8006df4:	db01      	blt.n	8006dfa <_malloc_r+0x1a>
 8006df6:	42a9      	cmp	r1, r5
 8006df8:	d903      	bls.n	8006e02 <_malloc_r+0x22>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	2000      	movs	r0, #0
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e02:	f000 f8df 	bl	8006fc4 <__malloc_lock>
 8006e06:	4921      	ldr	r1, [pc, #132]	; (8006e8c <_malloc_r+0xac>)
 8006e08:	680a      	ldr	r2, [r1, #0]
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	b99c      	cbnz	r4, 8006e36 <_malloc_r+0x56>
 8006e0e:	4f20      	ldr	r7, [pc, #128]	; (8006e90 <_malloc_r+0xb0>)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	b923      	cbnz	r3, 8006e1e <_malloc_r+0x3e>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 f83c 	bl	8006e94 <_sbrk_r>
 8006e1c:	6038      	str	r0, [r7, #0]
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4630      	mov	r0, r6
 8006e22:	f000 f837 	bl	8006e94 <_sbrk_r>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d123      	bne.n	8006e72 <_malloc_r+0x92>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f000 f8ce 	bl	8006fd0 <__malloc_unlock>
 8006e34:	e7e3      	b.n	8006dfe <_malloc_r+0x1e>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	1b5b      	subs	r3, r3, r5
 8006e3a:	d417      	bmi.n	8006e6c <_malloc_r+0x8c>
 8006e3c:	2b0b      	cmp	r3, #11
 8006e3e:	d903      	bls.n	8006e48 <_malloc_r+0x68>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	441c      	add	r4, r3
 8006e44:	6025      	str	r5, [r4, #0]
 8006e46:	e004      	b.n	8006e52 <_malloc_r+0x72>
 8006e48:	6863      	ldr	r3, [r4, #4]
 8006e4a:	42a2      	cmp	r2, r4
 8006e4c:	bf0c      	ite	eq
 8006e4e:	600b      	streq	r3, [r1, #0]
 8006e50:	6053      	strne	r3, [r2, #4]
 8006e52:	4630      	mov	r0, r6
 8006e54:	f000 f8bc 	bl	8006fd0 <__malloc_unlock>
 8006e58:	f104 000b 	add.w	r0, r4, #11
 8006e5c:	1d23      	adds	r3, r4, #4
 8006e5e:	f020 0007 	bic.w	r0, r0, #7
 8006e62:	1ac2      	subs	r2, r0, r3
 8006e64:	d0cc      	beq.n	8006e00 <_malloc_r+0x20>
 8006e66:	1a1b      	subs	r3, r3, r0
 8006e68:	50a3      	str	r3, [r4, r2]
 8006e6a:	e7c9      	b.n	8006e00 <_malloc_r+0x20>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	6864      	ldr	r4, [r4, #4]
 8006e70:	e7cc      	b.n	8006e0c <_malloc_r+0x2c>
 8006e72:	1cc4      	adds	r4, r0, #3
 8006e74:	f024 0403 	bic.w	r4, r4, #3
 8006e78:	42a0      	cmp	r0, r4
 8006e7a:	d0e3      	beq.n	8006e44 <_malloc_r+0x64>
 8006e7c:	1a21      	subs	r1, r4, r0
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 f808 	bl	8006e94 <_sbrk_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1dd      	bne.n	8006e44 <_malloc_r+0x64>
 8006e88:	e7cf      	b.n	8006e2a <_malloc_r+0x4a>
 8006e8a:	bf00      	nop
 8006e8c:	20013bd0 	.word	0x20013bd0
 8006e90:	20013bd4 	.word	0x20013bd4

08006e94 <_sbrk_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	; (8006eb0 <_sbrk_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7f9 fe1a 	bl	8000ad8 <_sbrk>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_sbrk_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_sbrk_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20013d5c 	.word	0x20013d5c

08006eb4 <__sread>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	f000 f88e 	bl	8006fdc <_read_r>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	bfab      	itete	ge
 8006ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ec8:	181b      	addge	r3, r3, r0
 8006eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ece:	bfac      	ite	ge
 8006ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ed2:	81a3      	strhlt	r3, [r4, #12]
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <__swrite>:
 8006ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eda:	461f      	mov	r7, r3
 8006edc:	898b      	ldrh	r3, [r1, #12]
 8006ede:	05db      	lsls	r3, r3, #23
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	d505      	bpl.n	8006ef4 <__swrite+0x1e>
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	2302      	movs	r3, #2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f000 f856 	bl	8006fa0 <_lseek_r>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	4632      	mov	r2, r6
 8006f02:	463b      	mov	r3, r7
 8006f04:	4628      	mov	r0, r5
 8006f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	f7ff bb65 	b.w	80065d8 <_write_r>

08006f0e <__sseek>:
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	460c      	mov	r4, r1
 8006f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f16:	f000 f843 	bl	8006fa0 <_lseek_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	bf15      	itete	ne
 8006f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strheq	r3, [r4, #12]
 8006f2c:	bf18      	it	ne
 8006f2e:	81a3      	strhne	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__sclose>:
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 b801 	b.w	8006f3c <_close_r>
	...

08006f3c <_close_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d06      	ldr	r5, [pc, #24]	; (8006f58 <_close_r+0x1c>)
 8006f40:	2300      	movs	r3, #0
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f7f9 fd91 	bl	8000a6e <_close>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_close_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_close_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	20013d5c 	.word	0x20013d5c

08006f5c <_fstat_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_fstat_r+0x20>)
 8006f60:	2300      	movs	r3, #0
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	f7f9 fd8c 	bl	8000a86 <_fstat>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d102      	bne.n	8006f78 <_fstat_r+0x1c>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	b103      	cbz	r3, 8006f78 <_fstat_r+0x1c>
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20013d5c 	.word	0x20013d5c

08006f80 <_isatty_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d06      	ldr	r5, [pc, #24]	; (8006f9c <_isatty_r+0x1c>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	f7f9 fd8b 	bl	8000aa6 <_isatty>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d102      	bne.n	8006f9a <_isatty_r+0x1a>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	b103      	cbz	r3, 8006f9a <_isatty_r+0x1a>
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	20013d5c 	.word	0x20013d5c

08006fa0 <_lseek_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d07      	ldr	r5, [pc, #28]	; (8006fc0 <_lseek_r+0x20>)
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	4608      	mov	r0, r1
 8006fa8:	4611      	mov	r1, r2
 8006faa:	2200      	movs	r2, #0
 8006fac:	602a      	str	r2, [r5, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f7f9 fd84 	bl	8000abc <_lseek>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_lseek_r+0x1e>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_lseek_r+0x1e>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20013d5c 	.word	0x20013d5c

08006fc4 <__malloc_lock>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__malloc_lock+0x8>)
 8006fc6:	f7ff be55 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 8006fca:	bf00      	nop
 8006fcc:	20013d54 	.word	0x20013d54

08006fd0 <__malloc_unlock>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__malloc_unlock+0x8>)
 8006fd2:	f7ff be50 	b.w	8006c76 <__retarget_lock_release_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	20013d54 	.word	0x20013d54

08006fdc <_read_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	; (8006ffc <_read_r+0x20>)
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7f9 fd22 	bl	8000a34 <_read>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_read_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_read_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	20013d5c 	.word	0x20013d5c

08007000 <_init>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	bf00      	nop
 8007004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007006:	bc08      	pop	{r3}
 8007008:	469e      	mov	lr, r3
 800700a:	4770      	bx	lr

0800700c <_fini>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr
