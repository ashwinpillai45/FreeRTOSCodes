
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005108  08005108  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e70  20000078  08005188  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ee8  08005188  00022ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174b6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300e  00000000  00000000  0003755e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0003a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aa6  00000000  00000000  0003c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013280  00000000  00000000  000551ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097636  00000000  00000000  0006844e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffa84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f04  00000000  00000000  000ffad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005014 	.word	0x08005014

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005014 	.word	0x08005014

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fb6d 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f845 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8cd 	bl	8000684 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f8a1 	bl	8000630 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	stat = xTaskCreate(task_handler1, "Task-1", 200, "Hello World from Task-1",
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2302      	movs	r3, #2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0x80>)
 80004f8:	22c8      	movs	r2, #200	; 0xc8
 80004fa:	4918      	ldr	r1, [pc, #96]	; (800055c <main+0x84>)
 80004fc:	4818      	ldr	r0, [pc, #96]	; (8000560 <main+0x88>)
 80004fe:	f002 fac3 	bl	8002a88 <xTaskCreate>
 8000502:	6138      	str	r0, [r7, #16]
			2, task_handle1);
	configASSERT(stat == pdPASS);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d00a      	beq.n	8000520 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800050a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800050e:	f383 8811 	msr	BASEPRI, r3
 8000512:	f3bf 8f6f 	isb	sy
 8000516:	f3bf 8f4f 	dsb	sy
 800051a:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800051c:	bf00      	nop
 800051e:	e7fe      	b.n	800051e <main+0x46>
	stat = xTaskCreate(task_handler2, "Task-2", 200, "Hello World from Task-2",
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2302      	movs	r3, #2
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <main+0x8c>)
 800052a:	22c8      	movs	r2, #200	; 0xc8
 800052c:	490e      	ldr	r1, [pc, #56]	; (8000568 <main+0x90>)
 800052e:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x94>)
 8000530:	f002 faaa 	bl	8002a88 <xTaskCreate>
 8000534:	6138      	str	r0, [r7, #16]
			2, task_handle2);
	configASSERT(stat == pdPASS);
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d00a      	beq.n	8000552 <main+0x7a>
        __asm volatile
 800053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000540:	f383 8811 	msr	BASEPRI, r3
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	f3bf 8f4f 	dsb	sy
 800054c:	607b      	str	r3, [r7, #4]
    }
 800054e:	bf00      	nop
 8000550:	e7fe      	b.n	8000550 <main+0x78>
    vTaskStartScheduler();
 8000552:	f002 fc07 	bl	8002d64 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000556:	e7fe      	b.n	8000556 <main+0x7e>
 8000558:	0800502c 	.word	0x0800502c
 800055c:	08005044 	.word	0x08005044
 8000560:	08000761 	.word	0x08000761
 8000564:	0800504c 	.word	0x0800504c
 8000568:	08005064 	.word	0x08005064
 800056c:	08000785 	.word	0x08000785

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f87a 	bl	8004678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xb8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <SystemClock_Config+0xb8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SystemClock_Config+0xbc>)
 80005be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SystemClock_Config+0xbc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fdab 	bl	8001140 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 f8ec 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f80d 	bl	8001630 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800061c:	f000 f8d6 	bl	80007cc <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000668:	f001 fc90 	bl	8001f8c <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f8ab 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20012e08 	.word	0x20012e08
 8000680:	40004400 	.word	0x40004400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a2c      	ldr	r2, [pc, #176]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <MX_GPIO_Init+0xd4>)
 8000710:	f000 fcfc 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0xd8>)
 800072c:	f000 fb6a 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xd4>)
 8000748:	f000 fb5c 	bl	8000e04 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	40020800 	.word	0x40020800

08000760 <task_handler1>:

/* USER CODE BEGIN 4 */
static void task_handler1(void *para) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("%s\n", (char*) para);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f003 fffb 	bl	8004764 <puts>
		taskYIELD();
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <task_handler1+0x20>)
 8000770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	f3bf 8f4f 	dsb	sy
 800077a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) para);
 800077e:	e7f3      	b.n	8000768 <task_handler1+0x8>
 8000780:	e000ed04 	.word	0xe000ed04

08000784 <task_handler2>:
	}
}

static void task_handler2(void *para) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	while (1) {
		printf("%s\n", (char*) para);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f003 ffe9 	bl	8004764 <puts>
		taskYIELD();
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <task_handler2+0x20>)
 8000794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) para);
 80007a2:	e7f3      	b.n	800078c <task_handler2+0x8>
 80007a4:	e000ed04 	.word	0xe000ed04

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 fa21 	bl	8000c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40000c00 	.word	0x40000c00

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a19      	ldr	r2, [pc, #100]	; (80008ac <HAL_UART_MspInit+0x84>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d12b      	bne.n	80008a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_UART_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000882:	230c      	movs	r3, #12
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800089e:	f000 fab1 	bl	8000e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2032      	movs	r0, #50	; 0x32
 80008ce:	f000 fa6f 	bl	8000db0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80008d2:	2032      	movs	r0, #50	; 0x32
 80008d4:	f000 fa88 	bl	8000de8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_InitTick+0xa4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a1e      	ldr	r2, [pc, #120]	; (800095c <HAL_InitTick+0xa4>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <HAL_InitTick+0xa4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 0210 	add.w	r2, r7, #16
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f892 	bl	8001a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000904:	f001 f868 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8000908:	4603      	mov	r3, r0
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <HAL_InitTick+0xa8>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	0c9b      	lsrs	r3, r3, #18
 8000918:	3b01      	subs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_InitTick+0xac>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <HAL_InitTick+0xb0>)
 8000920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_InitTick+0xac>)
 8000924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000928:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_InitTick+0xac>)
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_InitTick+0xac>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_InitTick+0xac>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <HAL_InitTick+0xac>)
 800093e:	f001 f8a5 	bl	8001a8c <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <HAL_InitTick+0xac>)
 800094a:	f001 f8f9 	bl	8001b40 <HAL_TIM_Base_Start_IT>
 800094e:	4603      	mov	r3, r0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	431bde83 	.word	0x431bde83
 8000964:	20012e4c 	.word	0x20012e4c
 8000968:	40000c00 	.word	0x40000c00

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM5_IRQHandler+0x10>)
 800099e:	f001 f931 	bl	8001c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20012e4c 	.word	0x20012e4c

080009ac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <ITM_SendChar+0x48>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <ITM_SendChar+0x48>)
 80009bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009c0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <ITM_SendChar+0x4c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <ITM_SendChar+0x4c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80009ce:	bf00      	nop
 80009d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f8      	beq.n	80009d0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000edfc 	.word	0xe000edfc
 80009f8:	e0000e00 	.word	0xe0000e00

080009fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a0e:	f3af 8000 	nop.w
 8000a12:	4601      	mov	r1, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf0      	blt.n	8000a0e <_read+0x12>
	}

return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e009      	b.n	8000a5c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffab 	bl	80009ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf1      	blt.n	8000a48 <_write+0x12>
	}
	return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:

int _close(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a96:	605a      	str	r2, [r3, #4]
	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_isatty>:

int _isatty(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f003 fd7e 	bl	8004608 <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <_sbrk+0x64>)
 8000b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20018000 	.word	0x20018000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	20012ee8 	.word	0x20012ee8

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b92:	f7ff ffd7 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f003 fd3d 	bl	8004614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fc9d 	bl	80004d8 <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bac:	08005110 	.word	0x08005110
  ldr r2, =_sbss
 8000bb0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bb4:	20012ee8 	.word	0x20012ee8

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f8d8 	bl	8000d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fe64 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fdf2 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20012e94 	.word	0x20012e94

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20012e94 	.word	0x20012e94

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff4c 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc2:	f7ff ff61 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	6978      	ldr	r0, [r7, #20]
 8000dce:	f7ff ffb1 	bl	8000d34 <NVIC_EncodePriority>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff80 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff54 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e159      	b.n	80010d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8148 	bne.w	80010ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d005      	beq.n	8000e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	69b9      	ldr	r1, [r7, #24]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80a2 	beq.w	80010ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <HAL_GPIO_Init+0x2e8>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a56      	ldr	r2, [pc, #344]	; (80010ec <HAL_GPIO_Init+0x2e8>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <HAL_GPIO_Init+0x2e8>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a52      	ldr	r2, [pc, #328]	; (80010f0 <HAL_GPIO_Init+0x2ec>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d019      	beq.n	8001006 <HAL_GPIO_Init+0x202>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_GPIO_Init+0x2f4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0x1fe>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a47      	ldr	r2, [pc, #284]	; (80010fc <HAL_GPIO_Init+0x2f8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00d      	beq.n	8000ffe <HAL_GPIO_Init+0x1fa>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a46      	ldr	r2, [pc, #280]	; (8001100 <HAL_GPIO_Init+0x2fc>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d007      	beq.n	8000ffa <HAL_GPIO_Init+0x1f6>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_GPIO_Init+0x300>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_GPIO_Init+0x1f2>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x204>
 8001006:	2300      	movs	r3, #0
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x2ec>)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_GPIO_Init+0x304>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104a:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x304>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_GPIO_Init+0x304>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001074:	4a24      	ldr	r2, [pc, #144]	; (8001108 <HAL_GPIO_Init+0x304>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_GPIO_Init+0x304>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	f67f aea2 	bls.w	8000e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e264      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d075      	beq.n	800124a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115e:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b04      	cmp	r3, #4
 8001168:	d00c      	beq.n	8001184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4ba0      	ldr	r3, [pc, #640]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001172:	2b08      	cmp	r3, #8
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001176:	4b9d      	ldr	r3, [pc, #628]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b99      	ldr	r3, [pc, #612]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05b      	beq.n	8001248 <HAL_RCC_OscConfig+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d157      	bne.n	8001248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e23f      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x74>
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a90      	ldr	r2, [pc, #576]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8a      	ldr	r2, [pc, #552]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xb0>
 80011d8:	4b84      	ldr	r3, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a83      	ldr	r2, [pc, #524]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a80      	ldr	r2, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fd16 	bl	8000c28 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fd12 	bl	8000c28 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e204      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xc0>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fd02 	bl	8000c28 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fcfe 	bl	8000c28 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1f0      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0xe8>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1c4      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4952      	ldr	r1, [pc, #328]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff fcb7 	bl	8000c28 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fcb3 	bl	8000c28 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e1a5      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4940      	ldr	r1, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_OscConfig+0x2b0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc96 	bl	8000c28 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc92 	bl	8000c28 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e184      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d016      	beq.n	8001360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fc76 	bl	8000c28 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fc72 	bl	8000c28 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e164      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x200>
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x2b4>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fc5f 	bl	8000c28 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fc5b 	bl	8000c28 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e14d      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 8001382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a0 	beq.w	80014da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d121      	bne.n	800141a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_RCC_OscConfig+0x2b8>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fc21 	bl	8000c28 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e011      	b.n	800140e <HAL_RCC_OscConfig+0x2ce>
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	42470000 	.word	0x42470000
 80013f4:	42470e80 	.word	0x42470e80
 80013f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7ff fc14 	bl	8000c28 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e106      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4e4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x2f0>
 8001422:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a80      	ldr	r2, [pc, #512]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	e01c      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x312>
 8001438:	4b7b      	ldr	r3, [pc, #492]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	4a7a      	ldr	r2, [pc, #488]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6713      	str	r3, [r2, #112]	; 0x70
 8001444:	4b78      	ldr	r3, [pc, #480]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a77      	ldr	r2, [pc, #476]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0x32a>
 8001452:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a74      	ldr	r2, [pc, #464]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	4b72      	ldr	r3, [pc, #456]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	4a71      	ldr	r2, [pc, #452]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fbd9 	bl	8000c28 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fbd5 	bl	8000c28 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0c5      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <HAL_RCC_OscConfig+0x33a>
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbc3 	bl	8000c28 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fbbf 	bl	8000c28 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0af      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ee      	bne.n	80014a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a55      	ldr	r2, [pc, #340]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 809b 	beq.w	800161a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d05c      	beq.n	80015aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d141      	bne.n	800157c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x4ec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb93 	bl	8000c28 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb8f 	bl	8000c28 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e081      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	3b01      	subs	r3, #1
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
 8001548:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x4ec>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb68 	bl	8000c28 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb64 	bl	8000c28 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e056      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x41c>
 800157a:	e04e      	b.n	800161a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_OscConfig+0x4ec>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb51 	bl	8000c28 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb4d 	bl	8000c28 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e03f      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x44a>
 80015a8:	e037      	b.n	800161a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e032      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d028      	beq.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d121      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d11a      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e6:	4013      	ands	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d111      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d107      	bne.n	8001616 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40007000 	.word	0x40007000
 8001628:	40023800 	.word	0x40023800
 800162c:	42470060 	.word	0x42470060

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0cc      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d90c      	bls.n	800166c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800168e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d044      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d119      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e067      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4934      	ldr	r1, [pc, #208]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff fa82 	bl	8000c28 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff fa7e 	bl	8000c28 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e04f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d20c      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f86e 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	08005084 	.word	0x08005084
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d00d      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x40>
 8001820:	2b08      	cmp	r3, #8
 8001822:	f200 80bd 	bhi.w	80019a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x34>
 800182a:	2b04      	cmp	r3, #4
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x3a>
 800182e:	e0b7      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b61      	ldr	r3, [pc, #388]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001832:	60bb      	str	r3, [r7, #8]
       break;
 8001834:	e0b7      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001838:	60bb      	str	r3, [r7, #8]
      break;
 800183a:	e0b4      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183c:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04d      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	461a      	mov	r2, r3
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001862:	f04f 0100 	mov.w	r1, #0
 8001866:	ea02 0800 	and.w	r8, r2, r0
 800186a:	ea03 0901 	and.w	r9, r3, r1
 800186e:	4640      	mov	r0, r8
 8001870:	4649      	mov	r1, r9
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	014b      	lsls	r3, r1, #5
 800187c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001880:	0142      	lsls	r2, r0, #5
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	ebb0 0008 	subs.w	r0, r0, r8
 800188a:	eb61 0109 	sbc.w	r1, r1, r9
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	018b      	lsls	r3, r1, #6
 8001898:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800189c:	0182      	lsls	r2, r0, #6
 800189e:	1a12      	subs	r2, r2, r0
 80018a0:	eb63 0301 	sbc.w	r3, r3, r1
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	00d9      	lsls	r1, r3, #3
 80018ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018b2:	00d0      	lsls	r0, r2, #3
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	eb12 0208 	adds.w	r2, r2, r8
 80018bc:	eb43 0309 	adc.w	r3, r3, r9
 80018c0:	f04f 0000 	mov.w	r0, #0
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	0259      	lsls	r1, r3, #9
 80018ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018ce:	0250      	lsls	r0, r2, #9
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	461a      	mov	r2, r3
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	f7fe fc7e 	bl	80001e0 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e04a      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	461a      	mov	r2, r3
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	ea02 0400 	and.w	r4, r2, r0
 8001906:	ea03 0501 	and.w	r5, r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	014b      	lsls	r3, r1, #5
 8001918:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800191c:	0142      	lsls	r2, r0, #5
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	1b00      	subs	r0, r0, r4
 8001924:	eb61 0105 	sbc.w	r1, r1, r5
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	018b      	lsls	r3, r1, #6
 8001932:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001936:	0182      	lsls	r2, r0, #6
 8001938:	1a12      	subs	r2, r2, r0
 800193a:	eb63 0301 	sbc.w	r3, r3, r1
 800193e:	f04f 0000 	mov.w	r0, #0
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	00d9      	lsls	r1, r3, #3
 8001948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800194c:	00d0      	lsls	r0, r2, #3
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	1912      	adds	r2, r2, r4
 8001954:	eb45 0303 	adc.w	r3, r5, r3
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	0299      	lsls	r1, r3, #10
 8001962:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001966:	0290      	lsls	r0, r2, #10
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	f7fe fc32 	bl	80001e0 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	60bb      	str	r3, [r7, #8]
      break;
 800199e:	e002      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019a2:	60bb      	str	r3, [r7, #8]
      break;
 80019a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a6:	68bb      	ldr	r3, [r7, #8]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200

080019c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08005094 	.word	0x08005094

08001a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a04:	f7ff ffdc 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0b5b      	lsrs	r3, r3, #13
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08005094 	.word	0x08005094

08001a28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	220f      	movs	r2, #15
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_RCC_GetClockConfig+0x60>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0207 	and.w	r2, r3, #7
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e041      	b.n	8001b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f839 	bl	8001b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4610      	mov	r0, r2
 8001acc:	f000 f9ca 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e044      	b.n	8001be2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d018      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b82:	d013      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_TIM_Base_Start_IT+0xbc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_TIM_Base_Start_IT+0x6c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d111      	bne.n	8001bd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d010      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bce:	e007      	b.n	8001be0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40000c00 	.word	0x40000c00
 8001c00:	40014000 	.word	0x40014000

08001c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d122      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d11b      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0202 	mvn.w	r2, #2
 8001c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8ee 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c4c:	e005      	b.n	8001c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8e0 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f1 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d122      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d11b      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0204 	mvn.w	r2, #4
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8c4 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8b6 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8c7 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d122      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d11b      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0208 	mvn.w	r2, #8
 8001cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f89a 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f88c 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f89d 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d122      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d11b      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0210 	mvn.w	r2, #16
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2208      	movs	r2, #8
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f870 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f862 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f873 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0201 	mvn.w	r2, #1
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe fd10 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b80      	cmp	r3, #128	; 0x80
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8e2 	bl	8001f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f838 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0220 	mvn.w	r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ac 	bl	8001f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00f      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d00b      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <TIM_Base_SetConfig+0xe8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a30      	ldr	r2, [pc, #192]	; (8001f50 <TIM_Base_SetConfig+0xec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <TIM_Base_SetConfig+0xf0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d108      	bne.n	8001eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d017      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <TIM_Base_SetConfig+0xe8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <TIM_Base_SetConfig+0xec>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <TIM_Base_SetConfig+0xf0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <TIM_Base_SetConfig+0xf4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <TIM_Base_SetConfig+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <TIM_Base_SetConfig+0xe4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d103      	bne.n	8001f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40000800 	.word	0x40000800
 8001f54:	40000c00 	.word	0x40000c00
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	40014400 	.word	0x40014400
 8001f60:	40014800 	.word	0x40014800

08001f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e03f      	b.n	800201e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fc38 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f829 	bl	8002028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800202c:	b09f      	sub	sp, #124	; 0x7c
 800202e:	af00      	add	r7, sp, #0
 8002030:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	68d9      	ldr	r1, [r3, #12]
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	ea40 0301 	orr.w	r3, r0, r1
 8002048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	431a      	orrs	r2, r3
 8002054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	431a      	orrs	r2, r3
 800205a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4313      	orrs	r3, r2
 8002060:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800206c:	f021 010c 	bic.w	r1, r1, #12
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002076:	430b      	orrs	r3, r1
 8002078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002086:	6999      	ldr	r1, [r3, #24]
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	ea40 0301 	orr.w	r3, r0, r1
 8002090:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4bc5      	ldr	r3, [pc, #788]	; (80023ac <UART_SetConfig+0x384>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d004      	beq.n	80020a6 <UART_SetConfig+0x7e>
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4bc3      	ldr	r3, [pc, #780]	; (80023b0 <UART_SetConfig+0x388>)
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d103      	bne.n	80020ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020a6:	f7ff fcab 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 80020aa:	6778      	str	r0, [r7, #116]	; 0x74
 80020ac:	e002      	b.n	80020b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ae:	f7ff fc93 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 80020b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020bc:	f040 80b6 	bne.w	800222c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c2:	461c      	mov	r4, r3
 80020c4:	f04f 0500 	mov.w	r5, #0
 80020c8:	4622      	mov	r2, r4
 80020ca:	462b      	mov	r3, r5
 80020cc:	1891      	adds	r1, r2, r2
 80020ce:	6439      	str	r1, [r7, #64]	; 0x40
 80020d0:	415b      	adcs	r3, r3
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
 80020d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020d8:	1912      	adds	r2, r2, r4
 80020da:	eb45 0303 	adc.w	r3, r5, r3
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	00d9      	lsls	r1, r3, #3
 80020e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020ec:	00d0      	lsls	r0, r2, #3
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	1911      	adds	r1, r2, r4
 80020f4:	6639      	str	r1, [r7, #96]	; 0x60
 80020f6:	416b      	adcs	r3, r5
 80020f8:	667b      	str	r3, [r7, #100]	; 0x64
 80020fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	461a      	mov	r2, r3
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	1891      	adds	r1, r2, r2
 8002106:	63b9      	str	r1, [r7, #56]	; 0x38
 8002108:	415b      	adcs	r3, r3
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002110:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002114:	f7fe f864 	bl	80001e0 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4ba5      	ldr	r3, [pc, #660]	; (80023b4 <UART_SetConfig+0x38c>)
 800211e:	fba3 2302 	umull	r2, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	011e      	lsls	r6, r3, #4
 8002126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002128:	461c      	mov	r4, r3
 800212a:	f04f 0500 	mov.w	r5, #0
 800212e:	4622      	mov	r2, r4
 8002130:	462b      	mov	r3, r5
 8002132:	1891      	adds	r1, r2, r2
 8002134:	6339      	str	r1, [r7, #48]	; 0x30
 8002136:	415b      	adcs	r3, r3
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
 800213a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800213e:	1912      	adds	r2, r2, r4
 8002140:	eb45 0303 	adc.w	r3, r5, r3
 8002144:	f04f 0000 	mov.w	r0, #0
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	00d9      	lsls	r1, r3, #3
 800214e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002152:	00d0      	lsls	r0, r2, #3
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	1911      	adds	r1, r2, r4
 800215a:	65b9      	str	r1, [r7, #88]	; 0x58
 800215c:	416b      	adcs	r3, r5
 800215e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	461a      	mov	r2, r3
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	1891      	adds	r1, r2, r2
 800216c:	62b9      	str	r1, [r7, #40]	; 0x28
 800216e:	415b      	adcs	r3, r3
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002176:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800217a:	f7fe f831 	bl	80001e0 <__aeabi_uldivmod>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <UART_SetConfig+0x38c>)
 8002184:	fba3 1302 	umull	r1, r3, r3, r2
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	2164      	movs	r1, #100	; 0x64
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	3332      	adds	r3, #50	; 0x32
 8002196:	4a87      	ldr	r2, [pc, #540]	; (80023b4 <UART_SetConfig+0x38c>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021a4:	441e      	add	r6, r3
 80021a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a8:	4618      	mov	r0, r3
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	1894      	adds	r4, r2, r2
 80021b4:	623c      	str	r4, [r7, #32]
 80021b6:	415b      	adcs	r3, r3
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021be:	1812      	adds	r2, r2, r0
 80021c0:	eb41 0303 	adc.w	r3, r1, r3
 80021c4:	f04f 0400 	mov.w	r4, #0
 80021c8:	f04f 0500 	mov.w	r5, #0
 80021cc:	00dd      	lsls	r5, r3, #3
 80021ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021d2:	00d4      	lsls	r4, r2, #3
 80021d4:	4622      	mov	r2, r4
 80021d6:	462b      	mov	r3, r5
 80021d8:	1814      	adds	r4, r2, r0
 80021da:	653c      	str	r4, [r7, #80]	; 0x50
 80021dc:	414b      	adcs	r3, r1
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
 80021e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	1891      	adds	r1, r2, r2
 80021ec:	61b9      	str	r1, [r7, #24]
 80021ee:	415b      	adcs	r3, r3
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021fa:	f7fd fff1 	bl	80001e0 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <UART_SetConfig+0x38c>)
 8002204:	fba3 1302 	umull	r1, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	2164      	movs	r1, #100	; 0x64
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	3332      	adds	r3, #50	; 0x32
 8002216:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <UART_SetConfig+0x38c>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	f003 0207 	and.w	r2, r3, #7
 8002222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4432      	add	r2, r6
 8002228:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800222a:	e0b9      	b.n	80023a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222e:	461c      	mov	r4, r3
 8002230:	f04f 0500 	mov.w	r5, #0
 8002234:	4622      	mov	r2, r4
 8002236:	462b      	mov	r3, r5
 8002238:	1891      	adds	r1, r2, r2
 800223a:	6139      	str	r1, [r7, #16]
 800223c:	415b      	adcs	r3, r3
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002244:	1912      	adds	r2, r2, r4
 8002246:	eb45 0303 	adc.w	r3, r5, r3
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	00d9      	lsls	r1, r3, #3
 8002254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002258:	00d0      	lsls	r0, r2, #3
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	eb12 0804 	adds.w	r8, r2, r4
 8002262:	eb43 0905 	adc.w	r9, r3, r5
 8002266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800227e:	0082      	lsls	r2, r0, #2
 8002280:	4640      	mov	r0, r8
 8002282:	4649      	mov	r1, r9
 8002284:	f7fd ffac 	bl	80001e0 <__aeabi_uldivmod>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <UART_SetConfig+0x38c>)
 800228e:	fba3 2302 	umull	r2, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	011e      	lsls	r6, r3, #4
 8002296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002298:	4618      	mov	r0, r3
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	1894      	adds	r4, r2, r2
 80022a4:	60bc      	str	r4, [r7, #8]
 80022a6:	415b      	adcs	r3, r3
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ae:	1812      	adds	r2, r2, r0
 80022b0:	eb41 0303 	adc.w	r3, r1, r3
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	f04f 0500 	mov.w	r5, #0
 80022bc:	00dd      	lsls	r5, r3, #3
 80022be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022c2:	00d4      	lsls	r4, r2, #3
 80022c4:	4622      	mov	r2, r4
 80022c6:	462b      	mov	r3, r5
 80022c8:	1814      	adds	r4, r2, r0
 80022ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80022cc:	414b      	adcs	r3, r1
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	008b      	lsls	r3, r1, #2
 80022e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022e8:	0082      	lsls	r2, r0, #2
 80022ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022ee:	f7fd ff77 	bl	80001e0 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <UART_SetConfig+0x38c>)
 80022f8:	fba3 1302 	umull	r1, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2164      	movs	r1, #100	; 0x64
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a2a      	ldr	r2, [pc, #168]	; (80023b4 <UART_SetConfig+0x38c>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002316:	441e      	add	r6, r3
 8002318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231a:	4618      	mov	r0, r3
 800231c:	f04f 0100 	mov.w	r1, #0
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	1894      	adds	r4, r2, r2
 8002326:	603c      	str	r4, [r7, #0]
 8002328:	415b      	adcs	r3, r3
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002330:	1812      	adds	r2, r2, r0
 8002332:	eb41 0303 	adc.w	r3, r1, r3
 8002336:	f04f 0400 	mov.w	r4, #0
 800233a:	f04f 0500 	mov.w	r5, #0
 800233e:	00dd      	lsls	r5, r3, #3
 8002340:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002344:	00d4      	lsls	r4, r2, #3
 8002346:	4622      	mov	r2, r4
 8002348:	462b      	mov	r3, r5
 800234a:	eb12 0a00 	adds.w	sl, r2, r0
 800234e:	eb43 0b01 	adc.w	fp, r3, r1
 8002352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	008b      	lsls	r3, r1, #2
 8002366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800236a:	0082      	lsls	r2, r0, #2
 800236c:	4650      	mov	r0, sl
 800236e:	4659      	mov	r1, fp
 8002370:	f7fd ff36 	bl	80001e0 <__aeabi_uldivmod>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <UART_SetConfig+0x38c>)
 800237a:	fba3 1302 	umull	r1, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2164      	movs	r1, #100	; 0x64
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <UART_SetConfig+0x38c>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4432      	add	r2, r6
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	bf00      	nop
 80023a2:	377c      	adds	r7, #124	; 0x7c
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023aa:	bf00      	nop
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40011400 	.word	0x40011400
 80023b4:	51eb851f 	.word	0x51eb851f

080023b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0208 	add.w	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f103 0208 	add.w	r2, r3, #8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0208 	add.w	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d103      	bne.n	8002432 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e00c      	b.n	800244c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3308      	adds	r3, #8
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	e002      	b.n	8002440 <vListInsert+0x2e>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d2f6      	bcs.n	800243a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	601a      	str	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6892      	ldr	r2, [r2, #8]
 800249a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6852      	ldr	r2, [r2, #4]
 80024a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d103      	bne.n	80024b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <xQueueGenericReset+0x2e>
        __asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	60fb      	str	r3, [r7, #12]
    }
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d052      	beq.n	80025b2 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d04e      	beq.n	80025b2 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	2100      	movs	r1, #0
 800251e:	fba3 2302 	umull	r2, r3, r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d000      	beq.n	8002528 <xQueueGenericReset+0x50>
 8002526:	2101      	movs	r1, #1
 8002528:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d141      	bne.n	80025b2 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 800252e:	f001 fd8b 	bl	8004048 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	441a      	add	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	3b01      	subs	r3, #1
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	441a      	add	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	22ff      	movs	r2, #255	; 0xff
 800257a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <xQueueGenericReset+0xc0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00f      	beq.n	80025ac <xQueueGenericReset+0xd4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3310      	adds	r3, #16
 8002590:	4618      	mov	r0, r3
 8002592:	f000 feff 	bl	8003394 <xTaskRemoveFromEventList>
 8002596:	e009      	b.n	80025ac <xQueueGenericReset+0xd4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	3310      	adds	r3, #16
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff0b 	bl	80023b8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	3324      	adds	r3, #36	; 0x24
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff06 	bl	80023b8 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 80025ac:	f001 fd7c 	bl	80040a8 <vPortExitCritical>
 80025b0:	e001      	b.n	80025b6 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <xQueueGenericReset+0xfa>
        __asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	60bb      	str	r3, [r7, #8]
    }
 80025ce:	bf00      	nop
 80025d0:	e7fe      	b.n	80025d0 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025d2:	697b      	ldr	r3, [r7, #20]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02e      	beq.n	8002652 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025f4:	2100      	movs	r1, #0
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	fba3 2302 	umull	r2, r3, r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d000      	beq.n	8002604 <xQueueGenericCreate+0x28>
 8002602:	2101      	movs	r1, #1
 8002604:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d123      	bne.n	8002652 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002612:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002616:	d81c      	bhi.n	8002652 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3350      	adds	r3, #80	; 0x50
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fdf0 	bl	800420c <pvPortMalloc>
 800262c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01c      	beq.n	800266e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3350      	adds	r3, #80	; 0x50
 800263c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800263e:	79fa      	ldrb	r2, [r7, #7]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f814 	bl	8002678 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002650:	e00d      	b.n	800266e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <xQueueGenericCreate+0x92>
        __asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	613b      	str	r3, [r7, #16]
    }
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800266e:	69fb      	ldr	r3, [r7, #28]
    }
 8002670:	4618      	mov	r0, r3
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e002      	b.n	800269a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026a6:	2101      	movs	r1, #1
 80026a8:	69b8      	ldr	r0, [r7, #24]
 80026aa:	f7ff ff15 	bl	80024d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <xQueueReceive+0x30>
        __asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	623b      	str	r3, [r7, #32]
    }
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <xQueueReceive+0x3e>
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <xQueueReceive+0x42>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <xQueueReceive+0x44>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <xQueueReceive+0x5e>
        __asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	61fb      	str	r3, [r7, #28]
    }
 800271a:	bf00      	nop
 800271c:	e7fe      	b.n	800271c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800271e:	f001 f843 	bl	80037a8 <xTaskGetSchedulerState>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <xQueueReceive+0x6e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <xQueueReceive+0x72>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <xQueueReceive+0x74>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <xQueueReceive+0x8e>
        __asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	61bb      	str	r3, [r7, #24]
    }
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800274e:	f001 fc7b 	bl	8004048 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d014      	beq.n	8002788 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002762:	f000 f881 	bl	8002868 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	3310      	adds	r3, #16
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fe0a 	bl	8003394 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002780:	f001 fc92 	bl	80040a8 <vPortExitCritical>
                return pdPASS;
 8002784:	2301      	movs	r3, #1
 8002786:	e069      	b.n	800285c <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800278e:	f001 fc8b 	bl	80040a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002792:	2300      	movs	r3, #0
 8002794:	e062      	b.n	800285c <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fecd 	bl	8003540 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027aa:	f001 fc7d 	bl	80040a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027ae:	f000 fb2b 	bl	8002e08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027b2:	f001 fc49 	bl	8004048 <vPortEnterCritical>
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c2:	d103      	bne.n	80027cc <xQueueReceive+0x10c>
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d103      	bne.n	80027e2 <xQueueReceive+0x122>
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e2:	f001 fc61 	bl	80040a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027e6:	1d3a      	adds	r2, r7, #4
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 febc 	bl	800356c <xTaskCheckForTimeOut>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d123      	bne.n	8002842 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027fc:	f000 f8ac 	bl	8002958 <prvIsQueueEmpty>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	3324      	adds	r3, #36	; 0x24
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd56 	bl	80032c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002816:	f000 f84d 	bl	80028b4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800281a:	f000 fb03 	bl	8002e24 <xTaskResumeAll>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d194      	bne.n	800274e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <xQueueReceive+0x1a4>)
 8002826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	e78b      	b.n	800274e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002838:	f000 f83c 	bl	80028b4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800283c:	f000 faf2 	bl	8002e24 <xTaskResumeAll>
 8002840:	e785      	b.n	800274e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002844:	f000 f836 	bl	80028b4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002848:	f000 faec 	bl	8002e24 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800284c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284e:	f000 f883 	bl	8002958 <prvIsQueueEmpty>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	f43f af7a 	beq.w	800274e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800285a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800285c:	4618      	mov	r0, r3
 800285e:	3730      	adds	r7, #48	; 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	e000ed04 	.word	0xe000ed04

08002868 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d018      	beq.n	80028ac <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	441a      	add	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d303      	bcc.n	800289c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68d9      	ldr	r1, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	461a      	mov	r2, r3
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f001 fed8 	bl	800465c <memcpy>
    }
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028bc:	f001 fbc4 	bl	8004048 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028c8:	e011      	b.n	80028ee <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3324      	adds	r3, #36	; 0x24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fd5c 	bl	8003394 <xTaskRemoveFromEventList>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80028e2:	f000 fea9 	bl	8003638 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	dce9      	bgt.n	80028ca <prvUnlockQueue+0x16>
 80028f6:	e000      	b.n	80028fa <prvUnlockQueue+0x46>
                        break;
 80028f8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002902:	f001 fbd1 	bl	80040a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002906:	f001 fb9f 	bl	8004048 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002910:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002912:	e011      	b.n	8002938 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3310      	adds	r3, #16
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fd37 	bl	8003394 <xTaskRemoveFromEventList>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800292c:	f000 fe84 	bl	8003638 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	3b01      	subs	r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800293c:	2b00      	cmp	r3, #0
 800293e:	dce9      	bgt.n	8002914 <prvUnlockQueue+0x60>
 8002940:	e000      	b.n	8002944 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002942:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800294c:	f001 fbac 	bl	80040a8 <vPortExitCritical>
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002960:	f001 fb72 	bl	8004048 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800296c:	2301      	movs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e001      	b.n	8002976 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002976:	f001 fb97 	bl	80040a8 <vPortExitCritical>

    return xReturn;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <vQueueAddToRegistry+0x26>
        __asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	60fb      	str	r3, [r7, #12]
    }
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d024      	beq.n	80029fe <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e01e      	b.n	80029f8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <vQueueAddToRegistry+0x98>)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d105      	bne.n	80029d6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <vQueueAddToRegistry+0x98>)
 80029d0:	4413      	add	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
                    break;
 80029d4:	e013      	b.n	80029fe <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <vQueueAddToRegistry+0x6e>
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <vQueueAddToRegistry+0x98>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <vQueueAddToRegistry+0x98>)
 80029ee:	4413      	add	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	d9dd      	bls.n	80029ba <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	20012e98 	.word	0x20012e98

08002a20 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a30:	f001 fb0a 	bl	8004048 <vPortEnterCritical>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a40:	d103      	bne.n	8002a4a <vQueueWaitForMessageRestricted+0x2a>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a56:	d103      	bne.n	8002a60 <vQueueWaitForMessageRestricted+0x40>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a60:	f001 fb22 	bl	80040a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3324      	adds	r3, #36	; 0x24
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fc47 	bl	8003308 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff1a 	bl	80028b4 <prvUnlockQueue>
    }
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af04      	add	r7, sp, #16
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fbb5 	bl	800420c <pvPortMalloc>
 8002aa2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00e      	beq.n	8002ac8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002aaa:	2058      	movs	r0, #88	; 0x58
 8002aac:	f001 fbae 	bl	800420c <pvPortMalloc>
 8002ab0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
 8002abe:	e005      	b.n	8002acc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002ac0:	6978      	ldr	r0, [r7, #20]
 8002ac2:	f001 fc83 	bl	80043cc <vPortFree>
 8002ac6:	e001      	b.n	8002acc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d013      	beq.n	8002afa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9303      	str	r3, [sp, #12]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f80e 	bl	8002b0a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002aee:	69f8      	ldr	r0, [r7, #28]
 8002af0:	f000 f8b0 	bl	8002c54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002af4:	2301      	movs	r3, #1
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e002      	b.n	8002b00 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002afe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b00:	69bb      	ldr	r3, [r7, #24]
    }
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b088      	sub	sp, #32
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	461a      	mov	r2, r3
 8002b22:	21a5      	movs	r1, #165	; 0xa5
 8002b24:	f001 fda8 	bl	8004678 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b32:	3b01      	subs	r3, #1
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f023 0307 	bic.w	r3, r3, #7
 8002b40:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	617b      	str	r3, [r7, #20]
    }
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01f      	beq.n	8002ba8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	e012      	b.n	8002b94 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	7819      	ldrb	r1, [r3, #0]
 8002b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3334      	adds	r3, #52	; 0x34
 8002b7e:	460a      	mov	r2, r1
 8002b80:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	d9e9      	bls.n	8002b6e <prvInitialiseNewTask+0x64>
 8002b9a:	e000      	b.n	8002b9e <prvInitialiseNewTask+0x94>
            {
                break;
 8002b9c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ba6:	e003      	b.n	8002bb0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d90a      	bls.n	8002bcc <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	613b      	str	r3, [r7, #16]
    }
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d901      	bls.n	8002bd6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	2200      	movs	r2, #0
 8002be6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	3304      	adds	r3, #4
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fc03 	bl	80023f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fbfe 	bl	80023f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c00:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	f1c3 0205 	rsb	r2, r3, #5
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	3350      	adds	r3, #80	; 0x50
 8002c16:	2204      	movs	r2, #4
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fd2c 	bl	8004678 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	3354      	adds	r3, #84	; 0x54
 8002c24:	2201      	movs	r2, #1
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fd25 	bl	8004678 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	69b8      	ldr	r0, [r7, #24]
 8002c34:	f001 f8da 	bl	8003dec <pxPortInitialiseStack>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c4a:	bf00      	nop
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c5c:	f001 f9f4 	bl	8004048 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <prvAddNewTaskToReadyList+0xf8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3301      	adds	r3, #1
 8002c66:	4a39      	ldr	r2, [pc, #228]	; (8002d4c <prvAddNewTaskToReadyList+0xf8>)
 8002c68:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <prvAddNewTaskToReadyList+0xfc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c72:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <prvAddNewTaskToReadyList+0xfc>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c78:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <prvAddNewTaskToReadyList+0xf8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d110      	bne.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c80:	f000 fcf8 	bl	8003674 <prvInitialiseTaskLists>
 8002c84:	e00d      	b.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <prvAddNewTaskToReadyList+0x100>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c8e:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <prvAddNewTaskToReadyList+0xfc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d802      	bhi.n	8002ca2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c9c:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <prvAddNewTaskToReadyList+0xfc>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <prvAddNewTaskToReadyList+0x104>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <prvAddNewTaskToReadyList+0x104>)
 8002caa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <prvAddNewTaskToReadyList+0x104>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <prvAddNewTaskToReadyList+0x108>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <prvAddNewTaskToReadyList+0x108>)
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4925      	ldr	r1, [pc, #148]	; (8002d60 <prvAddNewTaskToReadyList+0x10c>)
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	3204      	adds	r2, #4
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <prvAddNewTaskToReadyList+0x10c>)
 8002d0a:	441a      	add	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	615a      	str	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	4912      	ldr	r1, [pc, #72]	; (8002d60 <prvAddNewTaskToReadyList+0x10c>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1c59      	adds	r1, r3, #1
 8002d24:	480e      	ldr	r0, [pc, #56]	; (8002d60 <prvAddNewTaskToReadyList+0x10c>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4403      	add	r3, r0
 8002d30:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d32:	f001 f9b9 	bl	80040a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <prvAddNewTaskToReadyList+0x100>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <prvAddNewTaskToReadyList+0xfc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000170 	.word	0x20000170
 8002d50:	20000098 	.word	0x20000098
 8002d54:	2000017c 	.word	0x2000017c
 8002d58:	2000018c 	.word	0x2000018c
 8002d5c:	20000178 	.word	0x20000178
 8002d60:	2000009c 	.word	0x2000009c

08002d64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <vTaskStartScheduler+0x88>)
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2300      	movs	r3, #0
 8002d74:	2282      	movs	r2, #130	; 0x82
 8002d76:	491e      	ldr	r1, [pc, #120]	; (8002df0 <vTaskStartScheduler+0x8c>)
 8002d78:	481e      	ldr	r0, [pc, #120]	; (8002df4 <vTaskStartScheduler+0x90>)
 8002d7a:	f7ff fe85 	bl	8002a88 <xTaskCreate>
 8002d7e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002d86:	f000 fdad 	bl	80038e4 <xTimerCreateTimerTask>
 8002d8a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d116      	bne.n	8002dc0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	60bb      	str	r3, [r7, #8]
    }
 8002da4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <vTaskStartScheduler+0x94>)
 8002da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <vTaskStartScheduler+0x98>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <vTaskStartScheduler+0x9c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002dba:	f001 f8a3 	bl	8003f04 <xPortStartScheduler>
 8002dbe:	e00e      	b.n	8002dde <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc6:	d10a      	bne.n	8002dde <vTaskStartScheduler+0x7a>
        __asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	607b      	str	r3, [r7, #4]
    }
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <vTaskStartScheduler+0xa0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000194 	.word	0x20000194
 8002df0:	0800506c 	.word	0x0800506c
 8002df4:	08003651 	.word	0x08003651
 8002df8:	20000190 	.word	0x20000190
 8002dfc:	2000017c 	.word	0x2000017c
 8002e00:	20000174 	.word	0x20000174
 8002e04:	2000000c 	.word	0x2000000c

08002e08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <vTaskSuspendAll+0x18>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <vTaskSuspendAll+0x18>)
 8002e14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	20000198 	.word	0x20000198

08002e24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e32:	4b6b      	ldr	r3, [pc, #428]	; (8002fe0 <xTaskResumeAll+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <xTaskResumeAll+0x2c>
        __asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	607b      	str	r3, [r7, #4]
    }
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e50:	f001 f8fa 	bl	8004048 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e54:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <xTaskResumeAll+0x1bc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	4a61      	ldr	r2, [pc, #388]	; (8002fe0 <xTaskResumeAll+0x1bc>)
 8002e5c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e5e:	4b60      	ldr	r3, [pc, #384]	; (8002fe0 <xTaskResumeAll+0x1bc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 80b4 	bne.w	8002fd0 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <xTaskResumeAll+0x1c0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80af 	beq.w	8002fd0 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e72:	e08a      	b.n	8002f8a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <xTaskResumeAll+0x1c4>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	6a12      	ldr	r2, [r2, #32]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	69d2      	ldr	r2, [r2, #28]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d103      	bne.n	8002eaa <xTaskResumeAll+0x86>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	68d2      	ldr	r2, [r2, #12]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3304      	adds	r3, #4
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d103      	bne.n	8002ee8 <xTaskResumeAll+0xc4>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1e5a      	subs	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	2201      	movs	r2, #1
 8002efe:	409a      	lsls	r2, r3
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <xTaskResumeAll+0x1c8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	4a39      	ldr	r2, [pc, #228]	; (8002fec <xTaskResumeAll+0x1c8>)
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	4938      	ldr	r1, [pc, #224]	; (8002ff0 <xTaskResumeAll+0x1cc>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	3204      	adds	r2, #4
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	1d1a      	adds	r2, r3, #4
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4a28      	ldr	r2, [pc, #160]	; (8002ff0 <xTaskResumeAll+0x1cc>)
 8002f4e:	441a      	add	r2, r3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4925      	ldr	r1, [pc, #148]	; (8002ff0 <xTaskResumeAll+0x1cc>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	4821      	ldr	r0, [pc, #132]	; (8002ff0 <xTaskResumeAll+0x1cc>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4403      	add	r3, r0
 8002f74:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <xTaskResumeAll+0x1d0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d302      	bcc.n	8002f8a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002f84:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <xTaskResumeAll+0x1d4>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <xTaskResumeAll+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f47f af70 	bne.w	8002e74 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f9a:	f000 fbe9 	bl	8003770 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <xTaskResumeAll+0x1d8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d010      	beq.n	8002fcc <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002faa:	f000 f839 	bl	8003020 <xTaskIncrementTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <xTaskResumeAll+0x1d4>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f1      	bne.n	8002faa <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <xTaskResumeAll+0x1d8>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <xTaskResumeAll+0x1d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002fd0:	f001 f86a 	bl	80040a8 <vPortExitCritical>

    return xAlreadyYielded;
 8002fd4:	697b      	ldr	r3, [r7, #20]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000198 	.word	0x20000198
 8002fe4:	20000170 	.word	0x20000170
 8002fe8:	20000130 	.word	0x20000130
 8002fec:	20000178 	.word	0x20000178
 8002ff0:	2000009c 	.word	0x2000009c
 8002ff4:	20000098 	.word	0x20000098
 8002ff8:	20000184 	.word	0x20000184
 8002ffc:	20000180 	.word	0x20000180

08003000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <xTaskGetTickCount+0x1c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000174 	.word	0x20000174

08003020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302a:	4b6e      	ldr	r3, [pc, #440]	; (80031e4 <xTaskIncrementTick+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 80cd 	bne.w	80031ce <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003034:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <xTaskIncrementTick+0x1c8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800303c:	4a6a      	ldr	r2, [pc, #424]	; (80031e8 <xTaskIncrementTick+0x1c8>)
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d120      	bne.n	800308a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003048:	4b68      	ldr	r3, [pc, #416]	; (80031ec <xTaskIncrementTick+0x1cc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <xTaskIncrementTick+0x48>
        __asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
    }
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <xTaskIncrementTick+0x46>
 8003068:	4b60      	ldr	r3, [pc, #384]	; (80031ec <xTaskIncrementTick+0x1cc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	4b60      	ldr	r3, [pc, #384]	; (80031f0 <xTaskIncrementTick+0x1d0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5e      	ldr	r2, [pc, #376]	; (80031ec <xTaskIncrementTick+0x1cc>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4a5e      	ldr	r2, [pc, #376]	; (80031f0 <xTaskIncrementTick+0x1d0>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b5d      	ldr	r3, [pc, #372]	; (80031f4 <xTaskIncrementTick+0x1d4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a5c      	ldr	r2, [pc, #368]	; (80031f4 <xTaskIncrementTick+0x1d4>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	f000 fb73 	bl	8003770 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800308a:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <xTaskIncrementTick+0x1d8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	429a      	cmp	r2, r3
 8003092:	f0c0 80a1 	bcc.w	80031d8 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003096:	4b55      	ldr	r3, [pc, #340]	; (80031ec <xTaskIncrementTick+0x1cc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a0:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <xTaskIncrementTick+0x1d8>)
 80030a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a6:	601a      	str	r2, [r3, #0]
                    break;
 80030a8:	e096      	b.n	80031d8 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030aa:	4b50      	ldr	r3, [pc, #320]	; (80031ec <xTaskIncrementTick+0x1cc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d203      	bcs.n	80030ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030c2:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <xTaskIncrementTick+0x1d8>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030c8:	e086      	b.n	80031d8 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	3304      	adds	r3, #4
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d103      	bne.n	80030f8 <xTaskIncrementTick+0xd8>
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1e5a      	subs	r2, r3, #1
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01e      	beq.n	800314e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	6a12      	ldr	r2, [r2, #32]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	69d2      	ldr	r2, [r2, #28]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3318      	adds	r3, #24
 8003132:	429a      	cmp	r2, r3
 8003134:	d103      	bne.n	800313e <xTaskIncrementTick+0x11e>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2200      	movs	r2, #0
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	2201      	movs	r2, #1
 8003154:	409a      	lsls	r2, r3
 8003156:	4b29      	ldr	r3, [pc, #164]	; (80031fc <xTaskIncrementTick+0x1dc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <xTaskIncrementTick+0x1dc>)
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	4926      	ldr	r1, [pc, #152]	; (8003200 <xTaskIncrementTick+0x1e0>)
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3304      	adds	r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	3204      	adds	r2, #4
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <xTaskIncrementTick+0x1e0>)
 80031a4:	441a      	add	r2, r3
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	615a      	str	r2, [r3, #20]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4914      	ldr	r1, [pc, #80]	; (8003200 <xTaskIncrementTick+0x1e0>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	1c59      	adds	r1, r3, #1
 80031be:	4810      	ldr	r0, [pc, #64]	; (8003200 <xTaskIncrementTick+0x1e0>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4403      	add	r3, r0
 80031ca:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031cc:	e763      	b.n	8003096 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <xTaskIncrementTick+0x1e4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <xTaskIncrementTick+0x1e4>)
 80031d6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000198 	.word	0x20000198
 80031e8:	20000174 	.word	0x20000174
 80031ec:	20000128 	.word	0x20000128
 80031f0:	2000012c 	.word	0x2000012c
 80031f4:	20000188 	.word	0x20000188
 80031f8:	20000190 	.word	0x20000190
 80031fc:	20000178 	.word	0x20000178
 8003200:	2000009c 	.word	0x2000009c
 8003204:	20000180 	.word	0x20000180

08003208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <vTaskSwitchContext+0xa4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <vTaskSwitchContext+0xa8>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800321c:	e03f      	b.n	800329e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <vTaskSwitchContext+0xa8>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003224:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <vTaskSwitchContext+0xac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003232:	7afb      	ldrb	r3, [r7, #11]
 8003234:	f1c3 031f 	rsb	r3, r3, #31
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	491f      	ldr	r1, [pc, #124]	; (80032b8 <vTaskSwitchContext+0xb0>)
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <vTaskSwitchContext+0x5c>
        __asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	607b      	str	r3, [r7, #4]
    }
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <vTaskSwitchContext+0x5a>
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <vTaskSwitchContext+0xb0>)
 8003270:	4413      	add	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3308      	adds	r3, #8
 8003286:	429a      	cmp	r2, r3
 8003288:	d104      	bne.n	8003294 <vTaskSwitchContext+0x8c>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <vTaskSwitchContext+0xb4>)
 800329c:	6013      	str	r3, [r2, #0]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000198 	.word	0x20000198
 80032b0:	20000184 	.word	0x20000184
 80032b4:	20000178 	.word	0x20000178
 80032b8:	2000009c 	.word	0x2000009c
 80032bc:	20000098 	.word	0x20000098

080032c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	60fb      	str	r3, [r7, #12]
    }
 80032e2:	bf00      	nop
 80032e4:	e7fe      	b.n	80032e4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032e6:	4b07      	ldr	r3, [pc, #28]	; (8003304 <vTaskPlaceOnEventList+0x44>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3318      	adds	r3, #24
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff f88f 	bl	8002412 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032f4:	2101      	movs	r1, #1
 80032f6:	6838      	ldr	r0, [r7, #0]
 80032f8:	f000 fa74 	bl	80037e4 <prvAddCurrentTaskToDelayedList>
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000098 	.word	0x20000098

08003308 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	613b      	str	r3, [r7, #16]
    }
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <vTaskPlaceOnEventListRestricted+0x88>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	61da      	str	r2, [r3, #28]
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <vTaskPlaceOnEventListRestricted+0x88>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	6892      	ldr	r2, [r2, #8]
 8003346:	621a      	str	r2, [r3, #32]
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <vTaskPlaceOnEventListRestricted+0x88>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	3218      	adds	r2, #24
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <vTaskPlaceOnEventListRestricted+0x88>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f103 0218 	add.w	r2, r3, #24
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <vTaskPlaceOnEventListRestricted+0x88>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800337c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	68b8      	ldr	r0, [r7, #8]
 8003382:	f000 fa2f 	bl	80037e4 <prvAddCurrentTaskToDelayedList>
    }
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000098 	.word	0x20000098

08003394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003394:	b480      	push	{r7}
 8003396:	b08b      	sub	sp, #44	; 0x2c
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	60fb      	str	r3, [r7, #12]
    }
 80033bc:	bf00      	nop
 80033be:	e7fe      	b.n	80033be <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	6a12      	ldr	r2, [r2, #32]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	69d2      	ldr	r2, [r2, #28]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	3318      	adds	r3, #24
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d103      	bne.n	80033ee <xTaskRemoveFromEventList+0x5a>
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2200      	movs	r2, #0
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033fe:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <xTaskRemoveFromEventList+0x194>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d15e      	bne.n	80034c4 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	68d2      	ldr	r2, [r2, #12]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	6a3a      	ldr	r2, [r7, #32]
 800341c:	6892      	ldr	r2, [r2, #8]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	3304      	adds	r3, #4
 8003428:	429a      	cmp	r2, r3
 800342a:	d103      	bne.n	8003434 <xTaskRemoveFromEventList+0xa0>
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2200      	movs	r2, #0
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1e5a      	subs	r2, r3, #1
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <xTaskRemoveFromEventList+0x198>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4313      	orrs	r3, r2
 8003452:	4a36      	ldr	r2, [pc, #216]	; (800352c <xTaskRemoveFromEventList+0x198>)
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	4935      	ldr	r1, [pc, #212]	; (8003530 <xTaskRemoveFromEventList+0x19c>)
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3304      	adds	r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	6a3a      	ldr	r2, [r7, #32]
 8003480:	3204      	adds	r2, #4
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4a25      	ldr	r2, [pc, #148]	; (8003530 <xTaskRemoveFromEventList+0x19c>)
 800349a:	441a      	add	r2, r3
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	615a      	str	r2, [r3, #20]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	4922      	ldr	r1, [pc, #136]	; (8003530 <xTaskRemoveFromEventList+0x19c>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1c59      	adds	r1, r3, #1
 80034b4:	481e      	ldr	r0, [pc, #120]	; (8003530 <xTaskRemoveFromEventList+0x19c>)
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4403      	add	r3, r0
 80034c0:	6019      	str	r1, [r3, #0]
 80034c2:	e01b      	b.n	80034fc <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <xTaskRemoveFromEventList+0x1a0>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	61da      	str	r2, [r3, #28]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	621a      	str	r2, [r3, #32]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	3218      	adds	r2, #24
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f103 0218 	add.w	r2, r3, #24
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	4a11      	ldr	r2, [pc, #68]	; (8003534 <xTaskRemoveFromEventList+0x1a0>)
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <xTaskRemoveFromEventList+0x1a0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3301      	adds	r3, #1
 80034f8:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <xTaskRemoveFromEventList+0x1a0>)
 80034fa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <xTaskRemoveFromEventList+0x1a4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	429a      	cmp	r2, r3
 8003508:	d905      	bls.n	8003516 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800350a:	2301      	movs	r3, #1
 800350c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <xTaskRemoveFromEventList+0x1a8>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e001      	b.n	800351a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800351c:	4618      	mov	r0, r3
 800351e:	372c      	adds	r7, #44	; 0x2c
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000198 	.word	0x20000198
 800352c:	20000178 	.word	0x20000178
 8003530:	2000009c 	.word	0x2000009c
 8003534:	20000130 	.word	0x20000130
 8003538:	20000098 	.word	0x20000098
 800353c:	20000184 	.word	0x20000184

08003540 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <vTaskInternalSetTimeOutState+0x24>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <vTaskInternalSetTimeOutState+0x28>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	605a      	str	r2, [r3, #4]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20000188 	.word	0x20000188
 8003568:	20000174 	.word	0x20000174

0800356c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	613b      	str	r3, [r7, #16]
    }
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	60fb      	str	r3, [r7, #12]
    }
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035ae:	f000 fd4b 	bl	8004048 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <xTaskCheckForTimeOut+0xc4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ca:	d102      	bne.n	80035d2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e026      	b.n	8003620 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <xTaskCheckForTimeOut+0xc8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d00a      	beq.n	80035f4 <xTaskCheckForTimeOut+0x88>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d305      	bcc.n	80035f4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e015      	b.n	8003620 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d20b      	bcs.n	8003616 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad2      	subs	r2, r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ff98 	bl	8003540 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	e004      	b.n	8003620 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003620:	f000 fd42 	bl	80040a8 <vPortExitCritical>

    return xReturn;
 8003624:	69fb      	ldr	r3, [r7, #28]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000174 	.word	0x20000174
 8003634:	20000188 	.word	0x20000188

08003638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <vTaskMissedYield+0x14>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000184 	.word	0x20000184

08003650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003658:	f000 f84c 	bl	80036f4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <prvIdleTask+0x20>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800366c:	e7f4      	b.n	8003658 <prvIdleTask+0x8>
 800366e:	bf00      	nop
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e00c      	b.n	800369a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <prvInitialiseTaskLists+0x60>)
 800368c:	4413      	add	r3, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fe92 	bl	80023b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3301      	adds	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d9ef      	bls.n	8003680 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036a0:	480d      	ldr	r0, [pc, #52]	; (80036d8 <prvInitialiseTaskLists+0x64>)
 80036a2:	f7fe fe89 	bl	80023b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036a6:	480d      	ldr	r0, [pc, #52]	; (80036dc <prvInitialiseTaskLists+0x68>)
 80036a8:	f7fe fe86 	bl	80023b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036ac:	480c      	ldr	r0, [pc, #48]	; (80036e0 <prvInitialiseTaskLists+0x6c>)
 80036ae:	f7fe fe83 	bl	80023b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036b2:	480c      	ldr	r0, [pc, #48]	; (80036e4 <prvInitialiseTaskLists+0x70>)
 80036b4:	f7fe fe80 	bl	80023b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036b8:	480b      	ldr	r0, [pc, #44]	; (80036e8 <prvInitialiseTaskLists+0x74>)
 80036ba:	f7fe fe7d 	bl	80023b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <prvInitialiseTaskLists+0x78>)
 80036c0:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <prvInitialiseTaskLists+0x64>)
 80036c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <prvInitialiseTaskLists+0x7c>)
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <prvInitialiseTaskLists+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000009c 	.word	0x2000009c
 80036d8:	20000100 	.word	0x20000100
 80036dc:	20000114 	.word	0x20000114
 80036e0:	20000130 	.word	0x20000130
 80036e4:	20000144 	.word	0x20000144
 80036e8:	2000015c 	.word	0x2000015c
 80036ec:	20000128 	.word	0x20000128
 80036f0:	2000012c 	.word	0x2000012c

080036f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036fa:	e019      	b.n	8003730 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036fc:	f000 fca4 	bl	8004048 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <prvCheckTasksWaitingTermination+0x50>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe feb9 	bl	8002484 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <prvCheckTasksWaitingTermination+0x54>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <prvCheckTasksWaitingTermination+0x54>)
 800371a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <prvCheckTasksWaitingTermination+0x58>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <prvCheckTasksWaitingTermination+0x58>)
 8003724:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003726:	f000 fcbf 	bl	80040a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f810 	bl	8003750 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <prvCheckTasksWaitingTermination+0x58>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e1      	bne.n	80036fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000144 	.word	0x20000144
 8003748:	20000170 	.word	0x20000170
 800374c:	20000158 	.word	0x20000158

08003750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fe35 	bl	80043cc <vPortFree>
                vPortFree( pxTCB );
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fe32 	bl	80043cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvResetNextTaskUnblockTime+0x30>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <prvResetNextTaskUnblockTime+0x34>)
 8003780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003784:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003786:	e005      	b.n	8003794 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <prvResetNextTaskUnblockTime+0x30>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <prvResetNextTaskUnblockTime+0x34>)
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000128 	.word	0x20000128
 80037a4:	20000190 	.word	0x20000190

080037a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <xTaskGetSchedulerState+0x34>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037b6:	2301      	movs	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	e008      	b.n	80037ce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <xTaskGetSchedulerState+0x38>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037c4:	2302      	movs	r3, #2
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	e001      	b.n	80037ce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037ce:	687b      	ldr	r3, [r7, #4]
    }
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	2000017c 	.word	0x2000017c
 80037e0:	20000198 	.word	0x20000198

080037e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fe42 	bl	8002484 <uxListRemove>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003806:	4b31      	ldr	r3, [pc, #196]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	2201      	movs	r2, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4013      	ands	r3, r2
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <prvAddCurrentTaskToDelayedList+0xec>)
 800381c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003824:	d124      	bne.n	8003870 <prvAddCurrentTaskToDelayedList+0x8c>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d021      	beq.n	8003870 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800382c:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	4b26      	ldr	r3, [pc, #152]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	6892      	ldr	r2, [r2, #8]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	3204      	adds	r2, #4
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1d1a      	adds	r2, r3, #4
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003860:	615a      	str	r2, [r3, #20]
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800386e:	e026      	b.n	80038be <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	d209      	bcs.n	800389c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3304      	adds	r3, #4
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f7fe fdbc 	bl	8002412 <vListInsert>
}
 800389a:	e010      	b.n	80038be <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <prvAddCurrentTaskToDelayedList+0xf8>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <prvAddCurrentTaskToDelayedList+0xe8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f7fe fdb2 	bl	8002412 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d202      	bcs.n	80038be <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6013      	str	r3, [r2, #0]
}
 80038be:	bf00      	nop
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000174 	.word	0x20000174
 80038cc:	20000098 	.word	0x20000098
 80038d0:	20000178 	.word	0x20000178
 80038d4:	2000015c 	.word	0x2000015c
 80038d8:	2000012c 	.word	0x2000012c
 80038dc:	20000128 	.word	0x20000128
 80038e0:	20000190 	.word	0x20000190

080038e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80038ee:	f000 fa47 	bl	8003d80 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <xTimerCreateTimerTask+0x54>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <xTimerCreateTimerTask+0x58>)
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	2302      	movs	r3, #2
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003908:	490d      	ldr	r1, [pc, #52]	; (8003940 <xTimerCreateTimerTask+0x5c>)
 800390a:	480e      	ldr	r0, [pc, #56]	; (8003944 <xTimerCreateTimerTask+0x60>)
 800390c:	f7ff f8bc 	bl	8002a88 <xTaskCreate>
 8003910:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	603b      	str	r3, [r7, #0]
    }
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800392e:	687b      	ldr	r3, [r7, #4]
    }
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200001cc 	.word	0x200001cc
 800393c:	200001d0 	.word	0x200001d0
 8003940:	08005074 	.word	0x08005074
 8003944:	080039ed 	.word	0x080039ed

08003948 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003954:	e008      	b.n	8003968 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	4413      	add	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	18d1      	adds	r1, r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f8dd 	bl	8003b34 <prvInsertTimerInActiveList>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ea      	bne.n	8003956 <prvReloadTimer+0xe>
        }
    }
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003996:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <prvProcessExpiredTimer+0x5c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fd6d 	bl	8002484 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff ffc3 	bl	8003948 <prvReloadTimer>
 80039c2:	e008      	b.n	80039d6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	4798      	blx	r3
    }
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200001c4 	.word	0x200001c4

080039ec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039f4:	f107 0308 	add.w	r3, r7, #8
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f857 	bl	8003aac <prvGetNextExpireTime>
 80039fe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4619      	mov	r1, r3
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f803 	bl	8003a10 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a0a:	f000 f8d5 	bl	8003bb8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a0e:	e7f1      	b.n	80039f4 <prvTimerTask+0x8>

08003a10 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a1a:	f7ff f9f5 	bl	8002e08 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f866 	bl	8003af4 <prvSampleTimeNow>
 8003a28:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d130      	bne.n	8003a92 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <prvProcessTimerOrBlockTask+0x3c>
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d806      	bhi.n	8003a4c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a3e:	f7ff f9f1 	bl	8002e24 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ffa1 	bl	800398c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a4a:	e024      	b.n	8003a96 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <prvProcessTimerOrBlockTask+0x90>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <prvProcessTimerOrBlockTask+0x50>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <prvProcessTimerOrBlockTask+0x52>
 8003a60:	2300      	movs	r3, #0
 8003a62:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <prvProcessTimerOrBlockTask+0x94>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7fe ffd5 	bl	8002a20 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a76:	f7ff f9d5 	bl	8002e24 <xTaskResumeAll>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <prvProcessTimerOrBlockTask+0x98>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
    }
 8003a90:	e001      	b.n	8003a96 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a92:	f7ff f9c7 	bl	8002e24 <xTaskResumeAll>
    }
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200001c8 	.word	0x200001c8
 8003aa4:	200001cc 	.word	0x200001cc
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <prvGetNextExpireTime+0x44>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <prvGetNextExpireTime+0x16>
 8003abe:	2201      	movs	r2, #1
 8003ac0:	e000      	b.n	8003ac4 <prvGetNextExpireTime+0x18>
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <prvGetNextExpireTime+0x44>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e001      	b.n	8003ae0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	200001c4 	.word	0x200001c4

08003af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003afc:	f7ff fa80 	bl	8003000 <xTaskGetTickCount>
 8003b00:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <prvSampleTimeNow+0x3c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d205      	bcs.n	8003b18 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003b0c:	f000 f912 	bl	8003d34 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e002      	b.n	8003b1e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b1e:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <prvSampleTimeNow+0x3c>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b24:	68fb      	ldr	r3, [r7, #12]
    }
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200001d4 	.word	0x200001d4

08003b34 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d812      	bhi.n	8003b80 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	1ad2      	subs	r2, r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e01b      	b.n	8003ba6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <prvInsertTimerInActiveList+0x7c>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7fe fc4a 	bl	8002412 <vListInsert>
 8003b7e:	e012      	b.n	8003ba6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d206      	bcs.n	8003b96 <prvInsertTimerInActiveList+0x62>
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d302      	bcc.n	8003b96 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b90:	2301      	movs	r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e007      	b.n	8003ba6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <prvInsertTimerInActiveList+0x80>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7fe fc36 	bl	8002412 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ba6:	697b      	ldr	r3, [r7, #20]
    }
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	200001c8 	.word	0x200001c8
 8003bb4:	200001c4 	.word	0x200001c4

08003bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bbe:	e0a6      	b.n	8003d0e <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f2c0 80a2 	blt.w	8003d0c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fc53 	bl	8002484 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff87 	bl	8003af4 <prvSampleTimeNow>
 8003be6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f200 808e 	bhi.w	8003d0e <prvProcessReceivedCommands+0x156>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <prvProcessReceivedCommands+0x40>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c1d 	.word	0x08003c1d
 8003c00:	08003c85 	.word	0x08003c85
 8003c04:	08003c99 	.word	0x08003c99
 8003c08:	08003ce3 	.word	0x08003ce3
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c1d 	.word	0x08003c1d
 8003c14:	08003c85 	.word	0x08003c85
 8003c18:	08003c99 	.word	0x08003c99
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	18d1      	adds	r1, r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	69f8      	ldr	r0, [r7, #28]
 8003c3c:	f7ff ff7a 	bl	8003b34 <prvInsertTimerInActiveList>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	69f8      	ldr	r0, [r7, #28]
 8003c62:	f7ff fe71 	bl	8003948 <prvReloadTimer>
 8003c66:	e008      	b.n	8003c7a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	69f8      	ldr	r0, [r7, #28]
 8003c80:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c82:	e044      	b.n	8003d0e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c96:	e03a      	b.n	8003d0e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	617b      	str	r3, [r7, #20]
    }
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	18d1      	adds	r1, r2, r3
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	69f8      	ldr	r0, [r7, #28]
 8003cdc:	f7ff ff2a 	bl	8003b34 <prvInsertTimerInActiveList>
                        break;
 8003ce0:	e015      	b.n	8003d0e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003cf0:	69f8      	ldr	r0, [r7, #28]
 8003cf2:	f000 fb6b 	bl	80043cc <vPortFree>
 8003cf6:	e00a      	b.n	8003d0e <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d0a:	e000      	b.n	8003d0e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003d0c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <prvProcessReceivedCommands+0x178>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f107 0108 	add.w	r1, r7, #8
 8003d16:	2200      	movs	r2, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fe fcd1 	bl	80026c0 <xQueueReceive>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f47f af4d 	bne.w	8003bc0 <prvProcessReceivedCommands+0x8>
        }
    }
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	200001cc 	.word	0x200001cc

08003d34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d3a:	e009      	b.n	8003d50 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <prvSwitchTimerLists+0x44>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003d46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d4a:	6838      	ldr	r0, [r7, #0]
 8003d4c:	f7ff fe1e 	bl	800398c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <prvSwitchTimerLists+0x44>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <prvSwitchTimerLists+0x44>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <prvSwitchTimerLists+0x48>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <prvSwitchTimerLists+0x44>)
 8003d66:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d68:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <prvSwitchTimerLists+0x48>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6013      	str	r3, [r2, #0]
    }
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200001c4 	.word	0x200001c4
 8003d7c:	200001c8 	.word	0x200001c8

08003d80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d84:	f000 f960 	bl	8004048 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <prvCheckForValidListAndQueue+0x54>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11d      	bne.n	8003dcc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d90:	4811      	ldr	r0, [pc, #68]	; (8003dd8 <prvCheckForValidListAndQueue+0x58>)
 8003d92:	f7fe fb11 	bl	80023b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d96:	4811      	ldr	r0, [pc, #68]	; (8003ddc <prvCheckForValidListAndQueue+0x5c>)
 8003d98:	f7fe fb0e 	bl	80023b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <prvCheckForValidListAndQueue+0x60>)
 8003d9e:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <prvCheckForValidListAndQueue+0x58>)
 8003da0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <prvCheckForValidListAndQueue+0x64>)
 8003da4:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <prvCheckForValidListAndQueue+0x5c>)
 8003da6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003da8:	2200      	movs	r2, #0
 8003daa:	210c      	movs	r1, #12
 8003dac:	200a      	movs	r0, #10
 8003dae:	f7fe fc15 	bl	80025dc <xQueueGenericCreate>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <prvCheckForValidListAndQueue+0x54>)
 8003db6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <prvCheckForValidListAndQueue+0x54>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <prvCheckForValidListAndQueue+0x54>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4908      	ldr	r1, [pc, #32]	; (8003de8 <prvCheckForValidListAndQueue+0x68>)
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fddc 	bl	8002984 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003dcc:	f000 f96c 	bl	80040a8 <vPortExitCritical>
    }
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200001cc 	.word	0x200001cc
 8003dd8:	2000019c 	.word	0x2000019c
 8003ddc:	200001b0 	.word	0x200001b0
 8003de0:	200001c4 	.word	0x200001c4
 8003de4:	200001c8 	.word	0x200001c8
 8003de8:	0800507c 	.word	0x0800507c

08003dec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b04      	subs	r3, #4
 8003dfc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3b04      	subs	r3, #4
 8003e0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f023 0201 	bic.w	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b04      	subs	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <pxPortInitialiseStack+0x64>)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3b14      	subs	r3, #20
 8003e26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b04      	subs	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f06f 0202 	mvn.w	r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3b20      	subs	r3, #32
 8003e40:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	08003e55 	.word	0x08003e55

08003e54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <prvTaskExitError+0x54>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e66:	d00a      	beq.n	8003e7e <prvTaskExitError+0x2a>
        __asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	60fb      	str	r3, [r7, #12]
    }
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <prvTaskExitError+0x28>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60bb      	str	r3, [r7, #8]
    }
 8003e90:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e92:	bf00      	nop
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0fc      	beq.n	8003e94 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	20000010 	.word	0x20000010
 8003eac:	00000000 	.word	0x00000000

08003eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <pxCurrentTCBConst2>)
 8003eb2:	6819      	ldr	r1, [r3, #0]
 8003eb4:	6808      	ldr	r0, [r1, #0]
 8003eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eba:	f380 8809 	msr	PSP, r0
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f380 8811 	msr	BASEPRI, r0
 8003eca:	4770      	bx	lr
 8003ecc:	f3af 8000 	nop.w

08003ed0 <pxCurrentTCBConst2>:
 8003ed0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop

08003ed8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ed8:	4808      	ldr	r0, [pc, #32]	; (8003efc <prvPortStartFirstTask+0x24>)
 8003eda:	6800      	ldr	r0, [r0, #0]
 8003edc:	6800      	ldr	r0, [r0, #0]
 8003ede:	f380 8808 	msr	MSP, r0
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f380 8814 	msr	CONTROL, r0
 8003eea:	b662      	cpsie	i
 8003eec:	b661      	cpsie	f
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	df00      	svc	0
 8003ef8:	bf00      	nop
 8003efa:	0000      	.short	0x0000
 8003efc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop

08003f04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f0a:	4b46      	ldr	r3, [pc, #280]	; (8004024 <xPortStartScheduler+0x120>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a46      	ldr	r2, [pc, #280]	; (8004028 <xPortStartScheduler+0x124>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10a      	bne.n	8003f2a <xPortStartScheduler+0x26>
        __asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	613b      	str	r3, [r7, #16]
    }
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f2a:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <xPortStartScheduler+0x120>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3f      	ldr	r2, [pc, #252]	; (800402c <xPortStartScheduler+0x128>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d10a      	bne.n	8003f4a <xPortStartScheduler+0x46>
        __asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	60fb      	str	r3, [r7, #12]
    }
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <xPortStartScheduler+0x12c>)
 8003f4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <xPortStartScheduler+0x130>)
 8003f70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f72:	4b31      	ldr	r3, [pc, #196]	; (8004038 <xPortStartScheduler+0x134>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f78:	e009      	b.n	8003f8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <xPortStartScheduler+0x134>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <xPortStartScheduler+0x134>)
 8003f82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b80      	cmp	r3, #128	; 0x80
 8003f98:	d0ef      	beq.n	8003f7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <xPortStartScheduler+0x134>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1c3 0307 	rsb	r3, r3, #7
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d00a      	beq.n	8003fbc <xPortStartScheduler+0xb8>
        __asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60bb      	str	r3, [r7, #8]
    }
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <xPortStartScheduler+0x134>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <xPortStartScheduler+0x134>)
 8003fc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fc6:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <xPortStartScheduler+0x134>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fce:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <xPortStartScheduler+0x134>)
 8003fd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003fda:	4b18      	ldr	r3, [pc, #96]	; (800403c <xPortStartScheduler+0x138>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <xPortStartScheduler+0x138>)
 8003fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <xPortStartScheduler+0x138>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a14      	ldr	r2, [pc, #80]	; (800403c <xPortStartScheduler+0x138>)
 8003fec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ff0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ff2:	f000 f8db 	bl	80041ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <xPortStartScheduler+0x13c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ffc:	f000 f8fa 	bl	80041f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <xPortStartScheduler+0x140>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0f      	ldr	r2, [pc, #60]	; (8004044 <xPortStartScheduler+0x140>)
 8004006:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800400a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800400c:	f7ff ff64 	bl	8003ed8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004010:	f7ff f8fa 	bl	8003208 <vTaskSwitchContext>
    prvTaskExitError();
 8004014:	f7ff ff1e 	bl	8003e54 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00
 8004028:	410fc271 	.word	0x410fc271
 800402c:	410fc270 	.word	0x410fc270
 8004030:	e000e400 	.word	0xe000e400
 8004034:	200001d8 	.word	0x200001d8
 8004038:	200001dc 	.word	0x200001dc
 800403c:	e000ed20 	.word	0xe000ed20
 8004040:	20000010 	.word	0x20000010
 8004044:	e000ef34 	.word	0xe000ef34

08004048 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
        __asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	607b      	str	r3, [r7, #4]
    }
 8004060:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <vPortEnterCritical+0x58>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <vPortEnterCritical+0x58>)
 800406a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <vPortEnterCritical+0x58>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d10f      	bne.n	8004094 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <vPortEnterCritical+0x5c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <vPortEnterCritical+0x4c>
        __asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	603b      	str	r3, [r7, #0]
    }
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <vPortEnterCritical+0x4a>
    }
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20000010 	.word	0x20000010
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <vPortExitCritical+0x50>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <vPortExitCritical+0x24>
        __asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	607b      	str	r3, [r7, #4]
    }
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <vPortExitCritical+0x50>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <vPortExitCritical+0x50>)
 80040d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <vPortExitCritical+0x50>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <vPortExitCritical+0x42>
 80040de:	2300      	movs	r3, #0
 80040e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80040e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000010 	.word	0x20000010
 80040fc:	00000000 	.word	0x00000000

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b15      	ldr	r3, [pc, #84]	; (8004160 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f01e 0f10 	tst.w	lr, #16
 8004110:	bf08      	it	eq
 8004112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	6010      	str	r0, [r2, #0]
 800411c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004124:	f380 8811 	msr	BASEPRI, r0
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f7ff f86a 	bl	8003208 <vTaskSwitchContext>
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f380 8811 	msr	BASEPRI, r0
 800413c:	bc09      	pop	{r0, r3}
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	6808      	ldr	r0, [r1, #0]
 8004142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004146:	f01e 0f10 	tst.w	lr, #16
 800414a:	bf08      	it	eq
 800414c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004150:	f380 8809 	msr	PSP, r0
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst>:
 8004160:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
        __asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
    }
 8004180:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004182:	f7fe ff4d 	bl	8003020 <xTaskIncrementTick>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <SysTick_Handler+0x40>)
 800418e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f383 8811 	msr	BASEPRI, r3
    }
 800419e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <vPortSetupTimerInterrupt+0x34>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <vPortSetupTimerInterrupt+0x38>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <vPortSetupTimerInterrupt+0x3c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <vPortSetupTimerInterrupt+0x40>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <vPortSetupTimerInterrupt+0x44>)
 80041ca:	3b01      	subs	r3, #1
 80041cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <vPortSetupTimerInterrupt+0x34>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e010 	.word	0xe000e010
 80041e4:	e000e018 	.word	0xe000e018
 80041e8:	20000000 	.word	0x20000000
 80041ec:	10624dd3 	.word	0x10624dd3
 80041f0:	e000e014 	.word	0xe000e014

080041f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80041f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004204 <vPortEnableVFP+0x10>
 80041f8:	6801      	ldr	r1, [r0, #0]
 80041fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041fe:	6001      	str	r1, [r0, #0]
 8004200:	4770      	bx	lr
 8004202:	0000      	.short	0x0000
 8004204:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop

0800420c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004218:	f7fe fdf6 	bl	8002e08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800421c:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <pvPortMalloc+0x1a8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004224:	f000 f934 	bl	8004490 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004228:	4b63      	ldr	r3, [pc, #396]	; (80043b8 <pvPortMalloc+0x1ac>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	f040 80a7 	bne.w	8004384 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d02d      	beq.n	8004298 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800423c:	2208      	movs	r2, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d227      	bcs.n	8004298 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004248:	2208      	movs	r2, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d021      	beq.n	800429e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f023 0307 	bic.w	r3, r3, #7
 8004260:	3308      	adds	r3, #8
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d214      	bcs.n	8004292 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	3308      	adds	r3, #8
 8004270:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <pvPortMalloc+0x92>
        __asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	617b      	str	r3, [r7, #20]
    }
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004296:	e002      	b.n	800429e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	e000      	b.n	80042a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800429e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d06e      	beq.n	8004384 <pvPortMalloc+0x178>
 80042a6:	4b45      	ldr	r3, [pc, #276]	; (80043bc <pvPortMalloc+0x1b0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d869      	bhi.n	8004384 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <pvPortMalloc+0x1b4>)
 80042b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042b4:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <pvPortMalloc+0x1b4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042ba:	e004      	b.n	80042c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d903      	bls.n	80042d8 <pvPortMalloc+0xcc>
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f1      	bne.n	80042bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042d8:	4b36      	ldr	r3, [pc, #216]	; (80043b4 <pvPortMalloc+0x1a8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	429a      	cmp	r2, r3
 80042e0:	d050      	beq.n	8004384 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2208      	movs	r2, #8
 80042e8:	4413      	add	r3, r2
 80042ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	2308      	movs	r3, #8
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	429a      	cmp	r2, r3
 8004302:	d91f      	bls.n	8004344 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <pvPortMalloc+0x120>
        __asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	613b      	str	r3, [r7, #16]
    }
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800433e:	69b8      	ldr	r0, [r7, #24]
 8004340:	f000 f908 	bl	8004554 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <pvPortMalloc+0x1b0>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <pvPortMalloc+0x1b0>)
 8004350:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004352:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <pvPortMalloc+0x1b0>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <pvPortMalloc+0x1b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d203      	bcs.n	8004366 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <pvPortMalloc+0x1b0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <pvPortMalloc+0x1b8>)
 8004364:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <pvPortMalloc+0x1ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	431a      	orrs	r2, r3
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <pvPortMalloc+0x1bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3301      	adds	r3, #1
 8004380:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <pvPortMalloc+0x1bc>)
 8004382:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004384:	f7fe fd4e 	bl	8002e24 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <pvPortMalloc+0x19c>
        __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	60fb      	str	r3, [r7, #12]
    }
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80043a8:	69fb      	ldr	r3, [r7, #28]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3728      	adds	r7, #40	; 0x28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20012de8 	.word	0x20012de8
 80043b8:	20012dfc 	.word	0x20012dfc
 80043bc:	20012dec 	.word	0x20012dec
 80043c0:	20012de0 	.word	0x20012de0
 80043c4:	20012df0 	.word	0x20012df0
 80043c8:	20012df4 	.word	0x20012df4

080043cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d04d      	beq.n	800447a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80043de:	2308      	movs	r3, #8
 80043e0:	425b      	negs	r3, r3
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4413      	add	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <vPortFree+0xb8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <vPortFree+0x44>
        __asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60fb      	str	r3, [r7, #12]
    }
 800440c:	bf00      	nop
 800440e:	e7fe      	b.n	800440e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <vPortFree+0x62>
        __asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60bb      	str	r3, [r7, #8]
    }
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <vPortFree+0xb8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01e      	beq.n	800447a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11a      	bne.n	800447a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <vPortFree+0xb8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	43db      	mvns	r3, r3
 800444e:	401a      	ands	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004454:	f7fe fcd8 	bl	8002e08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <vPortFree+0xbc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4413      	add	r3, r2
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <vPortFree+0xbc>)
 8004464:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004466:	6938      	ldr	r0, [r7, #16]
 8004468:	f000 f874 	bl	8004554 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <vPortFree+0xc0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	4a06      	ldr	r2, [pc, #24]	; (800448c <vPortFree+0xc0>)
 8004474:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004476:	f7fe fcd5 	bl	8002e24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20012dfc 	.word	0x20012dfc
 8004488:	20012dec 	.word	0x20012dec
 800448c:	20012df8 	.word	0x20012df8

08004490 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004496:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800449a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <prvHeapInit+0xac>)
 800449e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3307      	adds	r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <prvHeapInit+0xac>)
 80044c0:	4413      	add	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <prvHeapInit+0xb0>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <prvHeapInit+0xb0>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	4413      	add	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80044dc:	2208      	movs	r2, #8
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0307 	bic.w	r3, r3, #7
 80044ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <prvHeapInit+0xb4>)
 80044f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <prvHeapInit+0xb4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2200      	movs	r2, #0
 80044f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <prvHeapInit+0xb4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	1ad2      	subs	r2, r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <prvHeapInit+0xb4>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <prvHeapInit+0xb8>)
 800451e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a09      	ldr	r2, [pc, #36]	; (800454c <prvHeapInit+0xbc>)
 8004526:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <prvHeapInit+0xc0>)
 800452a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800452e:	601a      	str	r2, [r3, #0]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	200001e0 	.word	0x200001e0
 8004540:	20012de0 	.word	0x20012de0
 8004544:	20012de8 	.word	0x20012de8
 8004548:	20012df0 	.word	0x20012df0
 800454c:	20012dec 	.word	0x20012dec
 8004550:	20012dfc 	.word	0x20012dfc

08004554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <prvInsertBlockIntoFreeList+0xac>)
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e002      	b.n	8004568 <prvInsertBlockIntoFreeList+0x14>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d8f7      	bhi.n	8004562 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	429a      	cmp	r2, r3
 8004582:	d108      	bne.n	8004596 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	441a      	add	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d118      	bne.n	80045dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <prvInsertBlockIntoFreeList+0xb0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d00d      	beq.n	80045d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	441a      	add	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e008      	b.n	80045e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <prvInsertBlockIntoFreeList+0xb0>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e003      	b.n	80045e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d002      	beq.n	80045f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20012de0 	.word	0x20012de0
 8004604:	20012de8 	.word	0x20012de8

08004608 <__errno>:
 8004608:	4b01      	ldr	r3, [pc, #4]	; (8004610 <__errno+0x8>)
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000014 	.word	0x20000014

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4d0d      	ldr	r5, [pc, #52]	; (800464c <__libc_init_array+0x38>)
 8004618:	4c0d      	ldr	r4, [pc, #52]	; (8004650 <__libc_init_array+0x3c>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	2600      	movs	r6, #0
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	4d0b      	ldr	r5, [pc, #44]	; (8004654 <__libc_init_array+0x40>)
 8004626:	4c0c      	ldr	r4, [pc, #48]	; (8004658 <__libc_init_array+0x44>)
 8004628:	f000 fcf4 	bl	8005014 <_init>
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	2600      	movs	r6, #0
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	f855 3b04 	ldr.w	r3, [r5], #4
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	f855 3b04 	ldr.w	r3, [r5], #4
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	08005108 	.word	0x08005108
 8004650:	08005108 	.word	0x08005108
 8004654:	08005108 	.word	0x08005108
 8004658:	0800510c 	.word	0x0800510c

0800465c <memcpy>:
 800465c:	440a      	add	r2, r1
 800465e:	4291      	cmp	r1, r2
 8004660:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004664:	d100      	bne.n	8004668 <memcpy+0xc>
 8004666:	4770      	bx	lr
 8004668:	b510      	push	{r4, lr}
 800466a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004672:	4291      	cmp	r1, r2
 8004674:	d1f9      	bne.n	800466a <memcpy+0xe>
 8004676:	bd10      	pop	{r4, pc}

08004678 <memset>:
 8004678:	4402      	add	r2, r0
 800467a:	4603      	mov	r3, r0
 800467c:	4293      	cmp	r3, r2
 800467e:	d100      	bne.n	8004682 <memset+0xa>
 8004680:	4770      	bx	lr
 8004682:	f803 1b01 	strb.w	r1, [r3], #1
 8004686:	e7f9      	b.n	800467c <memset+0x4>

08004688 <_puts_r>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	460e      	mov	r6, r1
 800468c:	4605      	mov	r5, r0
 800468e:	b118      	cbz	r0, 8004698 <_puts_r+0x10>
 8004690:	6983      	ldr	r3, [r0, #24]
 8004692:	b90b      	cbnz	r3, 8004698 <_puts_r+0x10>
 8004694:	f000 fa48 	bl	8004b28 <__sinit>
 8004698:	69ab      	ldr	r3, [r5, #24]
 800469a:	68ac      	ldr	r4, [r5, #8]
 800469c:	b913      	cbnz	r3, 80046a4 <_puts_r+0x1c>
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 fa42 	bl	8004b28 <__sinit>
 80046a4:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <_puts_r+0xd0>)
 80046a6:	429c      	cmp	r4, r3
 80046a8:	d120      	bne.n	80046ec <_puts_r+0x64>
 80046aa:	686c      	ldr	r4, [r5, #4]
 80046ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ae:	07db      	lsls	r3, r3, #31
 80046b0:	d405      	bmi.n	80046be <_puts_r+0x36>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	0598      	lsls	r0, r3, #22
 80046b6:	d402      	bmi.n	80046be <_puts_r+0x36>
 80046b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ba:	f000 fad3 	bl	8004c64 <__retarget_lock_acquire_recursive>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	0719      	lsls	r1, r3, #28
 80046c2:	d51d      	bpl.n	8004700 <_puts_r+0x78>
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	b1db      	cbz	r3, 8004700 <_puts_r+0x78>
 80046c8:	3e01      	subs	r6, #1
 80046ca:	68a3      	ldr	r3, [r4, #8]
 80046cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046d0:	3b01      	subs	r3, #1
 80046d2:	60a3      	str	r3, [r4, #8]
 80046d4:	bb39      	cbnz	r1, 8004726 <_puts_r+0x9e>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da38      	bge.n	800474c <_puts_r+0xc4>
 80046da:	4622      	mov	r2, r4
 80046dc:	210a      	movs	r1, #10
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f848 	bl	8004774 <__swbuf_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d011      	beq.n	800470c <_puts_r+0x84>
 80046e8:	250a      	movs	r5, #10
 80046ea:	e011      	b.n	8004710 <_puts_r+0x88>
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <_puts_r+0xd4>)
 80046ee:	429c      	cmp	r4, r3
 80046f0:	d101      	bne.n	80046f6 <_puts_r+0x6e>
 80046f2:	68ac      	ldr	r4, [r5, #8]
 80046f4:	e7da      	b.n	80046ac <_puts_r+0x24>
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <_puts_r+0xd8>)
 80046f8:	429c      	cmp	r4, r3
 80046fa:	bf08      	it	eq
 80046fc:	68ec      	ldreq	r4, [r5, #12]
 80046fe:	e7d5      	b.n	80046ac <_puts_r+0x24>
 8004700:	4621      	mov	r1, r4
 8004702:	4628      	mov	r0, r5
 8004704:	f000 f888 	bl	8004818 <__swsetup_r>
 8004708:	2800      	cmp	r0, #0
 800470a:	d0dd      	beq.n	80046c8 <_puts_r+0x40>
 800470c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004712:	07da      	lsls	r2, r3, #31
 8004714:	d405      	bmi.n	8004722 <_puts_r+0x9a>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	059b      	lsls	r3, r3, #22
 800471a:	d402      	bmi.n	8004722 <_puts_r+0x9a>
 800471c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471e:	f000 faa2 	bl	8004c66 <__retarget_lock_release_recursive>
 8004722:	4628      	mov	r0, r5
 8004724:	bd70      	pop	{r4, r5, r6, pc}
 8004726:	2b00      	cmp	r3, #0
 8004728:	da04      	bge.n	8004734 <_puts_r+0xac>
 800472a:	69a2      	ldr	r2, [r4, #24]
 800472c:	429a      	cmp	r2, r3
 800472e:	dc06      	bgt.n	800473e <_puts_r+0xb6>
 8004730:	290a      	cmp	r1, #10
 8004732:	d004      	beq.n	800473e <_puts_r+0xb6>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	6022      	str	r2, [r4, #0]
 800473a:	7019      	strb	r1, [r3, #0]
 800473c:	e7c5      	b.n	80046ca <_puts_r+0x42>
 800473e:	4622      	mov	r2, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f000 f817 	bl	8004774 <__swbuf_r>
 8004746:	3001      	adds	r0, #1
 8004748:	d1bf      	bne.n	80046ca <_puts_r+0x42>
 800474a:	e7df      	b.n	800470c <_puts_r+0x84>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	250a      	movs	r5, #10
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	6022      	str	r2, [r4, #0]
 8004754:	701d      	strb	r5, [r3, #0]
 8004756:	e7db      	b.n	8004710 <_puts_r+0x88>
 8004758:	080050c0 	.word	0x080050c0
 800475c:	080050e0 	.word	0x080050e0
 8004760:	080050a0 	.word	0x080050a0

08004764 <puts>:
 8004764:	4b02      	ldr	r3, [pc, #8]	; (8004770 <puts+0xc>)
 8004766:	4601      	mov	r1, r0
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f7ff bf8d 	b.w	8004688 <_puts_r>
 800476e:	bf00      	nop
 8004770:	20000014 	.word	0x20000014

08004774 <__swbuf_r>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	460e      	mov	r6, r1
 8004778:	4614      	mov	r4, r2
 800477a:	4605      	mov	r5, r0
 800477c:	b118      	cbz	r0, 8004786 <__swbuf_r+0x12>
 800477e:	6983      	ldr	r3, [r0, #24]
 8004780:	b90b      	cbnz	r3, 8004786 <__swbuf_r+0x12>
 8004782:	f000 f9d1 	bl	8004b28 <__sinit>
 8004786:	4b21      	ldr	r3, [pc, #132]	; (800480c <__swbuf_r+0x98>)
 8004788:	429c      	cmp	r4, r3
 800478a:	d12b      	bne.n	80047e4 <__swbuf_r+0x70>
 800478c:	686c      	ldr	r4, [r5, #4]
 800478e:	69a3      	ldr	r3, [r4, #24]
 8004790:	60a3      	str	r3, [r4, #8]
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	071a      	lsls	r2, r3, #28
 8004796:	d52f      	bpl.n	80047f8 <__swbuf_r+0x84>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	b36b      	cbz	r3, 80047f8 <__swbuf_r+0x84>
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	6820      	ldr	r0, [r4, #0]
 80047a0:	1ac0      	subs	r0, r0, r3
 80047a2:	6963      	ldr	r3, [r4, #20]
 80047a4:	b2f6      	uxtb	r6, r6
 80047a6:	4283      	cmp	r3, r0
 80047a8:	4637      	mov	r7, r6
 80047aa:	dc04      	bgt.n	80047b6 <__swbuf_r+0x42>
 80047ac:	4621      	mov	r1, r4
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 f926 	bl	8004a00 <_fflush_r>
 80047b4:	bb30      	cbnz	r0, 8004804 <__swbuf_r+0x90>
 80047b6:	68a3      	ldr	r3, [r4, #8]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	60a3      	str	r3, [r4, #8]
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	6022      	str	r2, [r4, #0]
 80047c2:	701e      	strb	r6, [r3, #0]
 80047c4:	6963      	ldr	r3, [r4, #20]
 80047c6:	3001      	adds	r0, #1
 80047c8:	4283      	cmp	r3, r0
 80047ca:	d004      	beq.n	80047d6 <__swbuf_r+0x62>
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	07db      	lsls	r3, r3, #31
 80047d0:	d506      	bpl.n	80047e0 <__swbuf_r+0x6c>
 80047d2:	2e0a      	cmp	r6, #10
 80047d4:	d104      	bne.n	80047e0 <__swbuf_r+0x6c>
 80047d6:	4621      	mov	r1, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	f000 f911 	bl	8004a00 <_fflush_r>
 80047de:	b988      	cbnz	r0, 8004804 <__swbuf_r+0x90>
 80047e0:	4638      	mov	r0, r7
 80047e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <__swbuf_r+0x9c>)
 80047e6:	429c      	cmp	r4, r3
 80047e8:	d101      	bne.n	80047ee <__swbuf_r+0x7a>
 80047ea:	68ac      	ldr	r4, [r5, #8]
 80047ec:	e7cf      	b.n	800478e <__swbuf_r+0x1a>
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <__swbuf_r+0xa0>)
 80047f0:	429c      	cmp	r4, r3
 80047f2:	bf08      	it	eq
 80047f4:	68ec      	ldreq	r4, [r5, #12]
 80047f6:	e7ca      	b.n	800478e <__swbuf_r+0x1a>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 f80c 	bl	8004818 <__swsetup_r>
 8004800:	2800      	cmp	r0, #0
 8004802:	d0cb      	beq.n	800479c <__swbuf_r+0x28>
 8004804:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004808:	e7ea      	b.n	80047e0 <__swbuf_r+0x6c>
 800480a:	bf00      	nop
 800480c:	080050c0 	.word	0x080050c0
 8004810:	080050e0 	.word	0x080050e0
 8004814:	080050a0 	.word	0x080050a0

08004818 <__swsetup_r>:
 8004818:	4b32      	ldr	r3, [pc, #200]	; (80048e4 <__swsetup_r+0xcc>)
 800481a:	b570      	push	{r4, r5, r6, lr}
 800481c:	681d      	ldr	r5, [r3, #0]
 800481e:	4606      	mov	r6, r0
 8004820:	460c      	mov	r4, r1
 8004822:	b125      	cbz	r5, 800482e <__swsetup_r+0x16>
 8004824:	69ab      	ldr	r3, [r5, #24]
 8004826:	b913      	cbnz	r3, 800482e <__swsetup_r+0x16>
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f97d 	bl	8004b28 <__sinit>
 800482e:	4b2e      	ldr	r3, [pc, #184]	; (80048e8 <__swsetup_r+0xd0>)
 8004830:	429c      	cmp	r4, r3
 8004832:	d10f      	bne.n	8004854 <__swsetup_r+0x3c>
 8004834:	686c      	ldr	r4, [r5, #4]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800483c:	0719      	lsls	r1, r3, #28
 800483e:	d42c      	bmi.n	800489a <__swsetup_r+0x82>
 8004840:	06dd      	lsls	r5, r3, #27
 8004842:	d411      	bmi.n	8004868 <__swsetup_r+0x50>
 8004844:	2309      	movs	r3, #9
 8004846:	6033      	str	r3, [r6, #0]
 8004848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004852:	e03e      	b.n	80048d2 <__swsetup_r+0xba>
 8004854:	4b25      	ldr	r3, [pc, #148]	; (80048ec <__swsetup_r+0xd4>)
 8004856:	429c      	cmp	r4, r3
 8004858:	d101      	bne.n	800485e <__swsetup_r+0x46>
 800485a:	68ac      	ldr	r4, [r5, #8]
 800485c:	e7eb      	b.n	8004836 <__swsetup_r+0x1e>
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <__swsetup_r+0xd8>)
 8004860:	429c      	cmp	r4, r3
 8004862:	bf08      	it	eq
 8004864:	68ec      	ldreq	r4, [r5, #12]
 8004866:	e7e6      	b.n	8004836 <__swsetup_r+0x1e>
 8004868:	0758      	lsls	r0, r3, #29
 800486a:	d512      	bpl.n	8004892 <__swsetup_r+0x7a>
 800486c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800486e:	b141      	cbz	r1, 8004882 <__swsetup_r+0x6a>
 8004870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004874:	4299      	cmp	r1, r3
 8004876:	d002      	beq.n	800487e <__swsetup_r+0x66>
 8004878:	4630      	mov	r0, r6
 800487a:	f000 fa59 	bl	8004d30 <_free_r>
 800487e:	2300      	movs	r3, #0
 8004880:	6363      	str	r3, [r4, #52]	; 0x34
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	2300      	movs	r3, #0
 800488c:	6063      	str	r3, [r4, #4]
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	f043 0308 	orr.w	r3, r3, #8
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	b94b      	cbnz	r3, 80048b2 <__swsetup_r+0x9a>
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d003      	beq.n	80048b2 <__swsetup_r+0x9a>
 80048aa:	4621      	mov	r1, r4
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 f9ff 	bl	8004cb0 <__smakebuf_r>
 80048b2:	89a0      	ldrh	r0, [r4, #12]
 80048b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048b8:	f010 0301 	ands.w	r3, r0, #1
 80048bc:	d00a      	beq.n	80048d4 <__swsetup_r+0xbc>
 80048be:	2300      	movs	r3, #0
 80048c0:	60a3      	str	r3, [r4, #8]
 80048c2:	6963      	ldr	r3, [r4, #20]
 80048c4:	425b      	negs	r3, r3
 80048c6:	61a3      	str	r3, [r4, #24]
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	b943      	cbnz	r3, 80048de <__swsetup_r+0xc6>
 80048cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048d0:	d1ba      	bne.n	8004848 <__swsetup_r+0x30>
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	0781      	lsls	r1, r0, #30
 80048d6:	bf58      	it	pl
 80048d8:	6963      	ldrpl	r3, [r4, #20]
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	e7f4      	b.n	80048c8 <__swsetup_r+0xb0>
 80048de:	2000      	movs	r0, #0
 80048e0:	e7f7      	b.n	80048d2 <__swsetup_r+0xba>
 80048e2:	bf00      	nop
 80048e4:	20000014 	.word	0x20000014
 80048e8:	080050c0 	.word	0x080050c0
 80048ec:	080050e0 	.word	0x080050e0
 80048f0:	080050a0 	.word	0x080050a0

080048f4 <__sflush_r>:
 80048f4:	898a      	ldrh	r2, [r1, #12]
 80048f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fa:	4605      	mov	r5, r0
 80048fc:	0710      	lsls	r0, r2, #28
 80048fe:	460c      	mov	r4, r1
 8004900:	d458      	bmi.n	80049b4 <__sflush_r+0xc0>
 8004902:	684b      	ldr	r3, [r1, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	dc05      	bgt.n	8004914 <__sflush_r+0x20>
 8004908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	dc02      	bgt.n	8004914 <__sflush_r+0x20>
 800490e:	2000      	movs	r0, #0
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004916:	2e00      	cmp	r6, #0
 8004918:	d0f9      	beq.n	800490e <__sflush_r+0x1a>
 800491a:	2300      	movs	r3, #0
 800491c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004920:	682f      	ldr	r7, [r5, #0]
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	d032      	beq.n	800498c <__sflush_r+0x98>
 8004926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	075a      	lsls	r2, r3, #29
 800492c:	d505      	bpl.n	800493a <__sflush_r+0x46>
 800492e:	6863      	ldr	r3, [r4, #4]
 8004930:	1ac0      	subs	r0, r0, r3
 8004932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004934:	b10b      	cbz	r3, 800493a <__sflush_r+0x46>
 8004936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004938:	1ac0      	subs	r0, r0, r3
 800493a:	2300      	movs	r3, #0
 800493c:	4602      	mov	r2, r0
 800493e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004940:	6a21      	ldr	r1, [r4, #32]
 8004942:	4628      	mov	r0, r5
 8004944:	47b0      	blx	r6
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	d106      	bne.n	800495a <__sflush_r+0x66>
 800494c:	6829      	ldr	r1, [r5, #0]
 800494e:	291d      	cmp	r1, #29
 8004950:	d82c      	bhi.n	80049ac <__sflush_r+0xb8>
 8004952:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <__sflush_r+0x108>)
 8004954:	40ca      	lsrs	r2, r1
 8004956:	07d6      	lsls	r6, r2, #31
 8004958:	d528      	bpl.n	80049ac <__sflush_r+0xb8>
 800495a:	2200      	movs	r2, #0
 800495c:	6062      	str	r2, [r4, #4]
 800495e:	04d9      	lsls	r1, r3, #19
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	d504      	bpl.n	8004970 <__sflush_r+0x7c>
 8004966:	1c42      	adds	r2, r0, #1
 8004968:	d101      	bne.n	800496e <__sflush_r+0x7a>
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	b903      	cbnz	r3, 8004970 <__sflush_r+0x7c>
 800496e:	6560      	str	r0, [r4, #84]	; 0x54
 8004970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004972:	602f      	str	r7, [r5, #0]
 8004974:	2900      	cmp	r1, #0
 8004976:	d0ca      	beq.n	800490e <__sflush_r+0x1a>
 8004978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800497c:	4299      	cmp	r1, r3
 800497e:	d002      	beq.n	8004986 <__sflush_r+0x92>
 8004980:	4628      	mov	r0, r5
 8004982:	f000 f9d5 	bl	8004d30 <_free_r>
 8004986:	2000      	movs	r0, #0
 8004988:	6360      	str	r0, [r4, #52]	; 0x34
 800498a:	e7c1      	b.n	8004910 <__sflush_r+0x1c>
 800498c:	6a21      	ldr	r1, [r4, #32]
 800498e:	2301      	movs	r3, #1
 8004990:	4628      	mov	r0, r5
 8004992:	47b0      	blx	r6
 8004994:	1c41      	adds	r1, r0, #1
 8004996:	d1c7      	bne.n	8004928 <__sflush_r+0x34>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0c4      	beq.n	8004928 <__sflush_r+0x34>
 800499e:	2b1d      	cmp	r3, #29
 80049a0:	d001      	beq.n	80049a6 <__sflush_r+0xb2>
 80049a2:	2b16      	cmp	r3, #22
 80049a4:	d101      	bne.n	80049aa <__sflush_r+0xb6>
 80049a6:	602f      	str	r7, [r5, #0]
 80049a8:	e7b1      	b.n	800490e <__sflush_r+0x1a>
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	e7ad      	b.n	8004910 <__sflush_r+0x1c>
 80049b4:	690f      	ldr	r7, [r1, #16]
 80049b6:	2f00      	cmp	r7, #0
 80049b8:	d0a9      	beq.n	800490e <__sflush_r+0x1a>
 80049ba:	0793      	lsls	r3, r2, #30
 80049bc:	680e      	ldr	r6, [r1, #0]
 80049be:	bf08      	it	eq
 80049c0:	694b      	ldreq	r3, [r1, #20]
 80049c2:	600f      	str	r7, [r1, #0]
 80049c4:	bf18      	it	ne
 80049c6:	2300      	movne	r3, #0
 80049c8:	eba6 0807 	sub.w	r8, r6, r7
 80049cc:	608b      	str	r3, [r1, #8]
 80049ce:	f1b8 0f00 	cmp.w	r8, #0
 80049d2:	dd9c      	ble.n	800490e <__sflush_r+0x1a>
 80049d4:	6a21      	ldr	r1, [r4, #32]
 80049d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049d8:	4643      	mov	r3, r8
 80049da:	463a      	mov	r2, r7
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	2800      	cmp	r0, #0
 80049e2:	dc06      	bgt.n	80049f2 <__sflush_r+0xfe>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049f0:	e78e      	b.n	8004910 <__sflush_r+0x1c>
 80049f2:	4407      	add	r7, r0
 80049f4:	eba8 0800 	sub.w	r8, r8, r0
 80049f8:	e7e9      	b.n	80049ce <__sflush_r+0xda>
 80049fa:	bf00      	nop
 80049fc:	20400001 	.word	0x20400001

08004a00 <_fflush_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	690b      	ldr	r3, [r1, #16]
 8004a04:	4605      	mov	r5, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	b913      	cbnz	r3, 8004a10 <_fflush_r+0x10>
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	b118      	cbz	r0, 8004a1a <_fflush_r+0x1a>
 8004a12:	6983      	ldr	r3, [r0, #24]
 8004a14:	b90b      	cbnz	r3, 8004a1a <_fflush_r+0x1a>
 8004a16:	f000 f887 	bl	8004b28 <__sinit>
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <_fflush_r+0x6c>)
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	d11b      	bne.n	8004a58 <_fflush_r+0x58>
 8004a20:	686c      	ldr	r4, [r5, #4]
 8004a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0ef      	beq.n	8004a0a <_fflush_r+0xa>
 8004a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a2c:	07d0      	lsls	r0, r2, #31
 8004a2e:	d404      	bmi.n	8004a3a <_fflush_r+0x3a>
 8004a30:	0599      	lsls	r1, r3, #22
 8004a32:	d402      	bmi.n	8004a3a <_fflush_r+0x3a>
 8004a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a36:	f000 f915 	bl	8004c64 <__retarget_lock_acquire_recursive>
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	f7ff ff59 	bl	80048f4 <__sflush_r>
 8004a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a44:	07da      	lsls	r2, r3, #31
 8004a46:	4605      	mov	r5, r0
 8004a48:	d4e0      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	059b      	lsls	r3, r3, #22
 8004a4e:	d4dd      	bmi.n	8004a0c <_fflush_r+0xc>
 8004a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a52:	f000 f908 	bl	8004c66 <__retarget_lock_release_recursive>
 8004a56:	e7d9      	b.n	8004a0c <_fflush_r+0xc>
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <_fflush_r+0x70>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	d101      	bne.n	8004a62 <_fflush_r+0x62>
 8004a5e:	68ac      	ldr	r4, [r5, #8]
 8004a60:	e7df      	b.n	8004a22 <_fflush_r+0x22>
 8004a62:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <_fflush_r+0x74>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	bf08      	it	eq
 8004a68:	68ec      	ldreq	r4, [r5, #12]
 8004a6a:	e7da      	b.n	8004a22 <_fflush_r+0x22>
 8004a6c:	080050c0 	.word	0x080050c0
 8004a70:	080050e0 	.word	0x080050e0
 8004a74:	080050a0 	.word	0x080050a0

08004a78 <std>:
 8004a78:	2300      	movs	r3, #0
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a86:	6083      	str	r3, [r0, #8]
 8004a88:	8181      	strh	r1, [r0, #12]
 8004a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a8c:	81c2      	strh	r2, [r0, #14]
 8004a8e:	6183      	str	r3, [r0, #24]
 8004a90:	4619      	mov	r1, r3
 8004a92:	2208      	movs	r2, #8
 8004a94:	305c      	adds	r0, #92	; 0x5c
 8004a96:	f7ff fdef 	bl	8004678 <memset>
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <std+0x38>)
 8004a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <std+0x3c>)
 8004aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <std+0x40>)
 8004aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <std+0x44>)
 8004aa8:	6224      	str	r4, [r4, #32]
 8004aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	bf00      	nop
 8004ab0:	08004ea5 	.word	0x08004ea5
 8004ab4:	08004ec7 	.word	0x08004ec7
 8004ab8:	08004eff 	.word	0x08004eff
 8004abc:	08004f23 	.word	0x08004f23

08004ac0 <_cleanup_r>:
 8004ac0:	4901      	ldr	r1, [pc, #4]	; (8004ac8 <_cleanup_r+0x8>)
 8004ac2:	f000 b8af 	b.w	8004c24 <_fwalk_reent>
 8004ac6:	bf00      	nop
 8004ac8:	08004a01 	.word	0x08004a01

08004acc <__sfmoreglue>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	1e4a      	subs	r2, r1, #1
 8004ad0:	2568      	movs	r5, #104	; 0x68
 8004ad2:	4355      	muls	r5, r2
 8004ad4:	460e      	mov	r6, r1
 8004ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ada:	f000 f979 	bl	8004dd0 <_malloc_r>
 8004ade:	4604      	mov	r4, r0
 8004ae0:	b140      	cbz	r0, 8004af4 <__sfmoreglue+0x28>
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ae8:	300c      	adds	r0, #12
 8004aea:	60a0      	str	r0, [r4, #8]
 8004aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004af0:	f7ff fdc2 	bl	8004678 <memset>
 8004af4:	4620      	mov	r0, r4
 8004af6:	bd70      	pop	{r4, r5, r6, pc}

08004af8 <__sfp_lock_acquire>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <__sfp_lock_acquire+0x8>)
 8004afa:	f000 b8b3 	b.w	8004c64 <__retarget_lock_acquire_recursive>
 8004afe:	bf00      	nop
 8004b00:	20012ee0 	.word	0x20012ee0

08004b04 <__sfp_lock_release>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__sfp_lock_release+0x8>)
 8004b06:	f000 b8ae 	b.w	8004c66 <__retarget_lock_release_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	20012ee0 	.word	0x20012ee0

08004b10 <__sinit_lock_acquire>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__sinit_lock_acquire+0x8>)
 8004b12:	f000 b8a7 	b.w	8004c64 <__retarget_lock_acquire_recursive>
 8004b16:	bf00      	nop
 8004b18:	20012edb 	.word	0x20012edb

08004b1c <__sinit_lock_release>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <__sinit_lock_release+0x8>)
 8004b1e:	f000 b8a2 	b.w	8004c66 <__retarget_lock_release_recursive>
 8004b22:	bf00      	nop
 8004b24:	20012edb 	.word	0x20012edb

08004b28 <__sinit>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	f7ff fff0 	bl	8004b10 <__sinit_lock_acquire>
 8004b30:	69a3      	ldr	r3, [r4, #24]
 8004b32:	b11b      	cbz	r3, 8004b3c <__sinit+0x14>
 8004b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b38:	f7ff bff0 	b.w	8004b1c <__sinit_lock_release>
 8004b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b40:	6523      	str	r3, [r4, #80]	; 0x50
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <__sinit+0x68>)
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <__sinit+0x6c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	bf04      	itt	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	61a3      	streq	r3, [r4, #24]
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 f820 	bl	8004b98 <__sfp>
 8004b58:	6060      	str	r0, [r4, #4]
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 f81c 	bl	8004b98 <__sfp>
 8004b60:	60a0      	str	r0, [r4, #8]
 8004b62:	4620      	mov	r0, r4
 8004b64:	f000 f818 	bl	8004b98 <__sfp>
 8004b68:	2200      	movs	r2, #0
 8004b6a:	60e0      	str	r0, [r4, #12]
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	6860      	ldr	r0, [r4, #4]
 8004b70:	f7ff ff82 	bl	8004a78 <std>
 8004b74:	68a0      	ldr	r0, [r4, #8]
 8004b76:	2201      	movs	r2, #1
 8004b78:	2109      	movs	r1, #9
 8004b7a:	f7ff ff7d 	bl	8004a78 <std>
 8004b7e:	68e0      	ldr	r0, [r4, #12]
 8004b80:	2202      	movs	r2, #2
 8004b82:	2112      	movs	r1, #18
 8004b84:	f7ff ff78 	bl	8004a78 <std>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	61a3      	str	r3, [r4, #24]
 8004b8c:	e7d2      	b.n	8004b34 <__sinit+0xc>
 8004b8e:	bf00      	nop
 8004b90:	0800509c 	.word	0x0800509c
 8004b94:	08004ac1 	.word	0x08004ac1

08004b98 <__sfp>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	4607      	mov	r7, r0
 8004b9c:	f7ff ffac 	bl	8004af8 <__sfp_lock_acquire>
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <__sfp+0x84>)
 8004ba2:	681e      	ldr	r6, [r3, #0]
 8004ba4:	69b3      	ldr	r3, [r6, #24]
 8004ba6:	b913      	cbnz	r3, 8004bae <__sfp+0x16>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7ff ffbd 	bl	8004b28 <__sinit>
 8004bae:	3648      	adds	r6, #72	; 0x48
 8004bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	d503      	bpl.n	8004bc0 <__sfp+0x28>
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	b30b      	cbz	r3, 8004c00 <__sfp+0x68>
 8004bbc:	6836      	ldr	r6, [r6, #0]
 8004bbe:	e7f7      	b.n	8004bb0 <__sfp+0x18>
 8004bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bc4:	b9d5      	cbnz	r5, 8004bfc <__sfp+0x64>
 8004bc6:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <__sfp+0x88>)
 8004bc8:	60e3      	str	r3, [r4, #12]
 8004bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bce:	6665      	str	r5, [r4, #100]	; 0x64
 8004bd0:	f000 f847 	bl	8004c62 <__retarget_lock_init_recursive>
 8004bd4:	f7ff ff96 	bl	8004b04 <__sfp_lock_release>
 8004bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004be0:	6025      	str	r5, [r4, #0]
 8004be2:	61a5      	str	r5, [r4, #24]
 8004be4:	2208      	movs	r2, #8
 8004be6:	4629      	mov	r1, r5
 8004be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bec:	f7ff fd44 	bl	8004678 <memset>
 8004bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfc:	3468      	adds	r4, #104	; 0x68
 8004bfe:	e7d9      	b.n	8004bb4 <__sfp+0x1c>
 8004c00:	2104      	movs	r1, #4
 8004c02:	4638      	mov	r0, r7
 8004c04:	f7ff ff62 	bl	8004acc <__sfmoreglue>
 8004c08:	4604      	mov	r4, r0
 8004c0a:	6030      	str	r0, [r6, #0]
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d1d5      	bne.n	8004bbc <__sfp+0x24>
 8004c10:	f7ff ff78 	bl	8004b04 <__sfp_lock_release>
 8004c14:	230c      	movs	r3, #12
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	e7ee      	b.n	8004bf8 <__sfp+0x60>
 8004c1a:	bf00      	nop
 8004c1c:	0800509c 	.word	0x0800509c
 8004c20:	ffff0001 	.word	0xffff0001

08004c24 <_fwalk_reent>:
 8004c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c28:	4606      	mov	r6, r0
 8004c2a:	4688      	mov	r8, r1
 8004c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c30:	2700      	movs	r7, #0
 8004c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c36:	f1b9 0901 	subs.w	r9, r9, #1
 8004c3a:	d505      	bpl.n	8004c48 <_fwalk_reent+0x24>
 8004c3c:	6824      	ldr	r4, [r4, #0]
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	d1f7      	bne.n	8004c32 <_fwalk_reent+0xe>
 8004c42:	4638      	mov	r0, r7
 8004c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c48:	89ab      	ldrh	r3, [r5, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d907      	bls.n	8004c5e <_fwalk_reent+0x3a>
 8004c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c52:	3301      	adds	r3, #1
 8004c54:	d003      	beq.n	8004c5e <_fwalk_reent+0x3a>
 8004c56:	4629      	mov	r1, r5
 8004c58:	4630      	mov	r0, r6
 8004c5a:	47c0      	blx	r8
 8004c5c:	4307      	orrs	r7, r0
 8004c5e:	3568      	adds	r5, #104	; 0x68
 8004c60:	e7e9      	b.n	8004c36 <_fwalk_reent+0x12>

08004c62 <__retarget_lock_init_recursive>:
 8004c62:	4770      	bx	lr

08004c64 <__retarget_lock_acquire_recursive>:
 8004c64:	4770      	bx	lr

08004c66 <__retarget_lock_release_recursive>:
 8004c66:	4770      	bx	lr

08004c68 <__swhatbuf_r>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	460e      	mov	r6, r1
 8004c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c70:	2900      	cmp	r1, #0
 8004c72:	b096      	sub	sp, #88	; 0x58
 8004c74:	4614      	mov	r4, r2
 8004c76:	461d      	mov	r5, r3
 8004c78:	da07      	bge.n	8004c8a <__swhatbuf_r+0x22>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	89b3      	ldrh	r3, [r6, #12]
 8004c80:	061a      	lsls	r2, r3, #24
 8004c82:	d410      	bmi.n	8004ca6 <__swhatbuf_r+0x3e>
 8004c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c88:	e00e      	b.n	8004ca8 <__swhatbuf_r+0x40>
 8004c8a:	466a      	mov	r2, sp
 8004c8c:	f000 f970 	bl	8004f70 <_fstat_r>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	dbf2      	blt.n	8004c7a <__swhatbuf_r+0x12>
 8004c94:	9a01      	ldr	r2, [sp, #4]
 8004c96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c9e:	425a      	negs	r2, r3
 8004ca0:	415a      	adcs	r2, r3
 8004ca2:	602a      	str	r2, [r5, #0]
 8004ca4:	e7ee      	b.n	8004c84 <__swhatbuf_r+0x1c>
 8004ca6:	2340      	movs	r3, #64	; 0x40
 8004ca8:	2000      	movs	r0, #0
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	b016      	add	sp, #88	; 0x58
 8004cae:	bd70      	pop	{r4, r5, r6, pc}

08004cb0 <__smakebuf_r>:
 8004cb0:	898b      	ldrh	r3, [r1, #12]
 8004cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cb4:	079d      	lsls	r5, r3, #30
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	d507      	bpl.n	8004ccc <__smakebuf_r+0x1c>
 8004cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	6123      	str	r3, [r4, #16]
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	6163      	str	r3, [r4, #20]
 8004cc8:	b002      	add	sp, #8
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	ab01      	add	r3, sp, #4
 8004cce:	466a      	mov	r2, sp
 8004cd0:	f7ff ffca 	bl	8004c68 <__swhatbuf_r>
 8004cd4:	9900      	ldr	r1, [sp, #0]
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f000 f879 	bl	8004dd0 <_malloc_r>
 8004cde:	b948      	cbnz	r0, 8004cf4 <__smakebuf_r+0x44>
 8004ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce4:	059a      	lsls	r2, r3, #22
 8004ce6:	d4ef      	bmi.n	8004cc8 <__smakebuf_r+0x18>
 8004ce8:	f023 0303 	bic.w	r3, r3, #3
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e7e3      	b.n	8004cbc <__smakebuf_r+0xc>
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <__smakebuf_r+0x7c>)
 8004cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	6020      	str	r0, [r4, #0]
 8004cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	9b00      	ldr	r3, [sp, #0]
 8004d04:	6163      	str	r3, [r4, #20]
 8004d06:	9b01      	ldr	r3, [sp, #4]
 8004d08:	6120      	str	r0, [r4, #16]
 8004d0a:	b15b      	cbz	r3, 8004d24 <__smakebuf_r+0x74>
 8004d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 f93f 	bl	8004f94 <_isatty_r>
 8004d16:	b128      	cbz	r0, 8004d24 <__smakebuf_r+0x74>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	81a3      	strh	r3, [r4, #12]
 8004d24:	89a0      	ldrh	r0, [r4, #12]
 8004d26:	4305      	orrs	r5, r0
 8004d28:	81a5      	strh	r5, [r4, #12]
 8004d2a:	e7cd      	b.n	8004cc8 <__smakebuf_r+0x18>
 8004d2c:	08004ac1 	.word	0x08004ac1

08004d30 <_free_r>:
 8004d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d32:	2900      	cmp	r1, #0
 8004d34:	d048      	beq.n	8004dc8 <_free_r+0x98>
 8004d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3a:	9001      	str	r0, [sp, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d42:	bfb8      	it	lt
 8004d44:	18e4      	addlt	r4, r4, r3
 8004d46:	f000 f947 	bl	8004fd8 <__malloc_lock>
 8004d4a:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <_free_r+0x9c>)
 8004d4c:	9801      	ldr	r0, [sp, #4]
 8004d4e:	6813      	ldr	r3, [r2, #0]
 8004d50:	4615      	mov	r5, r2
 8004d52:	b933      	cbnz	r3, 8004d62 <_free_r+0x32>
 8004d54:	6063      	str	r3, [r4, #4]
 8004d56:	6014      	str	r4, [r2, #0]
 8004d58:	b003      	add	sp, #12
 8004d5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d5e:	f000 b941 	b.w	8004fe4 <__malloc_unlock>
 8004d62:	42a3      	cmp	r3, r4
 8004d64:	d90b      	bls.n	8004d7e <_free_r+0x4e>
 8004d66:	6821      	ldr	r1, [r4, #0]
 8004d68:	1862      	adds	r2, r4, r1
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bf04      	itt	eq
 8004d6e:	681a      	ldreq	r2, [r3, #0]
 8004d70:	685b      	ldreq	r3, [r3, #4]
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	bf04      	itt	eq
 8004d76:	1852      	addeq	r2, r2, r1
 8004d78:	6022      	streq	r2, [r4, #0]
 8004d7a:	602c      	str	r4, [r5, #0]
 8004d7c:	e7ec      	b.n	8004d58 <_free_r+0x28>
 8004d7e:	461a      	mov	r2, r3
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b10b      	cbz	r3, 8004d88 <_free_r+0x58>
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	d9fa      	bls.n	8004d7e <_free_r+0x4e>
 8004d88:	6811      	ldr	r1, [r2, #0]
 8004d8a:	1855      	adds	r5, r2, r1
 8004d8c:	42a5      	cmp	r5, r4
 8004d8e:	d10b      	bne.n	8004da8 <_free_r+0x78>
 8004d90:	6824      	ldr	r4, [r4, #0]
 8004d92:	4421      	add	r1, r4
 8004d94:	1854      	adds	r4, r2, r1
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	6011      	str	r1, [r2, #0]
 8004d9a:	d1dd      	bne.n	8004d58 <_free_r+0x28>
 8004d9c:	681c      	ldr	r4, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	6053      	str	r3, [r2, #4]
 8004da2:	4421      	add	r1, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	e7d7      	b.n	8004d58 <_free_r+0x28>
 8004da8:	d902      	bls.n	8004db0 <_free_r+0x80>
 8004daa:	230c      	movs	r3, #12
 8004dac:	6003      	str	r3, [r0, #0]
 8004dae:	e7d3      	b.n	8004d58 <_free_r+0x28>
 8004db0:	6825      	ldr	r5, [r4, #0]
 8004db2:	1961      	adds	r1, r4, r5
 8004db4:	428b      	cmp	r3, r1
 8004db6:	bf04      	itt	eq
 8004db8:	6819      	ldreq	r1, [r3, #0]
 8004dba:	685b      	ldreq	r3, [r3, #4]
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	bf04      	itt	eq
 8004dc0:	1949      	addeq	r1, r1, r5
 8004dc2:	6021      	streq	r1, [r4, #0]
 8004dc4:	6054      	str	r4, [r2, #4]
 8004dc6:	e7c7      	b.n	8004d58 <_free_r+0x28>
 8004dc8:	b003      	add	sp, #12
 8004dca:	bd30      	pop	{r4, r5, pc}
 8004dcc:	20012e00 	.word	0x20012e00

08004dd0 <_malloc_r>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	1ccd      	adds	r5, r1, #3
 8004dd4:	f025 0503 	bic.w	r5, r5, #3
 8004dd8:	3508      	adds	r5, #8
 8004dda:	2d0c      	cmp	r5, #12
 8004ddc:	bf38      	it	cc
 8004dde:	250c      	movcc	r5, #12
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	4606      	mov	r6, r0
 8004de4:	db01      	blt.n	8004dea <_malloc_r+0x1a>
 8004de6:	42a9      	cmp	r1, r5
 8004de8:	d903      	bls.n	8004df2 <_malloc_r+0x22>
 8004dea:	230c      	movs	r3, #12
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	2000      	movs	r0, #0
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df2:	f000 f8f1 	bl	8004fd8 <__malloc_lock>
 8004df6:	4921      	ldr	r1, [pc, #132]	; (8004e7c <_malloc_r+0xac>)
 8004df8:	680a      	ldr	r2, [r1, #0]
 8004dfa:	4614      	mov	r4, r2
 8004dfc:	b99c      	cbnz	r4, 8004e26 <_malloc_r+0x56>
 8004dfe:	4f20      	ldr	r7, [pc, #128]	; (8004e80 <_malloc_r+0xb0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	b923      	cbnz	r3, 8004e0e <_malloc_r+0x3e>
 8004e04:	4621      	mov	r1, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f83c 	bl	8004e84 <_sbrk_r>
 8004e0c:	6038      	str	r0, [r7, #0]
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4630      	mov	r0, r6
 8004e12:	f000 f837 	bl	8004e84 <_sbrk_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d123      	bne.n	8004e62 <_malloc_r+0x92>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 f8e0 	bl	8004fe4 <__malloc_unlock>
 8004e24:	e7e3      	b.n	8004dee <_malloc_r+0x1e>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	1b5b      	subs	r3, r3, r5
 8004e2a:	d417      	bmi.n	8004e5c <_malloc_r+0x8c>
 8004e2c:	2b0b      	cmp	r3, #11
 8004e2e:	d903      	bls.n	8004e38 <_malloc_r+0x68>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	441c      	add	r4, r3
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	e004      	b.n	8004e42 <_malloc_r+0x72>
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	42a2      	cmp	r2, r4
 8004e3c:	bf0c      	ite	eq
 8004e3e:	600b      	streq	r3, [r1, #0]
 8004e40:	6053      	strne	r3, [r2, #4]
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 f8ce 	bl	8004fe4 <__malloc_unlock>
 8004e48:	f104 000b 	add.w	r0, r4, #11
 8004e4c:	1d23      	adds	r3, r4, #4
 8004e4e:	f020 0007 	bic.w	r0, r0, #7
 8004e52:	1ac2      	subs	r2, r0, r3
 8004e54:	d0cc      	beq.n	8004df0 <_malloc_r+0x20>
 8004e56:	1a1b      	subs	r3, r3, r0
 8004e58:	50a3      	str	r3, [r4, r2]
 8004e5a:	e7c9      	b.n	8004df0 <_malloc_r+0x20>
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	6864      	ldr	r4, [r4, #4]
 8004e60:	e7cc      	b.n	8004dfc <_malloc_r+0x2c>
 8004e62:	1cc4      	adds	r4, r0, #3
 8004e64:	f024 0403 	bic.w	r4, r4, #3
 8004e68:	42a0      	cmp	r0, r4
 8004e6a:	d0e3      	beq.n	8004e34 <_malloc_r+0x64>
 8004e6c:	1a21      	subs	r1, r4, r0
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f808 	bl	8004e84 <_sbrk_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d1dd      	bne.n	8004e34 <_malloc_r+0x64>
 8004e78:	e7cf      	b.n	8004e1a <_malloc_r+0x4a>
 8004e7a:	bf00      	nop
 8004e7c:	20012e00 	.word	0x20012e00
 8004e80:	20012e04 	.word	0x20012e04

08004e84 <_sbrk_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	; (8004ea0 <_sbrk_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fb fe22 	bl	8000ad8 <_sbrk>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_sbrk_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_sbrk_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	20012ee4 	.word	0x20012ee4

08004ea4 <__sread>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eac:	f000 f8a0 	bl	8004ff0 <_read_r>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	bfab      	itete	ge
 8004eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004eb8:	181b      	addge	r3, r3, r0
 8004eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ebe:	bfac      	ite	ge
 8004ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ec2:	81a3      	strhlt	r3, [r4, #12]
 8004ec4:	bd10      	pop	{r4, pc}

08004ec6 <__swrite>:
 8004ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eca:	461f      	mov	r7, r3
 8004ecc:	898b      	ldrh	r3, [r1, #12]
 8004ece:	05db      	lsls	r3, r3, #23
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	d505      	bpl.n	8004ee4 <__swrite+0x1e>
 8004ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004edc:	2302      	movs	r3, #2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f000 f868 	bl	8004fb4 <_lseek_r>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004efa:	f000 b817 	b.w	8004f2c <_write_r>

08004efe <__sseek>:
 8004efe:	b510      	push	{r4, lr}
 8004f00:	460c      	mov	r4, r1
 8004f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f06:	f000 f855 	bl	8004fb4 <_lseek_r>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	bf15      	itete	ne
 8004f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f1a:	81a3      	strheq	r3, [r4, #12]
 8004f1c:	bf18      	it	ne
 8004f1e:	81a3      	strhne	r3, [r4, #12]
 8004f20:	bd10      	pop	{r4, pc}

08004f22 <__sclose>:
 8004f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f26:	f000 b813 	b.w	8004f50 <_close_r>
	...

08004f2c <_write_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d07      	ldr	r5, [pc, #28]	; (8004f4c <_write_r+0x20>)
 8004f30:	4604      	mov	r4, r0
 8004f32:	4608      	mov	r0, r1
 8004f34:	4611      	mov	r1, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	602a      	str	r2, [r5, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7fb fd7b 	bl	8000a36 <_write>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_write_r+0x1e>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_write_r+0x1e>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	20012ee4 	.word	0x20012ee4

08004f50 <_close_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d06      	ldr	r5, [pc, #24]	; (8004f6c <_close_r+0x1c>)
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	f7fb fd87 	bl	8000a6e <_close>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_close_r+0x1a>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_close_r+0x1a>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	20012ee4 	.word	0x20012ee4

08004f70 <_fstat_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d07      	ldr	r5, [pc, #28]	; (8004f90 <_fstat_r+0x20>)
 8004f74:	2300      	movs	r3, #0
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	f7fb fd82 	bl	8000a86 <_fstat>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	d102      	bne.n	8004f8c <_fstat_r+0x1c>
 8004f86:	682b      	ldr	r3, [r5, #0]
 8004f88:	b103      	cbz	r3, 8004f8c <_fstat_r+0x1c>
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	bd38      	pop	{r3, r4, r5, pc}
 8004f8e:	bf00      	nop
 8004f90:	20012ee4 	.word	0x20012ee4

08004f94 <_isatty_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4d06      	ldr	r5, [pc, #24]	; (8004fb0 <_isatty_r+0x1c>)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	f7fb fd81 	bl	8000aa6 <_isatty>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_isatty_r+0x1a>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_isatty_r+0x1a>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20012ee4 	.word	0x20012ee4

08004fb4 <_lseek_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	; (8004fd4 <_lseek_r+0x20>)
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fb fd7a 	bl	8000abc <_lseek>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_lseek_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_lseek_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20012ee4 	.word	0x20012ee4

08004fd8 <__malloc_lock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__malloc_lock+0x8>)
 8004fda:	f7ff be43 	b.w	8004c64 <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	20012edc 	.word	0x20012edc

08004fe4 <__malloc_unlock>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__malloc_unlock+0x8>)
 8004fe6:	f7ff be3e 	b.w	8004c66 <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	20012edc 	.word	0x20012edc

08004ff0 <_read_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4d07      	ldr	r5, [pc, #28]	; (8005010 <_read_r+0x20>)
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	602a      	str	r2, [r5, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7fb fcfc 	bl	80009fc <_read>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_read_r+0x1e>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_read_r+0x1e>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20012ee4 	.word	0x20012ee4

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
