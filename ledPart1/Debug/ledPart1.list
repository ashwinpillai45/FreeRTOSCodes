
ledPart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013cb4  20000078  08007e18  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013d2c  08007e18  00023d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b52d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003824  00000000  00000000  0003b5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  000401e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017476  00000000  00000000  00041428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015538  00000000  00000000  0005889e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b3a4  00000000  00000000  0006ddd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010917a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  001091d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b8c 	.word	0x08007b8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007b8c 	.word	0x08007b8c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013c18 	.word	0x20013c18
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f103 0208 	add.w	r2, r3, #8
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000630:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f103 0208 	add.w	r2, r3, #8
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f103 0208 	add.w	r2, r3, #8
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006ba:	b480      	push	{r7}
 80006bc:	b085      	sub	sp, #20
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006d0:	d103      	bne.n	80006da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	e00c      	b.n	80006f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3308      	adds	r3, #8
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	e002      	b.n	80006e8 <vListInsert+0x2e>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d2f6      	bcs.n	80006e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	6892      	ldr	r2, [r2, #8]
 8000742:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	6852      	ldr	r2, [r2, #4]
 800074c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	d103      	bne.n	8000760 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10a      	bne.n	80007ae <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007aa:	bf00      	nop
 80007ac:	e7fe      	b.n	80007ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d05d      	beq.n	8000870 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d059      	beq.n	8000870 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007c4:	2100      	movs	r1, #0
 80007c6:	fba3 2302 	umull	r2, r3, r3, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d000      	beq.n	80007d0 <xQueueGenericReset+0x50>
 80007ce:	2101      	movs	r1, #1
 80007d0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14c      	bne.n	8000870 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80007d6:	f002 f9ad 	bl	8002b34 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e2:	6939      	ldr	r1, [r7, #16]
 80007e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007e6:	fb01 f303 	mul.w	r3, r1, r3
 80007ea:	441a      	add	r2, r3
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	2200      	movs	r2, #0
 80007f4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000806:	3b01      	subs	r3, #1
 8000808:	6939      	ldr	r1, [r7, #16]
 800080a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800080c:	fb01 f303 	mul.w	r3, r1, r3
 8000810:	441a      	add	r2, r3
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	22ff      	movs	r2, #255	; 0xff
 800081a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	22ff      	movs	r2, #255	; 0xff
 8000822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d114      	bne.n	8000856 <xQueueGenericReset+0xd6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d01a      	beq.n	800086a <xQueueGenericReset+0xea>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	3310      	adds	r3, #16
 8000838:	4618      	mov	r0, r3
 800083a:	f001 f897 	bl	800196c <xTaskRemoveFromEventList>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d012      	beq.n	800086a <xQueueGenericReset+0xea>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <xQueueGenericReset+0x11c>)
 8000846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	e009      	b.n	800086a <xQueueGenericReset+0xea>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	3310      	adds	r3, #16
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fedc 	bl	8000618 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3324      	adds	r3, #36	; 0x24
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fed7 	bl	8000618 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 800086a:	f002 f993 	bl	8002b94 <vPortExitCritical>
 800086e:	e001      	b.n	8000874 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10a      	bne.n	8000890 <xQueueGenericReset+0x110>
        __asm volatile
 800087a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087e:	f383 8811 	msr	BASEPRI, r3
 8000882:	f3bf 8f6f 	isb	sy
 8000886:	f3bf 8f4f 	dsb	sy
 800088a:	60bb      	str	r3, [r7, #8]
    }
 800088c:	bf00      	nop
 800088e:	e7fe      	b.n	800088e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000890:	697b      	ldr	r3, [r7, #20]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000ed04 	.word	0xe000ed04

080008a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	4613      	mov	r3, r2
 80008ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d02e      	beq.n	8000916 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008b8:	2100      	movs	r1, #0
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	fba3 2302 	umull	r2, r3, r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d000      	beq.n	80008c8 <xQueueGenericCreate+0x28>
 80008c6:	2101      	movs	r1, #1
 80008c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d123      	bne.n	8000916 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008d6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80008da:	d81c      	bhi.n	8000916 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	fb02 f303 	mul.w	r3, r2, r3
 80008e4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	3350      	adds	r3, #80	; 0x50
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fa4e 	bl	8002d8c <pvPortMalloc>
 80008f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d01c      	beq.n	8000932 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3350      	adds	r3, #80	; 0x50
 8000900:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4613      	mov	r3, r2
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	f000 f814 	bl	800093c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000914:	e00d      	b.n	8000932 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10a      	bne.n	8000932 <xQueueGenericCreate+0x92>
        __asm volatile
 800091c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000920:	f383 8811 	msr	BASEPRI, r3
 8000924:	f3bf 8f6f 	isb	sy
 8000928:	f3bf 8f4f 	dsb	sy
 800092c:	613b      	str	r3, [r7, #16]
    }
 800092e:	bf00      	nop
 8000930:	e7fe      	b.n	8000930 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000932:	69fb      	ldr	r3, [r7, #28]
    }
 8000934:	4618      	mov	r0, r3
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e002      	b.n	800095e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800096a:	2101      	movs	r1, #1
 800096c:	69b8      	ldr	r0, [r7, #24]
 800096e:	f7ff ff07 	bl	8000780 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	78fa      	ldrb	r2, [r7, #3]
 8000976:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800097a:	78fb      	ldrb	r3, [r7, #3]
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	68f9      	ldr	r1, [r7, #12]
 8000980:	2073      	movs	r0, #115	; 0x73
 8000982:	f003 fc09 	bl	8004198 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b08f      	sub	sp, #60	; 0x3c
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10a      	bne.n	80009c0 <xQueueReceive+0x30>
        __asm volatile
 80009aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ae:	f383 8811 	msr	BASEPRI, r3
 80009b2:	f3bf 8f6f 	isb	sy
 80009b6:	f3bf 8f4f 	dsb	sy
 80009ba:	623b      	str	r3, [r7, #32]
    }
 80009bc:	bf00      	nop
 80009be:	e7fe      	b.n	80009be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <xQueueReceive+0x3e>
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d101      	bne.n	80009d2 <xQueueReceive+0x42>
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <xQueueReceive+0x44>
 80009d2:	2300      	movs	r3, #0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10a      	bne.n	80009ee <xQueueReceive+0x5e>
        __asm volatile
 80009d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009dc:	f383 8811 	msr	BASEPRI, r3
 80009e0:	f3bf 8f6f 	isb	sy
 80009e4:	f3bf 8f4f 	dsb	sy
 80009e8:	61fb      	str	r3, [r7, #28]
    }
 80009ea:	bf00      	nop
 80009ec:	e7fe      	b.n	80009ec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009ee:	f001 f9cf 	bl	8001d90 <xTaskGetSchedulerState>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <xQueueReceive+0x6e>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <xQueueReceive+0x72>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <xQueueReceive+0x74>
 8000a02:	2300      	movs	r3, #0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10a      	bne.n	8000a1e <xQueueReceive+0x8e>
        __asm volatile
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	61bb      	str	r3, [r7, #24]
    }
 8000a1a:	bf00      	nop
 8000a1c:	e7fe      	b.n	8000a1c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a1e:	f002 f889 	bl	8002b34 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d02f      	beq.n	8000a8e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a32:	f000 f8bd 	bl	8000bb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 f9e7 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8000a3e:	4604      	mov	r4, r0
 8000a40:	2000      	movs	r0, #0
 8000a42:	f004 f9e3 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8000a46:	4602      	mov	r2, r0
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	9100      	str	r1, [sp, #0]
 8000a4e:	4621      	mov	r1, r4
 8000a50:	205c      	movs	r0, #92	; 0x5c
 8000a52:	f003 fc17 	bl	8004284 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00f      	beq.n	8000a86 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	3310      	adds	r3, #16
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 ff7e 	bl	800196c <xTaskRemoveFromEventList>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d007      	beq.n	8000a86 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a76:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <xQueueReceive+0x21c>)
 8000a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	f3bf 8f4f 	dsb	sy
 8000a82:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000a86:	f002 f885 	bl	8002b94 <vPortExitCritical>
                return pdPASS;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e08a      	b.n	8000ba4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d113      	bne.n	8000abc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a94:	f002 f87e 	bl	8002b94 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 f9b6 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f004 f9b2 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2101      	movs	r1, #1
 8000aae:	9100      	str	r1, [sp, #0]
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	205c      	movs	r0, #92	; 0x5c
 8000ab4:	f003 fbe6 	bl	8004284 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e073      	b.n	8000ba4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d106      	bne.n	8000ad0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f828 	bl	8001b1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000ad0:	f002 f860 	bl	8002b94 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ad4:	f000 fc2a 	bl	800132c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ad8:	f002 f82c 	bl	8002b34 <vPortEnterCritical>
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ae8:	d103      	bne.n	8000af2 <xQueueReceive+0x162>
 8000aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000afe:	d103      	bne.n	8000b08 <xQueueReceive+0x178>
 8000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b08:	f002 f844 	bl	8002b94 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b0c:	1d3a      	adds	r2, r7, #4
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 f817 	bl	8001b48 <xTaskCheckForTimeOut>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d124      	bne.n	8000b6a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b22:	f000 f8bd 	bl	8000ca0 <prvIsQueueEmpty>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d018      	beq.n	8000b5e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	3324      	adds	r3, #36	; 0x24
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fead 	bl	8001894 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b3c:	f000 f85e 	bl	8000bfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000b40:	f000 fc02 	bl	8001348 <xTaskResumeAll>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f af69 	bne.w	8000a1e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <xQueueReceive+0x21c>)
 8000b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	e75f      	b.n	8000a1e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b60:	f000 f84c 	bl	8000bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b64:	f000 fbf0 	bl	8001348 <xTaskResumeAll>
 8000b68:	e759      	b.n	8000a1e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b6c:	f000 f846 	bl	8000bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b70:	f000 fbea 	bl	8001348 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b76:	f000 f893 	bl	8000ca0 <prvIsQueueEmpty>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f43f af4e 	beq.w	8000a1e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 f941 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f004 f93d 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8000b92:	4602      	mov	r2, r0
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2101      	movs	r1, #1
 8000b98:	9100      	str	r1, [sp, #0]
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	205c      	movs	r0, #92	; 0x5c
 8000b9e:	f003 fb71 	bl	8004284 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000ba2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3734      	adds	r7, #52	; 0x34
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	e000ed04 	.word	0xe000ed04

08000bb0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d018      	beq.n	8000bf4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	441a      	add	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d303      	bcc.n	8000be4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68d9      	ldr	r1, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	461a      	mov	r2, r3
 8000bee:	6838      	ldr	r0, [r7, #0]
 8000bf0:	f006 f872 	bl	8006cd8 <memcpy>
    }
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000c04:	f001 ff96 	bl	8002b34 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c10:	e011      	b.n	8000c36 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d012      	beq.n	8000c40 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3324      	adds	r3, #36	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fea4 	bl	800196c <xTaskRemoveFromEventList>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000c2a:	f000 fff3 	bl	8001c14 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dce9      	bgt.n	8000c12 <prvUnlockQueue+0x16>
 8000c3e:	e000      	b.n	8000c42 <prvUnlockQueue+0x46>
                        break;
 8000c40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	22ff      	movs	r2, #255	; 0xff
 8000c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000c4a:	f001 ffa3 	bl	8002b94 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000c4e:	f001 ff71 	bl	8002b34 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c5a:	e011      	b.n	8000c80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d012      	beq.n	8000c8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3310      	adds	r3, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fe7f 	bl	800196c <xTaskRemoveFromEventList>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000c74:	f000 ffce 	bl	8001c14 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dce9      	bgt.n	8000c5c <prvUnlockQueue+0x60>
 8000c88:	e000      	b.n	8000c8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000c8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000c94:	f001 ff7e 	bl	8002b94 <vPortExitCritical>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ca8:	f001 ff44 	bl	8002b34 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e001      	b.n	8000cbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000cbe:	f001 ff69 	bl	8002b94 <vPortExitCritical>

    return xReturn;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10a      	bne.n	8000cf2 <vQueueAddToRegistry+0x26>
        __asm volatile
 8000cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	f3bf 8f6f 	isb	sy
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	60fb      	str	r3, [r7, #12]
    }
 8000cee:	bf00      	nop
 8000cf0:	e7fe      	b.n	8000cf0 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d024      	beq.n	8000d46 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e01e      	b.n	8000d40 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000d02:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <vQueueAddToRegistry+0xa8>)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4413      	add	r3, r2
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d105      	bne.n	8000d1e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <vQueueAddToRegistry+0xa8>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
                    break;
 8000d1c:	e013      	b.n	8000d46 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10a      	bne.n	8000d3a <vQueueAddToRegistry+0x6e>
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <vQueueAddToRegistry+0xa8>)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d104      	bne.n	8000d3a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <vQueueAddToRegistry+0xa8>)
 8000d36:	4413      	add	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	2b07      	cmp	r3, #7
 8000d44:	d9dd      	bls.n	8000d02 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00f      	beq.n	8000d6c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 f856 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8000d60:	4601      	mov	r1, r0
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	2071      	movs	r0, #113	; 0x71
 8000d68:	f003 f9bc 	bl	80040e4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20013bd8 	.word	0x20013bd8

08000d78 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000d88:	f001 fed4 	bl	8002b34 <vPortEnterCritical>
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d98:	d103      	bne.n	8000da2 <vQueueWaitForMessageRestricted+0x2a>
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dae:	d103      	bne.n	8000db8 <vQueueWaitForMessageRestricted+0x40>
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000db8:	f001 feec 	bl	8002b94 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d106      	bne.n	8000dd2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3324      	adds	r3, #36	; 0x24
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fd85 	bl	80018dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff12 	bl	8000bfc <prvUnlockQueue>
    }
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	4613      	mov	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 ffc9 	bl	8002d8c <pvPortMalloc>
 8000dfa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00e      	beq.n	8000e20 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e02:	2058      	movs	r0, #88	; 0x58
 8000e04:	f001 ffc2 	bl	8002d8c <pvPortMalloc>
 8000e08:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	631a      	str	r2, [r3, #48]	; 0x30
 8000e16:	e005      	b.n	8000e24 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000e18:	6978      	ldr	r0, [r7, #20]
 8000e1a:	f002 f897 	bl	8002f4c <vPortFree>
 8000e1e:	e001      	b.n	8000e24 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d013      	beq.n	8000e52 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	9303      	str	r3, [sp, #12]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f000 f80e 	bl	8000e62 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000e46:	69f8      	ldr	r0, [r7, #28]
 8000e48:	f000 f8b0 	bl	8000fac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	e002      	b.n	8000e58 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000e58:	69bb      	ldr	r3, [r7, #24]
    }
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b088      	sub	sp, #32
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	21a5      	movs	r1, #165	; 0xa5
 8000e7c:	f005 ff3a 	bl	8006cf4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f023 0307 	bic.w	r3, r3, #7
 8000e98:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00a      	beq.n	8000eba <prvInitialiseNewTask+0x58>
        __asm volatile
 8000ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea8:	f383 8811 	msr	BASEPRI, r3
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	f3bf 8f4f 	dsb	sy
 8000eb4:	617b      	str	r3, [r7, #20]
    }
 8000eb6:	bf00      	nop
 8000eb8:	e7fe      	b.n	8000eb8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d01f      	beq.n	8000f00 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	e012      	b.n	8000eec <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	4413      	add	r3, r2
 8000ecc:	7819      	ldrb	r1, [r3, #0]
 8000ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3334      	adds	r3, #52	; 0x34
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2b09      	cmp	r3, #9
 8000ef0:	d9e9      	bls.n	8000ec6 <prvInitialiseNewTask+0x64>
 8000ef2:	e000      	b.n	8000ef6 <prvInitialiseNewTask+0x94>
            {
                break;
 8000ef4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000efe:	e003      	b.n	8000f08 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d90a      	bls.n	8000f24 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8000f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	f3bf 8f6f 	isb	sy
 8000f1a:	f3bf 8f4f 	dsb	sy
 8000f1e:	613b      	str	r3, [r7, #16]
    }
 8000f20:	bf00      	nop
 8000f22:	e7fe      	b.n	8000f22 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d901      	bls.n	8000f2e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f38:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f42:	3304      	adds	r3, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fb87 	bl	8000658 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb82 	bl	8000658 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f58:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	f1c3 0205 	rsb	r2, r3, #5
 8000f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f62:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f6c:	3350      	adds	r3, #80	; 0x50
 8000f6e:	2204      	movs	r2, #4
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 febe 	bl	8006cf4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7a:	3354      	adds	r3, #84	; 0x54
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 feb7 	bl	8006cf4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	69b8      	ldr	r0, [r7, #24]
 8000f8c:	f001 fc24 	bl	80027d8 <pxPortInitialiseStack>
 8000f90:	4602      	mov	r2, r0
 8000f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f94:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fa0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000fb4:	f001 fdbe 	bl	8002b34 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000fb8:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <prvAddNewTaskToReadyList+0x14c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <prvAddNewTaskToReadyList+0x14c>)
 8000fc0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000fc2:	4b4e      	ldr	r3, [pc, #312]	; (80010fc <prvAddNewTaskToReadyList+0x150>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000fca:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <prvAddNewTaskToReadyList+0x150>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fd0:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <prvAddNewTaskToReadyList+0x14c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d110      	bne.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000fd8:	f000 fe40 	bl	8001c5c <prvInitialiseTaskLists>
 8000fdc:	e00d      	b.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <prvAddNewTaskToReadyList+0x154>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000fe6:	4b45      	ldr	r3, [pc, #276]	; (80010fc <prvAddNewTaskToReadyList+0x150>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d802      	bhi.n	8000ffa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ff4:	4a41      	ldr	r2, [pc, #260]	; (80010fc <prvAddNewTaskToReadyList+0x150>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <prvAddNewTaskToReadyList+0x158>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <prvAddNewTaskToReadyList+0x158>)
 8001002:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001004:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <prvAddNewTaskToReadyList+0x158>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d016      	beq.n	8001040 <prvAddNewTaskToReadyList+0x94>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fdd3 	bl	8004bc0 <SEGGER_SYSVIEW_OnTaskCreate>
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	461d      	mov	r5, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	461c      	mov	r4, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	1ae3      	subs	r3, r4, r3
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	462b      	mov	r3, r5
 800103c:	f002 f94c 	bl	80032d8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fe40 	bl	8004cc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	2201      	movs	r2, #1
 800104e:	409a      	lsls	r2, r3
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <prvAddNewTaskToReadyList+0x15c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4313      	orrs	r3, r2
 8001056:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <prvAddNewTaskToReadyList+0x15c>)
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105e:	492b      	ldr	r1, [pc, #172]	; (800110c <prvAddNewTaskToReadyList+0x160>)
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	3304      	adds	r3, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	3204      	adds	r2, #4
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1d1a      	adds	r2, r3, #4
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <prvAddNewTaskToReadyList+0x160>)
 800109e:	441a      	add	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	615a      	str	r2, [r3, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a8:	4918      	ldr	r1, [pc, #96]	; (800110c <prvAddNewTaskToReadyList+0x160>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1c59      	adds	r1, r3, #1
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <prvAddNewTaskToReadyList+0x160>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4403      	add	r3, r0
 80010c4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80010c6:	f001 fd65 	bl	8002b94 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <prvAddNewTaskToReadyList+0x154>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00e      	beq.n	80010f0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <prvAddNewTaskToReadyList+0x150>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <prvAddNewTaskToReadyList+0x164>)
 80010e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}
 80010f8:	2000016c 	.word	0x2000016c
 80010fc:	20000094 	.word	0x20000094
 8001100:	20000178 	.word	0x20000178
 8001104:	20000188 	.word	0x20000188
 8001108:	20000174 	.word	0x20000174
 800110c:	20000098 	.word	0x20000098
 8001110:	e000ed04 	.word	0xe000ed04

08001114 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800111c:	f001 fd0a 	bl	8002b34 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <vTaskDelete+0x18>
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <vTaskDelete+0x12c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	e000      	b.n	800112e <vTaskDelete+0x1a>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3304      	adds	r3, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff faf9 	bl	800072c <uxListRemove>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d115      	bne.n	800116c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001144:	493f      	ldr	r1, [pc, #252]	; (8001244 <vTaskDelete+0x130>)
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10a      	bne.n	800116c <vTaskDelete+0x58>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	2201      	movs	r2, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43da      	mvns	r2, r3
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <vTaskDelete+0x134>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4013      	ands	r3, r2
 8001168:	4a37      	ldr	r2, [pc, #220]	; (8001248 <vTaskDelete+0x134>)
 800116a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3318      	adds	r3, #24
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fad7 	bl	800072c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <vTaskDelete+0x138>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a31      	ldr	r2, [pc, #196]	; (800124c <vTaskDelete+0x138>)
 8001186:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <vTaskDelete+0x12c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	429a      	cmp	r2, r3
 8001190:	d118      	bne.n	80011c4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3304      	adds	r3, #4
 8001196:	4619      	mov	r1, r3
 8001198:	482d      	ldr	r0, [pc, #180]	; (8001250 <vTaskDelete+0x13c>)
 800119a:	f7ff fa6a 	bl	8000672 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <vTaskDelete+0x140>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <vTaskDelete+0x140>)
 80011a6:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fe2e 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4619      	mov	r1, r3
 80011b4:	2022      	movs	r0, #34	; 0x22
 80011b6:	f002 ff59 	bl	800406c <SEGGER_SYSVIEW_RecordU32>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 f8f3 	bl	80033a8 <SYSVIEW_DeleteTask>
 80011c2:	e016      	b.n	80011f2 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <vTaskDelete+0x144>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a23      	ldr	r2, [pc, #140]	; (8001258 <vTaskDelete+0x144>)
 80011cc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fe1b 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4619      	mov	r1, r3
 80011da:	2022      	movs	r0, #34	; 0x22
 80011dc:	f002 ff46 	bl	800406c <SEGGER_SYSVIEW_RecordU32>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f8e0 	bl	80033a8 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 fda5 	bl	8001d38 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80011ee:	f000 fdb3 	bl	8001d58 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80011f2:	f001 fccf 	bl	8002b94 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <vTaskDelete+0x148>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d01b      	beq.n	8001236 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <vTaskDelete+0x12c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d116      	bne.n	8001236 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <vTaskDelete+0x14c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <vTaskDelete+0x112>
        __asm volatile
 8001210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001214:	f383 8811 	msr	BASEPRI, r3
 8001218:	f3bf 8f6f 	isb	sy
 800121c:	f3bf 8f4f 	dsb	sy
 8001220:	60bb      	str	r3, [r7, #8]
    }
 8001222:	bf00      	nop
 8001224:	e7fe      	b.n	8001224 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <vTaskDelete+0x150>)
 8001228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	f3bf 8f4f 	dsb	sy
 8001232:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000094 	.word	0x20000094
 8001244:	20000098 	.word	0x20000098
 8001248:	20000174 	.word	0x20000174
 800124c:	20000188 	.word	0x20000188
 8001250:	20000140 	.word	0x20000140
 8001254:	20000154 	.word	0x20000154
 8001258:	2000016c 	.word	0x2000016c
 800125c:	20000178 	.word	0x20000178
 8001260:	20000194 	.word	0x20000194
 8001264:	e000ed04 	.word	0xe000ed04

08001268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <vTaskStartScheduler+0xa4>)
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	2282      	movs	r2, #130	; 0x82
 800127a:	4925      	ldr	r1, [pc, #148]	; (8001310 <vTaskStartScheduler+0xa8>)
 800127c:	4825      	ldr	r0, [pc, #148]	; (8001314 <vTaskStartScheduler+0xac>)
 800127e:	f7ff fdaf 	bl	8000de0 <xTaskCreate>
 8001282:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d102      	bne.n	8001290 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800128a:	f001 f821 	bl	80022d0 <xTimerCreateTimerTask>
 800128e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d124      	bne.n	80012e0 <vTaskStartScheduler+0x78>
        __asm volatile
 8001296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800129a:	f383 8811 	msr	BASEPRI, r3
 800129e:	f3bf 8f6f 	isb	sy
 80012a2:	f3bf 8f4f 	dsb	sy
 80012a6:	60bb      	str	r3, [r7, #8]
    }
 80012a8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <vTaskStartScheduler+0xb0>)
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <vTaskStartScheduler+0xb4>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <vTaskStartScheduler+0xb8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <vTaskStartScheduler+0xbc>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <vTaskStartScheduler+0xa4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d102      	bne.n	80012d0 <vTaskStartScheduler+0x68>
 80012ca:	f003 fc5d 	bl	8004b88 <SEGGER_SYSVIEW_OnIdle>
 80012ce:	e004      	b.n	80012da <vTaskStartScheduler+0x72>
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <vTaskStartScheduler+0xbc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fcb5 	bl	8004c44 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80012da:	f001 fb0b 	bl	80028f4 <xPortStartScheduler>
 80012de:	e00e      	b.n	80012fe <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e6:	d10a      	bne.n	80012fe <vTaskStartScheduler+0x96>
        __asm volatile
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	f383 8811 	msr	BASEPRI, r3
 80012f0:	f3bf 8f6f 	isb	sy
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	607b      	str	r3, [r7, #4]
    }
 80012fa:	bf00      	nop
 80012fc:	e7fe      	b.n	80012fc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <vTaskStartScheduler+0xc0>)
 8001300:	681b      	ldr	r3, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000190 	.word	0x20000190
 8001310:	08007ba4 	.word	0x08007ba4
 8001314:	08001c2d 	.word	0x08001c2d
 8001318:	2000018c 	.word	0x2000018c
 800131c:	20000178 	.word	0x20000178
 8001320:	20000170 	.word	0x20000170
 8001324:	20000094 	.word	0x20000094
 8001328:	20000000 	.word	0x20000000

0800132c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <vTaskSuspendAll+0x18>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	4a03      	ldr	r2, [pc, #12]	; (8001344 <vTaskSuspendAll+0x18>)
 8001338:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	20000194 	.word	0x20000194

08001348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001356:	4b73      	ldr	r3, [pc, #460]	; (8001524 <xTaskResumeAll+0x1dc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <xTaskResumeAll+0x2c>
        __asm volatile
 800135e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001362:	f383 8811 	msr	BASEPRI, r3
 8001366:	f3bf 8f6f 	isb	sy
 800136a:	f3bf 8f4f 	dsb	sy
 800136e:	607b      	str	r3, [r7, #4]
    }
 8001370:	bf00      	nop
 8001372:	e7fe      	b.n	8001372 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001374:	f001 fbde 	bl	8002b34 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001378:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <xTaskResumeAll+0x1dc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a69      	ldr	r2, [pc, #420]	; (8001524 <xTaskResumeAll+0x1dc>)
 8001380:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001382:	4b68      	ldr	r3, [pc, #416]	; (8001524 <xTaskResumeAll+0x1dc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 80c4 	bne.w	8001514 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800138c:	4b66      	ldr	r3, [pc, #408]	; (8001528 <xTaskResumeAll+0x1e0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80bf 	beq.w	8001514 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001396:	e08e      	b.n	80014b6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001398:	4b64      	ldr	r3, [pc, #400]	; (800152c <xTaskResumeAll+0x1e4>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	6a12      	ldr	r2, [r2, #32]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	69d2      	ldr	r2, [r2, #28]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3318      	adds	r3, #24
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d103      	bne.n	80013ce <xTaskResumeAll+0x86>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	68d2      	ldr	r2, [r2, #12]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	6892      	ldr	r2, [r2, #8]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	3304      	adds	r3, #4
 8001400:	429a      	cmp	r2, r3
 8001402:	d103      	bne.n	800140c <xTaskResumeAll+0xc4>
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fc52 	bl	8004cc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2201      	movs	r2, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	4b40      	ldr	r3, [pc, #256]	; (8001530 <xTaskResumeAll+0x1e8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	4a3f      	ldr	r2, [pc, #252]	; (8001530 <xTaskResumeAll+0x1e8>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143a:	493e      	ldr	r1, [pc, #248]	; (8001534 <xTaskResumeAll+0x1ec>)
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	3304      	adds	r3, #4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	3204      	adds	r2, #4
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	1d1a      	adds	r2, r3, #4
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4a2e      	ldr	r2, [pc, #184]	; (8001534 <xTaskResumeAll+0x1ec>)
 800147a:	441a      	add	r2, r3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001484:	492b      	ldr	r1, [pc, #172]	; (8001534 <xTaskResumeAll+0x1ec>)
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1c59      	adds	r1, r3, #1
 8001494:	4827      	ldr	r0, [pc, #156]	; (8001534 <xTaskResumeAll+0x1ec>)
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4403      	add	r3, r0
 80014a0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <xTaskResumeAll+0x1f0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d302      	bcc.n	80014b6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <xTaskResumeAll+0x1f4>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <xTaskResumeAll+0x1e4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f47f af6c 	bne.w	8001398 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80014c6:	f000 fc47 	bl	8001d58 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <xTaskResumeAll+0x1f8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d010      	beq.n	80014f8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80014d6:	f000 f859 	bl	800158c <xTaskIncrementTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <xTaskResumeAll+0x1f4>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f1      	bne.n	80014d6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <xTaskResumeAll+0x1f8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <xTaskResumeAll+0x1f4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d009      	beq.n	8001514 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <xTaskResumeAll+0x1fc>)
 8001506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001514:	f001 fb3e 	bl	8002b94 <vPortExitCritical>

    return xAlreadyYielded;
 8001518:	69bb      	ldr	r3, [r7, #24]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000194 	.word	0x20000194
 8001528:	2000016c 	.word	0x2000016c
 800152c:	2000012c 	.word	0x2000012c
 8001530:	20000174 	.word	0x20000174
 8001534:	20000098 	.word	0x20000098
 8001538:	20000094 	.word	0x20000094
 800153c:	20000180 	.word	0x20000180
 8001540:	2000017c 	.word	0x2000017c
 8001544:	e000ed04 	.word	0xe000ed04

08001548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <xTaskGetTickCount+0x1c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000170 	.word	0x20000170

08001568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800156e:	f001 fbcd 	bl	8002d0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <xTaskGetTickCountFromISR+0x20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800157c:	683b      	ldr	r3, [r7, #0]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000170 	.word	0x20000170

0800158c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001596:	4b7f      	ldr	r3, [pc, #508]	; (8001794 <xTaskIncrementTick+0x208>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80f0 	bne.w	8001780 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015a0:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <xTaskIncrementTick+0x20c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80015a8:	4a7b      	ldr	r2, [pc, #492]	; (8001798 <xTaskIncrementTick+0x20c>)
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d120      	bne.n	80015f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <xTaskIncrementTick+0x210>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80015be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	607b      	str	r3, [r7, #4]
    }
 80015d0:	bf00      	nop
 80015d2:	e7fe      	b.n	80015d2 <xTaskIncrementTick+0x46>
 80015d4:	4b71      	ldr	r3, [pc, #452]	; (800179c <xTaskIncrementTick+0x210>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	4b71      	ldr	r3, [pc, #452]	; (80017a0 <xTaskIncrementTick+0x214>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6f      	ldr	r2, [pc, #444]	; (800179c <xTaskIncrementTick+0x210>)
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4a6f      	ldr	r2, [pc, #444]	; (80017a0 <xTaskIncrementTick+0x214>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <xTaskIncrementTick+0x218>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a6d      	ldr	r2, [pc, #436]	; (80017a4 <xTaskIncrementTick+0x218>)
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	f000 fbb1 	bl	8001d58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80015f6:	4b6c      	ldr	r3, [pc, #432]	; (80017a8 <xTaskIncrementTick+0x21c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a3a      	ldr	r2, [r7, #32]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f0c0 80aa 	bcc.w	8001756 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001602:	4b66      	ldr	r3, [pc, #408]	; (800179c <xTaskIncrementTick+0x210>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <xTaskIncrementTick+0x21c>)
 800160e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001612:	601a      	str	r2, [r3, #0]
                    break;
 8001614:	e09f      	b.n	8001756 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001616:	4b61      	ldr	r3, [pc, #388]	; (800179c <xTaskIncrementTick+0x210>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	429a      	cmp	r2, r3
 800162c:	d203      	bcs.n	8001636 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800162e:	4a5e      	ldr	r2, [pc, #376]	; (80017a8 <xTaskIncrementTick+0x21c>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001634:	e08f      	b.n	8001756 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	68d2      	ldr	r2, [r2, #12]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	6892      	ldr	r2, [r2, #8]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	3304      	adds	r3, #4
 8001658:	429a      	cmp	r2, r3
 800165a:	d103      	bne.n	8001664 <xTaskIncrementTick+0xd8>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1e5a      	subs	r2, r3, #1
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01e      	beq.n	80016ba <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	6a12      	ldr	r2, [r2, #32]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69d2      	ldr	r2, [r2, #28]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3318      	adds	r3, #24
 800169e:	429a      	cmp	r2, r3
 80016a0:	d103      	bne.n	80016aa <xTaskIncrementTick+0x11e>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2200      	movs	r2, #0
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fb03 	bl	8004cc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	2201      	movs	r2, #1
 80016c8:	409a      	lsls	r2, r3
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <xTaskIncrementTick+0x220>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	4a36      	ldr	r2, [pc, #216]	; (80017ac <xTaskIncrementTick+0x220>)
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	4935      	ldr	r1, [pc, #212]	; (80017b0 <xTaskIncrementTick+0x224>)
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3304      	adds	r3, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	3204      	adds	r2, #4
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1d1a      	adds	r2, r3, #4
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4a26      	ldr	r2, [pc, #152]	; (80017b0 <xTaskIncrementTick+0x224>)
 8001718:	441a      	add	r2, r3
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	615a      	str	r2, [r3, #20]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	4923      	ldr	r1, [pc, #140]	; (80017b0 <xTaskIncrementTick+0x224>)
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	1c59      	adds	r1, r3, #1
 8001732:	481f      	ldr	r0, [pc, #124]	; (80017b0 <xTaskIncrementTick+0x224>)
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4403      	add	r3, r0
 800173e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <xTaskIncrementTick+0x228>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	429a      	cmp	r2, r3
 800174c:	f4ff af59 	bcc.w	8001602 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001754:	e755      	b.n	8001602 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <xTaskIncrementTick+0x228>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175c:	4914      	ldr	r1, [pc, #80]	; (80017b0 <xTaskIncrementTick+0x224>)
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d901      	bls.n	8001772 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 800176e:	2301      	movs	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <xTaskIncrementTick+0x22c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 800177a:	2301      	movs	r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
 800177e:	e004      	b.n	800178a <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <xTaskIncrementTick+0x230>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <xTaskIncrementTick+0x230>)
 8001788:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800178c:	4618      	mov	r0, r3
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000194 	.word	0x20000194
 8001798:	20000170 	.word	0x20000170
 800179c:	20000124 	.word	0x20000124
 80017a0:	20000128 	.word	0x20000128
 80017a4:	20000184 	.word	0x20000184
 80017a8:	2000018c 	.word	0x2000018c
 80017ac:	20000174 	.word	0x20000174
 80017b0:	20000098 	.word	0x20000098
 80017b4:	20000094 	.word	0x20000094
 80017b8:	20000180 	.word	0x20000180
 80017bc:	2000017c 	.word	0x2000017c

080017c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <vTaskSwitchContext+0xbc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <vTaskSwitchContext+0xc0>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80017d4:	e04d      	b.n	8001872 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <vTaskSwitchContext+0xc0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <vTaskSwitchContext+0xc4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	f1c3 031f 	rsb	r3, r3, #31
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	4925      	ldr	r1, [pc, #148]	; (8001888 <vTaskSwitchContext+0xc8>)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10a      	bne.n	800181c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180a:	f383 8811 	msr	BASEPRI, r3
 800180e:	f3bf 8f6f 	isb	sy
 8001812:	f3bf 8f4f 	dsb	sy
 8001816:	607b      	str	r3, [r7, #4]
    }
 8001818:	bf00      	nop
 800181a:	e7fe      	b.n	800181a <vTaskSwitchContext+0x5a>
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <vTaskSwitchContext+0xc8>)
 8001828:	4413      	add	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3308      	adds	r3, #8
 800183e:	429a      	cmp	r2, r3
 8001840:	d104      	bne.n	800184c <vTaskSwitchContext+0x8c>
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <vTaskSwitchContext+0xcc>)
 8001854:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <vTaskSwitchContext+0xcc>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <vTaskSwitchContext+0xd0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d102      	bne.n	8001868 <vTaskSwitchContext+0xa8>
 8001862:	f003 f991 	bl	8004b88 <SEGGER_SYSVIEW_OnIdle>
}
 8001866:	e004      	b.n	8001872 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <vTaskSwitchContext+0xcc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 f9e9 	bl	8004c44 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000194 	.word	0x20000194
 8001880:	20000180 	.word	0x20000180
 8001884:	20000174 	.word	0x20000174
 8001888:	20000098 	.word	0x20000098
 800188c:	20000094 	.word	0x20000094
 8001890:	20000190 	.word	0x20000190

08001894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	60fb      	str	r3, [r7, #12]
    }
 80018b6:	bf00      	nop
 80018b8:	e7fe      	b.n	80018b8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <vTaskPlaceOnEventList+0x44>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3318      	adds	r3, #24
 80018c0:	4619      	mov	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7fe fef9 	bl	80006ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018c8:	2101      	movs	r1, #1
 80018ca:	6838      	ldr	r0, [r7, #0]
 80018cc:	f000 fc74 	bl	80021b8 <prvAddCurrentTaskToDelayedList>
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000094 	.word	0x20000094

080018dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80018ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f2:	f383 8811 	msr	BASEPRI, r3
 80018f6:	f3bf 8f6f 	isb	sy
 80018fa:	f3bf 8f4f 	dsb	sy
 80018fe:	613b      	str	r3, [r7, #16]
    }
 8001900:	bf00      	nop
 8001902:	e7fe      	b.n	8001902 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <vTaskPlaceOnEventListRestricted+0x8c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	61da      	str	r2, [r3, #28]
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	6892      	ldr	r2, [r2, #8]
 800191a:	621a      	str	r2, [r3, #32]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <vTaskPlaceOnEventListRestricted+0x8c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	3218      	adds	r2, #24
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <vTaskPlaceOnEventListRestricted+0x8c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f103 0218 	add.w	r2, r3, #24
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001950:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001952:	2024      	movs	r0, #36	; 0x24
 8001954:	f002 fb6c 	bl	8004030 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	68b8      	ldr	r0, [r7, #8]
 800195c:	f000 fc2c 	bl	80021b8 <prvAddCurrentTaskToDelayedList>
    }
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000094 	.word	0x20000094

0800196c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10a      	bne.n	8001998 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	f3bf 8f4f 	dsb	sy
 8001992:	60fb      	str	r3, [r7, #12]
    }
 8001994:	bf00      	nop
 8001996:	e7fe      	b.n	8001996 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	6a3a      	ldr	r2, [r7, #32]
 80019a4:	6a12      	ldr	r2, [r2, #32]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	69d2      	ldr	r2, [r2, #28]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	3318      	adds	r3, #24
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d103      	bne.n	80019c6 <xTaskRemoveFromEventList+0x5a>
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	2200      	movs	r2, #0
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <xTaskRemoveFromEventList+0x198>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d162      	bne.n	8001aa4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	6a3a      	ldr	r2, [r7, #32]
 80019ea:	68d2      	ldr	r2, [r2, #12]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	6a3a      	ldr	r2, [r7, #32]
 80019f4:	6892      	ldr	r2, [r2, #8]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	3304      	adds	r3, #4
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d103      	bne.n	8001a0c <xTaskRemoveFromEventList+0xa0>
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 f952 	bl	8004cc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2201      	movs	r2, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <xTaskRemoveFromEventList+0x19c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	4a35      	ldr	r2, [pc, #212]	; (8001b08 <xTaskRemoveFromEventList+0x19c>)
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3a:	4934      	ldr	r1, [pc, #208]	; (8001b0c <xTaskRemoveFromEventList+0x1a0>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3304      	adds	r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	6a3a      	ldr	r2, [r7, #32]
 8001a60:	3204      	adds	r2, #4
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	1d1a      	adds	r2, r3, #4
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <xTaskRemoveFromEventList+0x1a0>)
 8001a7a:	441a      	add	r2, r3
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	4921      	ldr	r1, [pc, #132]	; (8001b0c <xTaskRemoveFromEventList+0x1a0>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	481d      	ldr	r0, [pc, #116]	; (8001b0c <xTaskRemoveFromEventList+0x1a0>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4403      	add	r3, r0
 8001aa0:	6019      	str	r1, [r3, #0]
 8001aa2:	e01b      	b.n	8001adc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <xTaskRemoveFromEventList+0x1a4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	61da      	str	r2, [r3, #28]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	621a      	str	r2, [r3, #32]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	6a3a      	ldr	r2, [r7, #32]
 8001abe:	3218      	adds	r2, #24
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f103 0218 	add.w	r2, r3, #24
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <xTaskRemoveFromEventList+0x1a4>)
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <xTaskRemoveFromEventList+0x1a4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <xTaskRemoveFromEventList+0x1a4>)
 8001ada:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <xTaskRemoveFromEventList+0x1a8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d905      	bls.n	8001af6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <xTaskRemoveFromEventList+0x1ac>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e001      	b.n	8001afa <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000194 	.word	0x20000194
 8001b08:	20000174 	.word	0x20000174
 8001b0c:	20000098 	.word	0x20000098
 8001b10:	2000012c 	.word	0x2000012c
 8001b14:	20000094 	.word	0x20000094
 8001b18:	20000180 	.word	0x20000180

08001b1c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <vTaskInternalSetTimeOutState+0x24>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <vTaskInternalSetTimeOutState+0x28>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	605a      	str	r2, [r3, #4]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	20000184 	.word	0x20000184
 8001b44:	20000170 	.word	0x20000170

08001b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	613b      	str	r3, [r7, #16]
    }
 8001b6a:	bf00      	nop
 8001b6c:	e7fe      	b.n	8001b6c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10a      	bne.n	8001b8a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b78:	f383 8811 	msr	BASEPRI, r3
 8001b7c:	f3bf 8f6f 	isb	sy
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	60fb      	str	r3, [r7, #12]
    }
 8001b86:	bf00      	nop
 8001b88:	e7fe      	b.n	8001b88 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001b8a:	f000 ffd3 	bl	8002b34 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <xTaskCheckForTimeOut+0xc4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba6:	d102      	bne.n	8001bae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	e026      	b.n	8001bfc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <xTaskCheckForTimeOut+0xc8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d00a      	beq.n	8001bd0 <xTaskCheckForTimeOut+0x88>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d305      	bcc.n	8001bd0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e015      	b.n	8001bfc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d20b      	bcs.n	8001bf2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	1ad2      	subs	r2, r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ff98 	bl	8001b1c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	e004      	b.n	8001bfc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001bfc:	f000 ffca 	bl	8002b94 <vPortExitCritical>

    return xReturn;
 8001c00:	69fb      	ldr	r3, [r7, #28]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000170 	.word	0x20000170
 8001c10:	20000184 	.word	0x20000184

08001c14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <vTaskMissedYield+0x14>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	20000180 	.word	0x20000180

08001c2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c34:	f000 f852 	bl	8001cdc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <prvIdleTask+0x28>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d9f9      	bls.n	8001c34 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <prvIdleTask+0x2c>)
 8001c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c50:	e7f0      	b.n	8001c34 <prvIdleTask+0x8>
 8001c52:	bf00      	nop
 8001c54:	20000098 	.word	0x20000098
 8001c58:	e000ed04 	.word	0xe000ed04

08001c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	e00c      	b.n	8001c82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <prvInitialiseTaskLists+0x60>)
 8001c74:	4413      	add	r3, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fcce 	bl	8000618 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d9ef      	bls.n	8001c68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <prvInitialiseTaskLists+0x64>)
 8001c8a:	f7fe fcc5 	bl	8000618 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <prvInitialiseTaskLists+0x68>)
 8001c90:	f7fe fcc2 	bl	8000618 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <prvInitialiseTaskLists+0x6c>)
 8001c96:	f7fe fcbf 	bl	8000618 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <prvInitialiseTaskLists+0x70>)
 8001c9c:	f7fe fcbc 	bl	8000618 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <prvInitialiseTaskLists+0x74>)
 8001ca2:	f7fe fcb9 	bl	8000618 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <prvInitialiseTaskLists+0x78>)
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <prvInitialiseTaskLists+0x64>)
 8001caa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <prvInitialiseTaskLists+0x7c>)
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <prvInitialiseTaskLists+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000098 	.word	0x20000098
 8001cc0:	200000fc 	.word	0x200000fc
 8001cc4:	20000110 	.word	0x20000110
 8001cc8:	2000012c 	.word	0x2000012c
 8001ccc:	20000140 	.word	0x20000140
 8001cd0:	20000158 	.word	0x20000158
 8001cd4:	20000124 	.word	0x20000124
 8001cd8:	20000128 	.word	0x20000128

08001cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ce2:	e019      	b.n	8001d18 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001ce4:	f000 ff26 	bl	8002b34 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <prvCheckTasksWaitingTermination+0x50>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fd19 	bl	800072c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <prvCheckTasksWaitingTermination+0x54>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <prvCheckTasksWaitingTermination+0x54>)
 8001d02:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <prvCheckTasksWaitingTermination+0x58>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <prvCheckTasksWaitingTermination+0x58>)
 8001d0c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001d0e:	f000 ff41 	bl	8002b94 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f810 	bl	8001d38 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <prvCheckTasksWaitingTermination+0x58>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e1      	bne.n	8001ce4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000140 	.word	0x20000140
 8001d30:	2000016c 	.word	0x2000016c
 8001d34:	20000154 	.word	0x20000154

08001d38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 f901 	bl	8002f4c <vPortFree>
                vPortFree( pxTCB );
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f001 f8fe 	bl	8002f4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <prvResetNextTaskUnblockTime+0x30>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <prvResetNextTaskUnblockTime+0x34>)
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d6e:	e005      	b.n	8001d7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <prvResetNextTaskUnblockTime+0x30>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <prvResetNextTaskUnblockTime+0x34>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000124 	.word	0x20000124
 8001d8c:	2000018c 	.word	0x2000018c

08001d90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <xTaskGetSchedulerState+0x34>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	e008      	b.n	8001db6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <xTaskGetSchedulerState+0x38>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001dac:	2302      	movs	r3, #2
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	e001      	b.n	8001db6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001db6:	687b      	ldr	r3, [r7, #4]
    }
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	20000178 	.word	0x20000178
 8001dc8:	20000194 	.word	0x20000194

08001dcc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de4:	f383 8811 	msr	BASEPRI, r3
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	613b      	str	r3, [r7, #16]
    }
 8001df2:	bf00      	nop
 8001df4:	e7fe      	b.n	8001df4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001df6:	f000 fe9d 	bl	8002b34 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <xTaskGenericNotifyWait+0x108>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	3354      	adds	r3, #84	; 0x54
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d022      	beq.n	8001e52 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <xTaskGenericNotifyWait+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	3214      	adds	r2, #20
 8001e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	43d2      	mvns	r2, r2
 8001e1c:	4011      	ands	r1, r2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	3214      	adds	r2, #20
 8001e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <xTaskGenericNotifyWait+0x108>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3354      	adds	r3, #84	; 0x54
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	6a38      	ldr	r0, [r7, #32]
 8001e3e:	f000 f9bb 	bl	80021b8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001e42:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <xTaskGenericNotifyWait+0x10c>)
 8001e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e52:	f000 fe9f 	bl	8002b94 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001e56:	f000 fe6d 	bl	8002b34 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	2040      	movs	r0, #64	; 0x40
 8001e68:	f002 fa0c 	bl	8004284 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <xTaskGenericNotifyWait+0x108>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	3214      	adds	r2, #20
 8001e7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <xTaskGenericNotifyWait+0x108>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3354      	adds	r3, #84	; 0x54
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d002      	beq.n	8001e9a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e00e      	b.n	8001eb8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <xTaskGenericNotifyWait+0x108>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	3214      	adds	r2, #20
 8001ea2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	43d2      	mvns	r2, r2
 8001eaa:	4011      	ands	r1, r2
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	3214      	adds	r2, #20
 8001eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <xTaskGenericNotifyWait+0x108>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3354      	adds	r3, #84	; 0x54
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001ec6:	f000 fe65 	bl	8002b94 <vPortExitCritical>

        return xReturn;
 8001eca:	697b      	ldr	r3, [r7, #20]
    }
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000094 	.word	0x20000094
 8001ed8:	e000ed04 	.word	0xe000ed04

08001edc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b094      	sub	sp, #80	; 0x50
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001eea:	2301      	movs	r3, #1
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10a      	bne.n	8001f0a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8001ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef8:	f383 8811 	msr	BASEPRI, r3
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001f06:	bf00      	nop
 8001f08:	e7fe      	b.n	8001f08 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001f22:	bf00      	nop
 8001f24:	e7fe      	b.n	8001f24 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f26:	f000 fef1 	bl	8002d0c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8001f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	623a      	str	r2, [r7, #32]
 8001f44:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001f46:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8001f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	3214      	adds	r2, #20
 8001f56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f5c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4413      	add	r3, r2
 8001f64:	3354      	adds	r3, #84	; 0x54
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4413      	add	r3, r2
 8001f72:	3354      	adds	r3, #84	; 0x54
 8001f74:	2202      	movs	r2, #2
 8001f76:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d83b      	bhi.n	8001ff6 <xTaskGenericNotifyFromISR+0x11a>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <xTaskGenericNotifyFromISR+0xa8>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08002015 	.word	0x08002015
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	08001fcd 	.word	0x08001fcd
 8001f94:	08001fdb 	.word	0x08001fdb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	3214      	adds	r2, #20
 8001f9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
 8001fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	3214      	adds	r2, #20
 8001fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fb2:	e032      	b.n	800201a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	3214      	adds	r2, #20
 8001fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbe:	1c59      	adds	r1, r3, #1
 8001fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	3214      	adds	r2, #20
 8001fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fca:	e026      	b.n	800201a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	3214      	adds	r2, #20
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fd8:	e01f      	b.n	800201a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001fda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d006      	beq.n	8001ff0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	3214      	adds	r2, #20
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001fee:	e014      	b.n	800201a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8001ff4:	e011      	b.n	800201a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001ff6:	4b69      	ldr	r3, [pc, #420]	; (800219c <xTaskGenericNotifyFromISR+0x2c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8001ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	61bb      	str	r3, [r7, #24]
    }
 8002010:	bf00      	nop
 8002012:	e7fe      	b.n	8002012 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8002014:	bf00      	nop
 8002016:	e000      	b.n	800201a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8002018:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800201a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201c:	4618      	mov	r0, r3
 800201e:	f002 fef5 	bl	8004e0c <SEGGER_SYSVIEW_ShrinkId>
 8002022:	78f9      	ldrb	r1, [r7, #3]
 8002024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002026:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002028:	9201      	str	r2, [sp, #4]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	460b      	mov	r3, r1
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4601      	mov	r1, r0
 8002032:	203f      	movs	r0, #63	; 0x3f
 8002034:	f002 f9b8 	bl	80043a8 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002038:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800203c:	2b01      	cmp	r3, #1
 800203e:	f040 80a2 	bne.w	8002186 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	617b      	str	r3, [r7, #20]
    }
 800205c:	bf00      	nop
 800205e:	e7fe      	b.n	800205e <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002060:	4b4f      	ldr	r3, [pc, #316]	; (80021a0 <xTaskGenericNotifyFromISR+0x2c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d162      	bne.n	800212e <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
 800206e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002074:	68d2      	ldr	r2, [r2, #12]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800207e:	6892      	ldr	r2, [r2, #8]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002088:	3304      	adds	r3, #4
 800208a:	429a      	cmp	r2, r3
 800208c:	d103      	bne.n	8002096 <xTaskGenericNotifyFromISR+0x1ba>
 800208e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
 800209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80020a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fe0d 	bl	8004cc8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80020ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	2201      	movs	r2, #1
 80020b4:	409a      	lsls	r2, r3
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <xTaskGenericNotifyFromISR+0x2c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	4a39      	ldr	r2, [pc, #228]	; (80021a4 <xTaskGenericNotifyFromISR+0x2c8>)
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	4938      	ldr	r1, [pc, #224]	; (80021a8 <xTaskGenericNotifyFromISR+0x2cc>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3304      	adds	r3, #4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ea:	3204      	adds	r2, #4
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f0:	1d1a      	adds	r2, r3, #4
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <xTaskGenericNotifyFromISR+0x2cc>)
 8002104:	441a      	add	r2, r3
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210e:	4926      	ldr	r1, [pc, #152]	; (80021a8 <xTaskGenericNotifyFromISR+0x2cc>)
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c59      	adds	r1, r3, #1
 800211e:	4822      	ldr	r0, [pc, #136]	; (80021a8 <xTaskGenericNotifyFromISR+0x2cc>)
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4403      	add	r3, r0
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	e01b      	b.n	8002166 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800212e:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <xTaskGenericNotifyFromISR+0x2d0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
 8002134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002138:	61da      	str	r2, [r3, #28]
 800213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002140:	621a      	str	r2, [r3, #32]
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002148:	3218      	adds	r2, #24
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214e:	f103 0218 	add.w	r2, r3, #24
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <xTaskGenericNotifyFromISR+0x2d0>)
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <xTaskGenericNotifyFromISR+0x2d0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <xTaskGenericNotifyFromISR+0x2d0>)
 8002164:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <xTaskGenericNotifyFromISR+0x2d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	429a      	cmp	r2, r3
 8002172:	d908      	bls.n	8002186 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8002174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800217a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <xTaskGenericNotifyFromISR+0x2d8>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002188:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002190:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8002194:	4618      	mov	r0, r3
 8002196:	3748      	adds	r7, #72	; 0x48
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000170 	.word	0x20000170
 80021a0:	20000194 	.word	0x20000194
 80021a4:	20000174 	.word	0x20000174
 80021a8:	20000098 	.word	0x20000098
 80021ac:	2000012c 	.word	0x2000012c
 80021b0:	20000094 	.word	0x20000094
 80021b4:	20000180 	.word	0x20000180

080021b8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80021c2:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021c8:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe faac 	bl	800072c <uxListRemove>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10b      	bne.n	80021f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021da:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	2201      	movs	r2, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	4b34      	ldr	r3, [pc, #208]	; (80022bc <prvAddCurrentTaskToDelayedList+0x104>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4013      	ands	r3, r2
 80021ee:	4a33      	ldr	r2, [pc, #204]	; (80022bc <prvAddCurrentTaskToDelayedList+0x104>)
 80021f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f8:	d124      	bne.n	8002244 <prvAddCurrentTaskToDelayedList+0x8c>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d021      	beq.n	8002244 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <prvAddCurrentTaskToDelayedList+0x108>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	6892      	ldr	r2, [r2, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	3204      	adds	r2, #4
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1d1a      	adds	r2, r3, #4
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <prvAddCurrentTaskToDelayedList+0x108>)
 8002234:	615a      	str	r2, [r3, #20]
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <prvAddCurrentTaskToDelayedList+0x108>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <prvAddCurrentTaskToDelayedList+0x108>)
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002242:	e032      	b.n	80022aa <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	d20f      	bcs.n	800227c <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2104      	movs	r1, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f002 fd72 	bl	8004d4c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <prvAddCurrentTaskToDelayedList+0x10c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3304      	adds	r3, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fe fa20 	bl	80006ba <vListInsert>
}
 800227a:	e016      	b.n	80022aa <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2104      	movs	r1, #4
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fd62 	bl	8004d4c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <prvAddCurrentTaskToDelayedList+0x110>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <prvAddCurrentTaskToDelayedList+0x100>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3304      	adds	r3, #4
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7fe fa10 	bl	80006ba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <prvAddCurrentTaskToDelayedList+0x114>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d202      	bcs.n	80022aa <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <prvAddCurrentTaskToDelayedList+0x114>)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6013      	str	r3, [r2, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000170 	.word	0x20000170
 80022b8:	20000094 	.word	0x20000094
 80022bc:	20000174 	.word	0x20000174
 80022c0:	20000158 	.word	0x20000158
 80022c4:	20000128 	.word	0x20000128
 80022c8:	20000124 	.word	0x20000124
 80022cc:	2000018c 	.word	0x2000018c

080022d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80022da:	f000 fa47 	bl	800276c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <xTimerCreateTimerTask+0x54>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <xTimerCreateTimerTask+0x58>)
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2302      	movs	r3, #2
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f4:	490d      	ldr	r1, [pc, #52]	; (800232c <xTimerCreateTimerTask+0x5c>)
 80022f6:	480e      	ldr	r0, [pc, #56]	; (8002330 <xTimerCreateTimerTask+0x60>)
 80022f8:	f7fe fd72 	bl	8000de0 <xTaskCreate>
 80022fc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	603b      	str	r3, [r7, #0]
    }
 8002316:	bf00      	nop
 8002318:	e7fe      	b.n	8002318 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800231a:	687b      	ldr	r3, [r7, #4]
    }
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200001c8 	.word	0x200001c8
 8002328:	200001cc 	.word	0x200001cc
 800232c:	08007bac 	.word	0x08007bac
 8002330:	080023d9 	.word	0x080023d9

08002334 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002340:	e008      	b.n	8002354 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	18d1      	adds	r1, r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f8dd 	bl	8002520 <prvInsertTimerInActiveList>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ea      	bne.n	8002342 <prvReloadTimer+0xe>
        }
    }
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <prvProcessExpiredTimer+0x5c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3304      	adds	r3, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f9cb 	bl	800072c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff ffc3 	bl	8002334 <prvReloadTimer>
 80023ae:	e008      	b.n	80023c2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	4798      	blx	r3
    }
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200001c0 	.word	0x200001c0

080023d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f857 	bl	8002498 <prvGetNextExpireTime>
 80023ea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4619      	mov	r1, r3
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f803 	bl	80023fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80023f6:	f000 f8d5 	bl	80025a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80023fa:	e7f1      	b.n	80023e0 <prvTimerTask+0x8>

080023fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002406:	f7fe ff91 	bl	800132c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f866 	bl	80024e0 <prvSampleTimeNow>
 8002414:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d130      	bne.n	800247e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <prvProcessTimerOrBlockTask+0x3c>
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	429a      	cmp	r2, r3
 8002428:	d806      	bhi.n	8002438 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800242a:	f7fe ff8d 	bl	8001348 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ffa1 	bl	8002378 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002436:	e024      	b.n	8002482 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <prvProcessTimerOrBlockTask+0x90>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <prvProcessTimerOrBlockTask+0x50>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <prvProcessTimerOrBlockTask+0x52>
 800244c:	2300      	movs	r3, #0
 800244e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <prvProcessTimerOrBlockTask+0x94>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fc8b 	bl	8000d78 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002462:	f7fe ff71 	bl	8001348 <xTaskResumeAll>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <prvProcessTimerOrBlockTask+0x98>)
 800246e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	f3bf 8f6f 	isb	sy
    }
 800247c:	e001      	b.n	8002482 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800247e:	f7fe ff63 	bl	8001348 <xTaskResumeAll>
    }
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200001c4 	.word	0x200001c4
 8002490:	200001c8 	.word	0x200001c8
 8002494:	e000ed04 	.word	0xe000ed04

08002498 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <prvGetNextExpireTime+0x44>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <prvGetNextExpireTime+0x16>
 80024aa:	2201      	movs	r2, #1
 80024ac:	e000      	b.n	80024b0 <prvGetNextExpireTime+0x18>
 80024ae:	2200      	movs	r2, #0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <prvGetNextExpireTime+0x44>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e001      	b.n	80024cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80024cc:	68fb      	ldr	r3, [r7, #12]
    }
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200001c0 	.word	0x200001c0

080024e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80024e8:	f7ff f82e 	bl	8001548 <xTaskGetTickCount>
 80024ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <prvSampleTimeNow+0x3c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d205      	bcs.n	8002504 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80024f8:	f000 f912 	bl	8002720 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e002      	b.n	800250a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <prvSampleTimeNow+0x3c>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002510:	68fb      	ldr	r3, [r7, #12]
    }
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200001d0 	.word	0x200001d0

08002520 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d812      	bhi.n	800256c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	429a      	cmp	r2, r3
 8002552:	d302      	bcc.n	800255a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002554:	2301      	movs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e01b      	b.n	8002592 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <prvInsertTimerInActiveList+0x7c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3304      	adds	r3, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f7fe f8a8 	bl	80006ba <vListInsert>
 800256a:	e012      	b.n	8002592 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d206      	bcs.n	8002582 <prvInsertTimerInActiveList+0x62>
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d302      	bcc.n	8002582 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800257c:	2301      	movs	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e007      	b.n	8002592 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <prvInsertTimerInActiveList+0x80>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3304      	adds	r3, #4
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f7fe f894 	bl	80006ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002592:	697b      	ldr	r3, [r7, #20]
    }
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200001c4 	.word	0x200001c4
 80025a0:	200001c0 	.word	0x200001c0

080025a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80025aa:	e0a6      	b.n	80026fa <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f2c0 80a2 	blt.w	80026f8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe f8b1 	bl	800072c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff87 	bl	80024e0 <prvSampleTimeNow>
 80025d2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	2b08      	cmp	r3, #8
 80025da:	f200 808e 	bhi.w	80026fa <prvProcessReceivedCommands+0x156>
 80025de:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <prvProcessReceivedCommands+0x40>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	08002609 	.word	0x08002609
 80025e8:	08002609 	.word	0x08002609
 80025ec:	08002671 	.word	0x08002671
 80025f0:	08002685 	.word	0x08002685
 80025f4:	080026cf 	.word	0x080026cf
 80025f8:	08002609 	.word	0x08002609
 80025fc:	08002609 	.word	0x08002609
 8002600:	08002671 	.word	0x08002671
 8002604:	08002685 	.word	0x08002685
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	18d1      	adds	r1, r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	69f8      	ldr	r0, [r7, #28]
 8002628:	f7ff ff7a 	bl	8002520 <prvInsertTimerInActiveList>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d063      	beq.n	80026fa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	4413      	add	r3, r2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4619      	mov	r1, r3
 800264c:	69f8      	ldr	r0, [r7, #28]
 800264e:	f7ff fe71 	bl	8002334 <prvReloadTimer>
 8002652:	e008      	b.n	8002666 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	69f8      	ldr	r0, [r7, #28]
 800266c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800266e:	e044      	b.n	80026fa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002682:	e03a      	b.n	80026fa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <prvProcessReceivedCommands+0x116>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	617b      	str	r3, [r7, #20]
    }
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	18d1      	adds	r1, r2, r3
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	69f8      	ldr	r0, [r7, #28]
 80026c8:	f7ff ff2a 	bl	8002520 <prvInsertTimerInActiveList>
                        break;
 80026cc:	e015      	b.n	80026fa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80026dc:	69f8      	ldr	r0, [r7, #28]
 80026de:	f000 fc35 	bl	8002f4c <vPortFree>
 80026e2:	e00a      	b.n	80026fa <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80026f6:	e000      	b.n	80026fa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80026f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <prvProcessReceivedCommands+0x178>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f107 0108 	add.w	r1, r7, #8
 8002702:	2200      	movs	r2, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe f943 	bl	8000990 <xQueueReceive>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f af4d 	bne.w	80025ac <prvProcessReceivedCommands+0x8>
        }
    }
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200001c8 	.word	0x200001c8

08002720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002726:	e009      	b.n	800273c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <prvSwitchTimerLists+0x44>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002732:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	f7ff fe1e 	bl	8002378 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <prvSwitchTimerLists+0x44>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <prvSwitchTimerLists+0x44>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <prvSwitchTimerLists+0x48>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <prvSwitchTimerLists+0x44>)
 8002752:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <prvSwitchTimerLists+0x48>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
    }
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200001c0 	.word	0x200001c0
 8002768:	200001c4 	.word	0x200001c4

0800276c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002770:	f000 f9e0 	bl	8002b34 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <prvCheckForValidListAndQueue+0x54>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11d      	bne.n	80027b8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800277c:	4811      	ldr	r0, [pc, #68]	; (80027c4 <prvCheckForValidListAndQueue+0x58>)
 800277e:	f7fd ff4b 	bl	8000618 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002782:	4811      	ldr	r0, [pc, #68]	; (80027c8 <prvCheckForValidListAndQueue+0x5c>)
 8002784:	f7fd ff48 	bl	8000618 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <prvCheckForValidListAndQueue+0x60>)
 800278a:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <prvCheckForValidListAndQueue+0x58>)
 800278c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <prvCheckForValidListAndQueue+0x64>)
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <prvCheckForValidListAndQueue+0x5c>)
 8002792:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002794:	2200      	movs	r2, #0
 8002796:	210c      	movs	r1, #12
 8002798:	200a      	movs	r0, #10
 800279a:	f7fe f881 	bl	80008a0 <xQueueGenericCreate>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <prvCheckForValidListAndQueue+0x54>)
 80027a2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <prvCheckForValidListAndQueue+0x54>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <prvCheckForValidListAndQueue+0x54>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4908      	ldr	r1, [pc, #32]	; (80027d4 <prvCheckForValidListAndQueue+0x68>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fa8a 	bl	8000ccc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80027b8:	f000 f9ec 	bl	8002b94 <vPortExitCritical>
    }
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200001c8 	.word	0x200001c8
 80027c4:	20000198 	.word	0x20000198
 80027c8:	200001ac 	.word	0x200001ac
 80027cc:	200001c0 	.word	0x200001c0
 80027d0:	200001c4 	.word	0x200001c4
 80027d4:	08007bb4 	.word	0x08007bb4

080027d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3b04      	subs	r3, #4
 80027e8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3b04      	subs	r3, #4
 80027f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0201 	bic.w	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3b04      	subs	r3, #4
 8002806:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <pxPortInitialiseStack+0x64>)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3b14      	subs	r3, #20
 8002812:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b04      	subs	r3, #4
 800281e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f06f 0202 	mvn.w	r2, #2
 8002826:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3b20      	subs	r3, #32
 800282c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	08002841 	.word	0x08002841

08002840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <prvTaskExitError+0x54>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002852:	d00a      	beq.n	800286a <prvTaskExitError+0x2a>
        __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	60fb      	str	r3, [r7, #12]
    }
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <prvTaskExitError+0x28>
        __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	60bb      	str	r3, [r7, #8]
    }
 800287c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800287e:	bf00      	nop
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0fc      	beq.n	8002880 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	20000004 	.word	0x20000004
	...

080028a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <pxCurrentTCBConst2>)
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	6808      	ldr	r0, [r1, #0]
 80028a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028aa:	f380 8809 	msr	PSP, r0
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f04f 0000 	mov.w	r0, #0
 80028b6:	f380 8811 	msr	BASEPRI, r0
 80028ba:	4770      	bx	lr
 80028bc:	f3af 8000 	nop.w

080028c0 <pxCurrentTCBConst2>:
 80028c0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop

080028c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80028c8:	4808      	ldr	r0, [pc, #32]	; (80028ec <prvPortStartFirstTask+0x24>)
 80028ca:	6800      	ldr	r0, [r0, #0]
 80028cc:	6800      	ldr	r0, [r0, #0]
 80028ce:	f380 8808 	msr	MSP, r0
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f380 8814 	msr	CONTROL, r0
 80028da:	b662      	cpsie	i
 80028dc:	b661      	cpsie	f
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	df00      	svc	0
 80028e8:	bf00      	nop
 80028ea:	0000      	.short	0x0000
 80028ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop

080028f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <xPortStartScheduler+0x120>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <xPortStartScheduler+0x124>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10a      	bne.n	800291a <xPortStartScheduler+0x26>
        __asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	613b      	str	r3, [r7, #16]
    }
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800291a:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <xPortStartScheduler+0x120>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <xPortStartScheduler+0x128>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d10a      	bne.n	800293a <xPortStartScheduler+0x46>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60fb      	str	r3, [r7, #12]
    }
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <xPortStartScheduler+0x12c>)
 800293c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	22ff      	movs	r2, #255	; 0xff
 800294a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <xPortStartScheduler+0x130>)
 8002960:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002962:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <xPortStartScheduler+0x134>)
 8002964:	2207      	movs	r2, #7
 8002966:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002968:	e009      	b.n	800297e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <xPortStartScheduler+0x134>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <xPortStartScheduler+0x134>)
 8002972:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	2b80      	cmp	r3, #128	; 0x80
 8002988:	d0ef      	beq.n	800296a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <xPortStartScheduler+0x134>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1c3 0307 	rsb	r3, r3, #7
 8002992:	2b04      	cmp	r3, #4
 8002994:	d00a      	beq.n	80029ac <xPortStartScheduler+0xb8>
        __asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	60bb      	str	r3, [r7, #8]
    }
 80029a8:	bf00      	nop
 80029aa:	e7fe      	b.n	80029aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029ac:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <xPortStartScheduler+0x134>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <xPortStartScheduler+0x134>)
 80029b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <xPortStartScheduler+0x134>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029be:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <xPortStartScheduler+0x134>)
 80029c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <xPortStartScheduler+0x138>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <xPortStartScheduler+0x138>)
 80029d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <xPortStartScheduler+0x138>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <xPortStartScheduler+0x138>)
 80029dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80029e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80029e2:	f000 f963 	bl	8002cac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <xPortStartScheduler+0x13c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80029ec:	f000 f982 	bl	8002cf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <xPortStartScheduler+0x140>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <xPortStartScheduler+0x140>)
 80029f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80029fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80029fc:	f7ff ff64 	bl	80028c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002a00:	f7fe fede 	bl	80017c0 <vTaskSwitchContext>
    prvTaskExitError();
 8002a04:	f7ff ff1c 	bl	8002840 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00
 8002a18:	410fc271 	.word	0x410fc271
 8002a1c:	410fc270 	.word	0x410fc270
 8002a20:	e000e400 	.word	0xe000e400
 8002a24:	200001d4 	.word	0x200001d4
 8002a28:	200001d8 	.word	0x200001d8
 8002a2c:	e000ed20 	.word	0xe000ed20
 8002a30:	20000004 	.word	0x20000004
 8002a34:	e000ef34 	.word	0xe000ef34

08002a38 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <vInitPrioGroupValue+0xe4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <vInitPrioGroupValue+0xe8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10a      	bne.n	8002a5e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	613b      	str	r3, [r7, #16]
    }
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <vInitPrioGroupValue+0xe4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a30      	ldr	r2, [pc, #192]	; (8002b24 <vInitPrioGroupValue+0xec>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10a      	bne.n	8002a7e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	60fb      	str	r3, [r7, #12]
    }
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <vInitPrioGroupValue+0xf0>)
 8002a80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <vInitPrioGroupValue+0xf4>)
 8002aa4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002aac:	e009      	b.n	8002ac2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002ab6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d0ef      	beq.n	8002aae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00a      	beq.n	8002af0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	60bb      	str	r3, [r7, #8]
    }
 8002aec:	bf00      	nop
 8002aee:	e7fe      	b.n	8002aee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002af8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <vInitPrioGroupValue+0xf8>)
 8002b04:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00
 8002b20:	410fc271 	.word	0x410fc271
 8002b24:	410fc270 	.word	0x410fc270
 8002b28:	e000e400 	.word	0xe000e400
 8002b2c:	200001d4 	.word	0x200001d4
 8002b30:	200001d8 	.word	0x200001d8

08002b34 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
        __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	607b      	str	r3, [r7, #4]
    }
 8002b4c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <vPortEnterCritical+0x58>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <vPortEnterCritical+0x58>)
 8002b56:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <vPortEnterCritical+0x58>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10f      	bne.n	8002b80 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <vPortEnterCritical+0x5c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <vPortEnterCritical+0x4c>
        __asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	603b      	str	r3, [r7, #0]
    }
 8002b7c:	bf00      	nop
 8002b7e:	e7fe      	b.n	8002b7e <vPortEnterCritical+0x4a>
    }
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	e000ed04 	.word	0xe000ed04

08002b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <vPortExitCritical+0x50>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <vPortExitCritical+0x24>
        __asm volatile
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	607b      	str	r3, [r7, #4]
    }
 8002bb4:	bf00      	nop
 8002bb6:	e7fe      	b.n	8002bb6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <vPortExitCritical+0x50>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <vPortExitCritical+0x50>)
 8002bc0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <vPortExitCritical+0x50>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <vPortExitCritical+0x42>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f383 8811 	msr	BASEPRI, r3
    }
 8002bd4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000004 	.word	0x20000004
	...

08002bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002bf0:	f3ef 8009 	mrs	r0, PSP
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <pxCurrentTCBConst>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f01e 0f10 	tst.w	lr, #16
 8002c00:	bf08      	it	eq
 8002c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	6010      	str	r0, [r2, #0]
 8002c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c14:	f380 8811 	msr	BASEPRI, r0
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f7fe fdce 	bl	80017c0 <vTaskSwitchContext>
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f380 8811 	msr	BASEPRI, r0
 8002c2c:	bc09      	pop	{r0, r3}
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	6808      	ldr	r0, [r1, #0]
 8002c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c36:	f01e 0f10 	tst.w	lr, #16
 8002c3a:	bf08      	it	eq
 8002c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c40:	f380 8809 	msr	PSP, r0
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst>:
 8002c50:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	607b      	str	r3, [r7, #4]
    }
 8002c70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002c72:	f001 ff0f 	bl	8004a94 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c76:	f7fe fc89 	bl	800158c <xTaskIncrementTick>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002c80:	f001 ff66 	bl	8004b50 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <SysTick_Handler+0x50>)
 8002c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e001      	b.n	8002c92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002c8e:	f001 ff43 	bl	8004b18 <SEGGER_SYSVIEW_RecordExitISR>
 8002c92:	2300      	movs	r3, #0
 8002c94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f383 8811 	msr	BASEPRI, r3
    }
 8002c9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <vPortSetupTimerInterrupt+0x34>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <vPortSetupTimerInterrupt+0x38>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <vPortSetupTimerInterrupt+0x3c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <vPortSetupTimerInterrupt+0x40>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <vPortSetupTimerInterrupt+0x44>)
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <vPortSetupTimerInterrupt+0x34>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010
 8002ce4:	e000e018 	.word	0xe000e018
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	10624dd3 	.word	0x10624dd3
 8002cf0:	e000e014 	.word	0xe000e014

08002cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d04 <vPortEnableVFP+0x10>
 8002cf8:	6801      	ldr	r1, [r0, #0]
 8002cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cfe:	6001      	str	r1, [r0, #0]
 8002d00:	4770      	bx	lr
 8002d02:	0000      	.short	0x0000
 8002d04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop

08002d0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002d12:	f3ef 8305 	mrs	r3, IPSR
 8002d16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b0f      	cmp	r3, #15
 8002d1c:	d914      	bls.n	8002d48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d1e:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <vPortValidateInterruptPriority+0x70>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <vPortValidateInterruptPriority+0x74>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	7afa      	ldrb	r2, [r7, #11]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d20a      	bcs.n	8002d48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	607b      	str	r3, [r7, #4]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <vPortValidateInterruptPriority+0x78>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <vPortValidateInterruptPriority+0x7c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d90a      	bls.n	8002d6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	603b      	str	r3, [r7, #0]
    }
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <vPortValidateInterruptPriority+0x60>
    }
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e3f0 	.word	0xe000e3f0
 8002d80:	200001d4 	.word	0x200001d4
 8002d84:	e000ed0c 	.word	0xe000ed0c
 8002d88:	200001d8 	.word	0x200001d8

08002d8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002d98:	f7fe fac8 	bl	800132c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002d9c:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <pvPortMalloc+0x1a8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002da4:	f000 f934 	bl	8003010 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002da8:	4b63      	ldr	r3, [pc, #396]	; (8002f38 <pvPortMalloc+0x1ac>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 80a7 	bne.w	8002f04 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d02d      	beq.n	8002e18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d227      	bcs.n	8002e18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002dc8:	2208      	movs	r2, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d021      	beq.n	8002e1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f023 0307 	bic.w	r3, r3, #7
 8002de0:	3308      	adds	r3, #8
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d214      	bcs.n	8002e12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f023 0307 	bic.w	r3, r3, #7
 8002dee:	3308      	adds	r3, #8
 8002df0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <pvPortMalloc+0x92>
        __asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	617b      	str	r3, [r7, #20]
    }
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e16:	e002      	b.n	8002e1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	e000      	b.n	8002e20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d06e      	beq.n	8002f04 <pvPortMalloc+0x178>
 8002e26:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <pvPortMalloc+0x1b0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d869      	bhi.n	8002f04 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e30:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <pvPortMalloc+0x1b4>)
 8002e32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <pvPortMalloc+0x1b4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e3a:	e004      	b.n	8002e46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d903      	bls.n	8002e58 <pvPortMalloc+0xcc>
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f1      	bne.n	8002e3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <pvPortMalloc+0x1a8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d050      	beq.n	8002f04 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2208      	movs	r2, #8
 8002e68:	4413      	add	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	1ad2      	subs	r2, r2, r3
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d91f      	bls.n	8002ec4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <pvPortMalloc+0x120>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	613b      	str	r3, [r7, #16]
    }
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	1ad2      	subs	r2, r2, r3
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ebe:	69b8      	ldr	r0, [r7, #24]
 8002ec0:	f000 f908 	bl	80030d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <pvPortMalloc+0x1b0>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <pvPortMalloc+0x1b0>)
 8002ed0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <pvPortMalloc+0x1b0>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <pvPortMalloc+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d203      	bcs.n	8002ee6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <pvPortMalloc+0x1b0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <pvPortMalloc+0x1b8>)
 8002ee4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <pvPortMalloc+0x1ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <pvPortMalloc+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <pvPortMalloc+0x1bc>)
 8002f02:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002f04:	f7fe fa20 	bl	8001348 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <pvPortMalloc+0x19c>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	60fb      	str	r3, [r7, #12]
    }
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <pvPortMalloc+0x19a>
    return pvReturn;
 8002f28:	69fb      	ldr	r3, [r7, #28]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3728      	adds	r7, #40	; 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20012de4 	.word	0x20012de4
 8002f38:	20012df8 	.word	0x20012df8
 8002f3c:	20012de8 	.word	0x20012de8
 8002f40:	20012ddc 	.word	0x20012ddc
 8002f44:	20012dec 	.word	0x20012dec
 8002f48:	20012df0 	.word	0x20012df0

08002f4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d04d      	beq.n	8002ffa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002f5e:	2308      	movs	r3, #8
 8002f60:	425b      	negs	r3, r3
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4413      	add	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <vPortFree+0xb8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <vPortFree+0x44>
        __asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	60fb      	str	r3, [r7, #12]
    }
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <vPortFree+0x62>
        __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	60bb      	str	r3, [r7, #8]
    }
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <vPortFree+0xb8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01e      	beq.n	8002ffa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11a      	bne.n	8002ffa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <vPortFree+0xb8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002fd4:	f7fe f9aa 	bl	800132c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <vPortFree+0xbc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a09      	ldr	r2, [pc, #36]	; (8003008 <vPortFree+0xbc>)
 8002fe4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fe6:	6938      	ldr	r0, [r7, #16]
 8002fe8:	f000 f874 	bl	80030d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <vPortFree+0xc0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a06      	ldr	r2, [pc, #24]	; (800300c <vPortFree+0xc0>)
 8002ff4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002ff6:	f7fe f9a7 	bl	8001348 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20012df8 	.word	0x20012df8
 8003008:	20012de8 	.word	0x20012de8
 800300c:	20012df4 	.word	0x20012df4

08003010 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003016:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800301a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <prvHeapInit+0xac>)
 800301e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3307      	adds	r3, #7
 800302e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <prvHeapInit+0xac>)
 8003040:	4413      	add	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <prvHeapInit+0xb0>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <prvHeapInit+0xb0>)
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800305c:	2208      	movs	r2, #8
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0307 	bic.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <prvHeapInit+0xb4>)
 8003070:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <prvHeapInit+0xb4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <prvHeapInit+0xb4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	1ad2      	subs	r2, r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <prvHeapInit+0xb4>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <prvHeapInit+0xb8>)
 800309e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a09      	ldr	r2, [pc, #36]	; (80030cc <prvHeapInit+0xbc>)
 80030a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <prvHeapInit+0xc0>)
 80030aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030ae:	601a      	str	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	200001dc 	.word	0x200001dc
 80030c0:	20012ddc 	.word	0x20012ddc
 80030c4:	20012de4 	.word	0x20012de4
 80030c8:	20012dec 	.word	0x20012dec
 80030cc:	20012de8 	.word	0x20012de8
 80030d0:	20012df8 	.word	0x20012df8

080030d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030dc:	4b28      	ldr	r3, [pc, #160]	; (8003180 <prvInsertBlockIntoFreeList+0xac>)
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e002      	b.n	80030e8 <prvInsertBlockIntoFreeList+0x14>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d8f7      	bhi.n	80030e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4413      	add	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d108      	bne.n	8003116 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	441a      	add	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d118      	bne.n	800315c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <prvInsertBlockIntoFreeList+0xb0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d00d      	beq.n	8003152 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	441a      	add	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e008      	b.n	8003164 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <prvInsertBlockIntoFreeList+0xb0>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e003      	b.n	8003164 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d002      	beq.n	8003172 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20012ddc 	.word	0x20012ddc
 8003184:	20012de4 	.word	0x20012de4

08003188 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800318c:	4803      	ldr	r0, [pc, #12]	; (800319c <_cbSendSystemDesc+0x14>)
 800318e:	f001 fc2b 	bl	80049e8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003192:	4803      	ldr	r0, [pc, #12]	; (80031a0 <_cbSendSystemDesc+0x18>)
 8003194:	f001 fc28 	bl	80049e8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}
 800319c:	08007bbc 	.word	0x08007bbc
 80031a0:	08007bf8 	.word	0x08007bf8

080031a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80031b2:	4a06      	ldr	r2, [pc, #24]	; (80031cc <SEGGER_SYSVIEW_Conf+0x28>)
 80031b4:	f000 fee8 	bl	8003f88 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80031b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80031bc:	f000 ff28 	bl	8004010 <SEGGER_SYSVIEW_SetRAMBase>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000008 	.word	0x20000008
 80031c8:	08003189 	.word	0x08003189
 80031cc:	08007ccc 	.word	0x08007ccc

080031d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	e033      	b.n	8003244 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80031dc:	491e      	ldr	r1, [pc, #120]	; (8003258 <_cbSendTaskList+0x88>)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	491a      	ldr	r1, [pc, #104]	; (8003258 <_cbSendTaskList+0x88>)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3304      	adds	r3, #4
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	4c16      	ldr	r4, [pc, #88]	; (8003258 <_cbSendTaskList+0x88>)
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4423      	add	r3, r4
 800320c:	3308      	adds	r3, #8
 800320e:	681c      	ldr	r4, [r3, #0]
 8003210:	4d11      	ldr	r5, [pc, #68]	; (8003258 <_cbSendTaskList+0x88>)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	442b      	add	r3, r5
 800321e:	330c      	adds	r3, #12
 8003220:	681d      	ldr	r5, [r3, #0]
 8003222:	4e0d      	ldr	r6, [pc, #52]	; (8003258 <_cbSendTaskList+0x88>)
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4433      	add	r3, r6
 8003230:	3310      	adds	r3, #16
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	462b      	mov	r3, r5
 8003238:	4622      	mov	r2, r4
 800323a:	f000 f971 	bl	8003520 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3301      	adds	r3, #1
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <_cbSendTaskList+0x8c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d3c6      	bcc.n	80031dc <_cbSendTaskList+0xc>
  }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003258:	20012dfc 	.word	0x20012dfc
 800325c:	20012e9c 	.word	0x20012e9c

08003260 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003266:	f7fe f97f 	bl	8001568 <xTaskGetTickCountFromISR>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	f04f 0500 	mov.w	r5, #0
 8003286:	015d      	lsls	r5, r3, #5
 8003288:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800328c:	0154      	lsls	r4, r2, #5
 800328e:	4622      	mov	r2, r4
 8003290:	462b      	mov	r3, r5
 8003292:	1a12      	subs	r2, r2, r0
 8003294:	eb63 0301 	sbc.w	r3, r3, r1
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	f04f 0500 	mov.w	r5, #0
 80032a0:	009d      	lsls	r5, r3, #2
 80032a2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80032a6:	0094      	lsls	r4, r2, #2
 80032a8:	4622      	mov	r2, r4
 80032aa:	462b      	mov	r3, r5
 80032ac:	1812      	adds	r2, r2, r0
 80032ae:	eb41 0303 	adc.w	r3, r1, r3
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	00d9      	lsls	r1, r3, #3
 80032bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c0:	00d0      	lsls	r0, r2, #3
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80032ca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdb0      	pop	{r4, r5, r7, pc}

080032d8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80032e6:	2205      	movs	r2, #5
 80032e8:	492b      	ldr	r1, [pc, #172]	; (8003398 <SYSVIEW_AddTask+0xc0>)
 80032ea:	68b8      	ldr	r0, [r7, #8]
 80032ec:	f003 fce6 	bl	8006cbc <memcmp>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d04b      	beq.n	800338e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <SYSVIEW_AddTask+0xc4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b07      	cmp	r3, #7
 80032fc:	d903      	bls.n	8003306 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80032fe:	4828      	ldr	r0, [pc, #160]	; (80033a0 <SYSVIEW_AddTask+0xc8>)
 8003300:	f001 fe70 	bl	8004fe4 <SEGGER_SYSVIEW_Warn>
    return;
 8003304:	e044      	b.n	8003390 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003306:	4b25      	ldr	r3, [pc, #148]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4926      	ldr	r1, [pc, #152]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <SYSVIEW_AddTask+0xc4>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4921      	ldr	r1, [pc, #132]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3304      	adds	r3, #4
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	491b      	ldr	r1, [pc, #108]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	3308      	adds	r3, #8
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4916      	ldr	r1, [pc, #88]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	330c      	adds	r3, #12
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <SYSVIEW_AddTask+0xc4>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3310      	adds	r3, #16
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <SYSVIEW_AddTask+0xc4>)
 800337a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f8ca 	bl	8003520 <SYSVIEW_SendTaskInfo>
 800338c:	e000      	b.n	8003390 <SYSVIEW_AddTask+0xb8>
    return;
 800338e:	bf00      	nop

}
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	08007c08 	.word	0x08007c08
 800339c:	20012e9c 	.word	0x20012e9c
 80033a0:	08007c10 	.word	0x08007c10
 80033a4:	20012dfc 	.word	0x20012dfc

080033a8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80ab 	beq.w	8003510 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e00d      	b.n	80033dc <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80033c0:	4956      	ldr	r1, [pc, #344]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d008      	beq.n	80033e8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	4b4e      	ldr	r3, [pc, #312]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3ec      	bcc.n	80033c0 <SYSVIEW_DeleteTask+0x18>
 80033e6:	e000      	b.n	80033ea <SYSVIEW_DeleteTask+0x42>
      break;
 80033e8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80033ea:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d111      	bne.n	800341a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4a46      	ldr	r2, [pc, #280]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 8003402:	4413      	add	r3, r2
 8003404:	2214      	movs	r2, #20
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f003 fc73 	bl	8006cf4 <memset>
    _NumTasks--;
 800340e:	4b42      	ldr	r3, [pc, #264]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3b01      	subs	r3, #1
 8003414:	4a40      	ldr	r2, [pc, #256]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	e07b      	b.n	8003512 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	429a      	cmp	r2, r3
 8003422:	d276      	bcs.n	8003512 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	493c      	ldr	r1, [pc, #240]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	4838      	ldr	r0, [pc, #224]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4403      	add	r3, r0
 8003446:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003448:	4b33      	ldr	r3, [pc, #204]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	4933      	ldr	r1, [pc, #204]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3304      	adds	r3, #4
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	482f      	ldr	r0, [pc, #188]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4403      	add	r3, r0
 800346c:	3304      	adds	r3, #4
 800346e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1e5a      	subs	r2, r3, #1
 8003476:	4929      	ldr	r1, [pc, #164]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3308      	adds	r3, #8
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	4825      	ldr	r0, [pc, #148]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4403      	add	r3, r0
 8003494:	3308      	adds	r3, #8
 8003496:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	491f      	ldr	r1, [pc, #124]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	330c      	adds	r3, #12
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	481b      	ldr	r0, [pc, #108]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	330c      	adds	r3, #12
 80034be:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	4915      	ldr	r1, [pc, #84]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3310      	adds	r3, #16
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	4811      	ldr	r0, [pc, #68]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4403      	add	r3, r0
 80034e4:	3310      	adds	r3, #16
 80034e6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1e5a      	subs	r2, r3, #1
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <SYSVIEW_DeleteTask+0x174>)
 80034f8:	4413      	add	r3, r2
 80034fa:	2214      	movs	r2, #20
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fbf8 	bl	8006cf4 <memset>
    _NumTasks--;
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3b01      	subs	r3, #1
 800350a:	4a03      	ldr	r2, [pc, #12]	; (8003518 <SYSVIEW_DeleteTask+0x170>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e000      	b.n	8003512 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003510:	bf00      	nop
  }
}
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20012e9c 	.word	0x20012e9c
 800351c:	20012dfc 	.word	0x20012dfc

08003520 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	2214      	movs	r2, #20
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fbdc 	bl	8006cf4 <memset>
  TaskInfo.TaskID     = TaskID;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4618      	mov	r0, r3
 8003556:	f001 f94f 	bl	80047f8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <_DoInit+0x98>)
 800356c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2203      	movs	r2, #3
 8003572:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2203      	movs	r2, #3
 8003578:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <_DoInit+0x9c>)
 800357e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <_DoInit+0xa0>)
 8003584:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800358c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <_DoInit+0x9c>)
 80035a4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <_DoInit+0xa4>)
 80035aa:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2210      	movs	r2, #16
 80035b0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3307      	adds	r3, #7
 80035c8:	4a10      	ldr	r2, [pc, #64]	; (800360c <_DoInit+0xa8>)
 80035ca:	6810      	ldr	r0, [r2, #0]
 80035cc:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80035ce:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <_DoInit+0xac>)
 80035d6:	6810      	ldr	r0, [r2, #0]
 80035d8:	6018      	str	r0, [r3, #0]
 80035da:	8891      	ldrh	r1, [r2, #4]
 80035dc:	7992      	ldrb	r2, [r2, #6]
 80035de:	8099      	strh	r1, [r3, #4]
 80035e0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80035e2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80035ec:	f3bf 8f5f 	dmb	sy
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	20013c18 	.word	0x20013c18
 8003600:	08007c60 	.word	0x08007c60
 8003604:	20012ea0 	.word	0x20012ea0
 8003608:	200132a0 	.word	0x200132a0
 800360c:	08007c6c 	.word	0x08007c6c
 8003610:	08007c70 	.word	0x08007c70

08003614 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003620:	2300      	movs	r3, #0
 8003622:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	429a      	cmp	r2, r3
 8003636:	d905      	bls.n	8003644 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	e007      	b.n	8003654 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	1acb      	subs	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3b01      	subs	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	4293      	cmp	r3, r2
 8003660:	bf28      	it	cs
 8003662:	4613      	movcs	r3, r2
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4293      	cmp	r3, r2
 800366c:	bf28      	it	cs
 800366e:	4613      	movcs	r3, r2
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800367c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	f003 fb29 	bl	8006cd8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003686:	6a3a      	ldr	r2, [r7, #32]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	4413      	add	r3, r2
 800368c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	4413      	add	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	4413      	add	r3, r2
 80036a4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d101      	bne.n	80036b4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80036b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1b2      	bne.n	800362a <_WriteBlocking+0x16>
  return NumBytesWritten;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b088      	sub	sp, #32
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d911      	bls.n	8003716 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	6938      	ldr	r0, [r7, #16]
 8003702:	f003 fae9 	bl	8006cd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003706:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003714:	e01f      	b.n	8003756 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6938      	ldr	r0, [r7, #16]
 800372a:	f003 fad5 	bl	8006cd8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4619      	mov	r1, r3
 8003746:	6938      	ldr	r0, [r7, #16]
 8003748:	f003 fac6 	bl	8006cd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800374c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	60da      	str	r2, [r3, #12]
}
 8003756:	bf00      	nop
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	429a      	cmp	r2, r3
 8003778:	d808      	bhi.n	800378c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad2      	subs	r2, r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	3b01      	subs	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e004      	b.n	8003796 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003796:	697b      	ldr	r3, [r7, #20]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80037b0:	4b3e      	ldr	r3, [pc, #248]	; (80038ac <SEGGER_RTT_ReadNoLock+0x108>)
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <SEGGER_RTT_ReadNoLock+0x1e>
 80037be:	f7ff fed1 	bl	8003564 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	3360      	adds	r3, #96	; 0x60
 80037ce:	4a37      	ldr	r2, [pc, #220]	; (80038ac <SEGGER_RTT_ReadNoLock+0x108>)
 80037d0:	4413      	add	r3, r2
 80037d2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80037e4:	2300      	movs	r3, #0
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80037e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d92b      	bls.n	8003848 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4293      	cmp	r3, r2
 8003800:	bf28      	it	cs
 8003802:	4613      	movcs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	4413      	add	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003816:	f003 fa5f 	bl	8006cd8 <memcpy>
    NumBytesRead += NumBytesRem;
 800381a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	4413      	add	r3, r2
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4413      	add	r3, r2
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4413      	add	r3, r2
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003840:	429a      	cmp	r2, r3
 8003842:	d101      	bne.n	8003848 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003844:	2300      	movs	r3, #0
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4293      	cmp	r3, r2
 8003856:	bf28      	it	cs
 8003858:	4613      	movcs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d019      	beq.n	8003896 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	4413      	add	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	6939      	ldr	r1, [r7, #16]
 8003870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003872:	f003 fa31 	bl	8006cd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4413      	add	r3, r2
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	4413      	add	r3, r2
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800388e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4413      	add	r3, r2
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3730      	adds	r7, #48	; 0x30
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20013c18 	.word	0x20013c18

080038b0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4a1f      	ldr	r2, [pc, #124]	; (800394c <SEGGER_RTT_WriteNoLock+0x9c>)
 80038ce:	4413      	add	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d029      	beq.n	800392e <SEGGER_RTT_WriteNoLock+0x7e>
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d82e      	bhi.n	800393c <SEGGER_RTT_WriteNoLock+0x8c>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <SEGGER_RTT_WriteNoLock+0x38>
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d013      	beq.n	800390e <SEGGER_RTT_WriteNoLock+0x5e>
 80038e6:	e029      	b.n	800393c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80038e8:	6978      	ldr	r0, [r7, #20]
 80038ea:	f7ff ff38 	bl	800375e <_GetAvailWriteSpace>
 80038ee:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d202      	bcs.n	80038fe <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80038fc:	e021      	b.n	8003942 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	6978      	ldr	r0, [r7, #20]
 8003908:	f7ff fee1 	bl	80036ce <_WriteNoCheck>
    break;
 800390c:	e019      	b.n	8003942 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff ff25 	bl	800375e <_GetAvailWriteSpace>
 8003914:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4293      	cmp	r3, r2
 800391c:	bf28      	it	cs
 800391e:	4613      	movcs	r3, r2
 8003920:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	69b9      	ldr	r1, [r7, #24]
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff fed1 	bl	80036ce <_WriteNoCheck>
    break;
 800392c:	e009      	b.n	8003942 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	69b9      	ldr	r1, [r7, #24]
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff fe6e 	bl	8003614 <_WriteBlocking>
 8003938:	61f8      	str	r0, [r7, #28]
    break;
 800393a:	e002      	b.n	8003942 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
    break;
 8003940:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003942:	69fb      	ldr	r3, [r7, #28]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20013c18 	.word	0x20013c18

08003950 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <SEGGER_RTT_Write+0x48>)
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <SEGGER_RTT_Write+0x1e>
 800396a:	f7ff fdfb 	bl	8003564 <_DoInit>
  SEGGER_RTT_LOCK();
 800396e:	f3ef 8311 	mrs	r3, BASEPRI
 8003972:	f04f 0120 	mov.w	r1, #32
 8003976:	f381 8811 	msr	BASEPRI, r1
 800397a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff ff95 	bl	80038b0 <SEGGER_RTT_WriteNoLock>
 8003986:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800398e:	697b      	ldr	r3, [r7, #20]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20013c18 	.word	0x20013c18

0800399c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80039aa:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <SEGGER_RTT_AllocUpBuffer+0x20>
 80039b8:	f7ff fdd4 	bl	8003564 <_DoInit>
  SEGGER_RTT_LOCK();
 80039bc:	f3ef 8311 	mrs	r3, BASEPRI
 80039c0:	f04f 0120 	mov.w	r1, #32
 80039c4:	f381 8811 	msr	BASEPRI, r1
 80039c8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039ca:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039cc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80039d2:	6939      	ldr	r1, [r7, #16]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	3304      	adds	r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3301      	adds	r3, #1
 80039ee:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	dbeb      	blt.n	80039d2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80039fa:	e000      	b.n	80039fe <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80039fc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	da3f      	bge.n	8003a88 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003a08:	6939      	ldr	r1, [r7, #16]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a1c:	6939      	ldr	r1, [r7, #16]
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a32:	6939      	ldr	r1, [r7, #16]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	3320      	adds	r3, #32
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003a46:	6939      	ldr	r1, [r7, #16]
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	440b      	add	r3, r1
 8003a54:	3328      	adds	r3, #40	; 0x28
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003a5a:	6939      	ldr	r1, [r7, #16]
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	440b      	add	r3, r1
 8003a68:	3324      	adds	r3, #36	; 0x24
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003a6e:	6939      	ldr	r1, [r7, #16]
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	332c      	adds	r3, #44	; 0x2c
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a82:	f3bf 8f5f 	dmb	sy
 8003a86:	e002      	b.n	8003a8e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a8c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003a94:	69fb      	ldr	r3, [r7, #28]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20013c18 	.word	0x20013c18

08003aa4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003ac0:	f7ff fd50 	bl	8003564 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003ac6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d82c      	bhi.n	8003b28 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003ace:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad2:	f04f 0120 	mov.w	r1, #32
 8003ad6:	f381 8811 	msr	BASEPRI, r1
 8003ada:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	3360      	adds	r3, #96	; 0x60
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b18:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	e002      	b.n	8003b2e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20013c18 	.word	0x20013c18

08003b3c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00f      	beq.n	8003b72 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003b52:	e002      	b.n	8003b5a <_EncodeStr+0x1e>
      Len++;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	3301      	adds	r3, #1
 8003b58:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f6      	bne.n	8003b54 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d901      	bls.n	8003b72 <_EncodeStr+0x36>
      Len = Limit;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2bfe      	cmp	r3, #254	; 0xfe
 8003b76:	d806      	bhi.n	8003b86 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	60fa      	str	r2, [r7, #12]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e011      	b.n	8003baa <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	60fa      	str	r2, [r7, #12]
 8003b8c:	22ff      	movs	r2, #255	; 0xff
 8003b8e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	60fa      	str	r2, [r7, #12]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	0a19      	lsrs	r1, r3, #8
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	60fa      	str	r2, [r7, #12]
 8003ba6:	b2ca      	uxtb	r2, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003bae:	e00a      	b.n	8003bc6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	1c53      	adds	r3, r2, #1
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	60f9      	str	r1, [r7, #12]
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	701a      	strb	r2, [r3, #0]
    n++;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3f0      	bcc.n	8003bb0 <_EncodeStr+0x74>
  }
  return pPayload;
 8003bce:	68fb      	ldr	r3, [r7, #12]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003bfa:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <_HandleIncomingPacket+0xe0>)
 8003bfc:	7e1b      	ldrb	r3, [r3, #24]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	1cfb      	adds	r3, r7, #3
 8003c02:	2201      	movs	r2, #1
 8003c04:	4619      	mov	r1, r3
 8003c06:	f7ff fdcd 	bl	80037a4 <SEGGER_RTT_ReadNoLock>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	dd54      	ble.n	8003cbe <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d032      	beq.n	8003c80 <_HandleIncomingPacket+0x8c>
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	dc42      	bgt.n	8003ca4 <_HandleIncomingPacket+0xb0>
 8003c1e:	2b07      	cmp	r3, #7
 8003c20:	dc16      	bgt.n	8003c50 <_HandleIncomingPacket+0x5c>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	dd3e      	ble.n	8003ca4 <_HandleIncomingPacket+0xb0>
 8003c26:	3b01      	subs	r3, #1
 8003c28:	2b06      	cmp	r3, #6
 8003c2a:	d83b      	bhi.n	8003ca4 <_HandleIncomingPacket+0xb0>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <_HandleIncomingPacket+0x40>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c57 	.word	0x08003c57
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c63 	.word	0x08003c63
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c6f 	.word	0x08003c6f
 8003c48:	08003c75 	.word	0x08003c75
 8003c4c:	08003c7b 	.word	0x08003c7b
 8003c50:	2b7f      	cmp	r3, #127	; 0x7f
 8003c52:	d036      	beq.n	8003cc2 <_HandleIncomingPacket+0xce>
 8003c54:	e026      	b.n	8003ca4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003c56:	f000 fc55 	bl	8004504 <SEGGER_SYSVIEW_Start>
      break;
 8003c5a:	e037      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003c5c:	f000 fd0c 	bl	8004678 <SEGGER_SYSVIEW_Stop>
      break;
 8003c60:	e034      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003c62:	f000 fee5 	bl	8004a30 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003c66:	e031      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003c68:	f000 feaa 	bl	80049c0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003c6c:	e02e      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003c6e:	f000 fd29 	bl	80046c4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003c72:	e02b      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003c74:	f001 f978 	bl	8004f68 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003c78:	e028      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003c7a:	f001 f957 	bl	8004f2c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003c7e:	e025      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c80:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <_HandleIncomingPacket+0xe0>)
 8003c82:	7e1b      	ldrb	r3, [r3, #24]
 8003c84:	4618      	mov	r0, r3
 8003c86:	1cfb      	adds	r3, r7, #3
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f7ff fd8a 	bl	80037a4 <SEGGER_RTT_ReadNoLock>
 8003c90:	4603      	mov	r3, r0
 8003c92:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	dd15      	ble.n	8003cc6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 f8c5 	bl	8004e2c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003ca2:	e010      	b.n	8003cc6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	da0e      	bge.n	8003cca <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <_HandleIncomingPacket+0xe0>)
 8003cae:	7e1b      	ldrb	r3, [r3, #24]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	1cfb      	adds	r3, r7, #3
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f7ff fd74 	bl	80037a4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003cbc:	e005      	b.n	8003cca <_HandleIncomingPacket+0xd6>
    }
  }
 8003cbe:	bf00      	nop
 8003cc0:	e004      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e002      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <_HandleIncomingPacket+0xd8>
      break;
 8003cca:	bf00      	nop
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20013ab8 	.word	0x20013ab8

08003cd8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	; 0x30
 8003cdc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003cde:	2301      	movs	r3, #1
 8003ce0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cec:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf2:	e00b      	b.n	8003d0c <_TrySendOverflowPacket+0x34>
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	09db      	lsrs	r3, r3, #7
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d10:	d8f0      	bhi.n	8003cf4 <_TrySendOverflowPacket+0x1c>
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <_TrySendOverflowPacket+0xe0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	e00b      	b.n	8003d54 <_TrySendOverflowPacket+0x7c>
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	1c59      	adds	r1, r3, #1
 8003d44:	6279      	str	r1, [r7, #36]	; 0x24
 8003d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	09db      	lsrs	r3, r3, #7
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b7f      	cmp	r3, #127	; 0x7f
 8003d58:	d8f0      	bhi.n	8003d3c <_TrySendOverflowPacket+0x64>
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f7fc fa30 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003d80:	4603      	mov	r3, r0
 8003d82:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e004      	b.n	8003da8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	3301      	adds	r3, #1
 8003da4:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <_TrySendOverflowPacket+0xdc>)
 8003da6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003da8:	693b      	ldr	r3, [r7, #16]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3730      	adds	r7, #48	; 0x30
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20013ab8 	.word	0x20013ab8
 8003db8:	e0001004 	.word	0xe0001004

08003dbc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003dc8:	4b6c      	ldr	r3, [pc, #432]	; (8003f7c <_SendPacket+0x1c0>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d010      	beq.n	8003df2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <_SendPacket+0x1c0>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a3 	beq.w	8003f20 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003dda:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <_SendPacket+0x1c0>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d109      	bne.n	8003df6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003de2:	f7ff ff79 	bl	8003cd8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <_SendPacket+0x1c0>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 809a 	bne.w	8003f24 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003df0:	e001      	b.n	8003df6 <_SendPacket+0x3a>
    goto Send;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <_SendPacket+0x3c>
Send:
 8003df6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b1f      	cmp	r3, #31
 8003dfc:	d809      	bhi.n	8003e12 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003dfe:	4b5f      	ldr	r3, [pc, #380]	; (8003f7c <_SendPacket+0x1c0>)
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 808b 	bne.w	8003f28 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b17      	cmp	r3, #23
 8003e16:	d807      	bhi.n	8003e28 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e03d      	b.n	8003ea4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b7f      	cmp	r3, #127	; 0x7f
 8003e34:	d912      	bls.n	8003e5c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	09da      	lsrs	r2, r3, #7
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	60fa      	str	r2, [r7, #12]
 8003e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e006      	b.n	8003e6a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e6e:	d912      	bls.n	8003e96 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	09da      	lsrs	r2, r3, #7
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	3a01      	subs	r2, #1
 8003e88:	60fa      	str	r2, [r7, #12]
 8003e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e006      	b.n	8003ea4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <_SendPacket+0x1c4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003eaa:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <_SendPacket+0x1c0>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	623b      	str	r3, [r7, #32]
 8003ebc:	e00b      	b.n	8003ed6 <_SendPacket+0x11a>
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	1c59      	adds	r1, r3, #1
 8003ec6:	6279      	str	r1, [r7, #36]	; 0x24
 8003ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	09db      	lsrs	r3, r3, #7
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eda:	d8f0      	bhi.n	8003ebe <_SendPacket+0x102>
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <_SendPacket+0x1c0>)
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f7fc f970 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f00:	4603      	mov	r3, r0
 8003f02:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <_SendPacket+0x1c0>)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	60d3      	str	r3, [r2, #12]
 8003f10:	e00b      	b.n	8003f2a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <_SendPacket+0x1c0>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <_SendPacket+0x1c0>)
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e004      	b.n	8003f2a <_SendPacket+0x16e>
    goto SendDone;
 8003f20:	bf00      	nop
 8003f22:	e002      	b.n	8003f2a <_SendPacket+0x16e>
      goto SendDone;
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <_SendPacket+0x16e>
      goto SendDone;
 8003f28:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <_SendPacket+0x1c0>)
 8003f2c:	7e1b      	ldrb	r3, [r3, #24]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <_SendPacket+0x1c8>)
 8003f32:	460b      	mov	r3, r1
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	440b      	add	r3, r1
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	336c      	adds	r3, #108	; 0x6c
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <_SendPacket+0x1c0>)
 8003f42:	7e1b      	ldrb	r3, [r3, #24]
 8003f44:	4618      	mov	r0, r3
 8003f46:	490f      	ldr	r1, [pc, #60]	; (8003f84 <_SendPacket+0x1c8>)
 8003f48:	4603      	mov	r3, r0
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4403      	add	r3, r0
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	3370      	adds	r3, #112	; 0x70
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d00b      	beq.n	8003f72 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <_SendPacket+0x1c0>)
 8003f5c:	789b      	ldrb	r3, [r3, #2]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d107      	bne.n	8003f72 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <_SendPacket+0x1c0>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003f68:	f7ff fe44 	bl	8003bf4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <_SendPacket+0x1c0>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003f72:	bf00      	nop
 8003f74:	3728      	adds	r7, #40	; 0x28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20013ab8 	.word	0x20013ab8
 8003f80:	e0001004 	.word	0xe0001004
 8003f84:	20013c18 	.word	0x20013c18

08003f88 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003f96:	2300      	movs	r3, #0
 8003f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f9c:	4917      	ldr	r1, [pc, #92]	; (8003ffc <SEGGER_SYSVIEW_Init+0x74>)
 8003f9e:	4818      	ldr	r0, [pc, #96]	; (8004000 <SEGGER_SYSVIEW_Init+0x78>)
 8003fa0:	f7ff fcfc 	bl	800399c <SEGGER_RTT_AllocUpBuffer>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003faa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003fac:	4b15      	ldr	r3, [pc, #84]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fae:	785a      	ldrb	r2, [r3, #1]
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fb2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003fb4:	4b13      	ldr	r3, [pc, #76]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fb6:	7e1b      	ldrb	r3, [r3, #24]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <SEGGER_SYSVIEW_Init+0x80>)
 8003fc2:	490f      	ldr	r1, [pc, #60]	; (8004000 <SEGGER_SYSVIEW_Init+0x78>)
 8003fc4:	f7ff fd6e 	bl	8003aa4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <SEGGER_SYSVIEW_Init+0x84>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fd4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003fdc:	4a09      	ldr	r2, [pc, #36]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003fe8:	4a06      	ldr	r2, [pc, #24]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200132b0 	.word	0x200132b0
 8004000:	08007c78 	.word	0x08007c78
 8004004:	20013ab8 	.word	0x20013ab8
 8004008:	20013ab0 	.word	0x20013ab0
 800400c:	e0001004 	.word	0xe0001004

08004010 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6113      	str	r3, [r2, #16]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20013ab8 	.word	0x20013ab8

08004030 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004038:	f3ef 8311 	mrs	r3, BASEPRI
 800403c:	f04f 0120 	mov.w	r1, #32
 8004040:	f381 8811 	msr	BASEPRI, r1
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4808      	ldr	r0, [pc, #32]	; (8004068 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004048:	f7ff fdc8 	bl	8003bdc <_PreparePacket>
 800404c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f7ff feb2 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f383 8811 	msr	BASEPRI, r3
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20013ae8 	.word	0x20013ae8

0800406c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004076:	f3ef 8311 	mrs	r3, BASEPRI
 800407a:	f04f 0120 	mov.w	r1, #32
 800407e:	f381 8811 	msr	BASEPRI, r1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	4816      	ldr	r0, [pc, #88]	; (80040e0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004086:	f7ff fda9 	bl	8003bdc <_PreparePacket>
 800408a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e00b      	b.n	80040b2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	1c59      	adds	r1, r3, #1
 80040a2:	61f9      	str	r1, [r7, #28]
 80040a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	09db      	lsrs	r3, r3, #7
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b7f      	cmp	r3, #127	; 0x7f
 80040b6:	d8f0      	bhi.n	800409a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	61fa      	str	r2, [r7, #28]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68f9      	ldr	r1, [r7, #12]
 80040cc:	6938      	ldr	r0, [r7, #16]
 80040ce:	f7ff fe75 	bl	8003dbc <_SendPacket>
  RECORD_END();
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f383 8811 	msr	BASEPRI, r3
}
 80040d8:	bf00      	nop
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20013ae8 	.word	0x20013ae8

080040e4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08c      	sub	sp, #48	; 0x30
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80040f0:	f3ef 8311 	mrs	r3, BASEPRI
 80040f4:	f04f 0120 	mov.w	r1, #32
 80040f8:	f381 8811 	msr	BASEPRI, r1
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	4825      	ldr	r0, [pc, #148]	; (8004194 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004100:	f7ff fd6c 	bl	8003bdc <_PreparePacket>
 8004104:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
 8004112:	e00b      	b.n	800412c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	1c59      	adds	r1, r3, #1
 800411c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800411e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	09db      	lsrs	r3, r3, #7
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	2b7f      	cmp	r3, #127	; 0x7f
 8004130:	d8f0      	bhi.n	8004114 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	e00b      	b.n	8004164 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	1c59      	adds	r1, r3, #1
 8004154:	6279      	str	r1, [r7, #36]	; 0x24
 8004156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	09db      	lsrs	r3, r3, #7
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	2b7f      	cmp	r3, #127	; 0x7f
 8004168:	d8f0      	bhi.n	800414c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	627a      	str	r2, [r7, #36]	; 0x24
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	69b8      	ldr	r0, [r7, #24]
 8004180:	f7ff fe1c 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f383 8811 	msr	BASEPRI, r3
}
 800418a:	bf00      	nop
 800418c:	3730      	adds	r7, #48	; 0x30
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20013ae8 	.word	0x20013ae8

08004198 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b08e      	sub	sp, #56	; 0x38
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80041a6:	f3ef 8311 	mrs	r3, BASEPRI
 80041aa:	f04f 0120 	mov.w	r1, #32
 80041ae:	f381 8811 	msr	BASEPRI, r1
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	4832      	ldr	r0, [pc, #200]	; (8004280 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80041b6:	f7ff fd11 	bl	8003bdc <_PreparePacket>
 80041ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	637b      	str	r3, [r7, #52]	; 0x34
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	633b      	str	r3, [r7, #48]	; 0x30
 80041c8:	e00b      	b.n	80041e2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	1c59      	adds	r1, r3, #1
 80041d2:	6379      	str	r1, [r7, #52]	; 0x34
 80041d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	09db      	lsrs	r3, r3, #7
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2b7f      	cmp	r3, #127	; 0x7f
 80041e6:	d8f0      	bhi.n	80041ca <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	637a      	str	r2, [r7, #52]	; 0x34
 80041ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004200:	e00b      	b.n	800421a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	b2da      	uxtb	r2, r3
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	1c59      	adds	r1, r3, #1
 800420a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800420c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	09db      	lsrs	r3, r3, #7
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	2b7f      	cmp	r3, #127	; 0x7f
 800421e:	d8f0      	bhi.n	8004202 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	e00b      	b.n	8004252 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	1c59      	adds	r1, r3, #1
 8004242:	6279      	str	r1, [r7, #36]	; 0x24
 8004244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	09db      	lsrs	r3, r3, #7
 8004250:	623b      	str	r3, [r7, #32]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	2b7f      	cmp	r3, #127	; 0x7f
 8004256:	d8f0      	bhi.n	800423a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	627a      	str	r2, [r7, #36]	; 0x24
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	6979      	ldr	r1, [r7, #20]
 800426c:	69b8      	ldr	r0, [r7, #24]
 800426e:	f7ff fda5 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f383 8811 	msr	BASEPRI, r3
}
 8004278:	bf00      	nop
 800427a:	3738      	adds	r7, #56	; 0x38
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20013ae8 	.word	0x20013ae8

08004284 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b090      	sub	sp, #64	; 0x40
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004292:	f3ef 8311 	mrs	r3, BASEPRI
 8004296:	f04f 0120 	mov.w	r1, #32
 800429a:	f381 8811 	msr	BASEPRI, r1
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	4840      	ldr	r0, [pc, #256]	; (80043a4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80042a2:	f7ff fc9b 	bl	8003bdc <_PreparePacket>
 80042a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b4:	e00b      	b.n	80042ce <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042bc:	1c59      	adds	r1, r3, #1
 80042be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80042c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	09db      	lsrs	r3, r3, #7
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2b7f      	cmp	r3, #127	; 0x7f
 80042d2:	d8f0      	bhi.n	80042b6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80042d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
 80042ec:	e00b      	b.n	8004306 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	1c59      	adds	r1, r3, #1
 80042f6:	6379      	str	r1, [r7, #52]	; 0x34
 80042f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	09db      	lsrs	r3, r3, #7
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2b7f      	cmp	r3, #127	; 0x7f
 800430a:	d8f0      	bhi.n	80042ee <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	637a      	str	r2, [r7, #52]	; 0x34
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
 8004324:	e00b      	b.n	800433e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	b2da      	uxtb	r2, r3
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	1c59      	adds	r1, r3, #1
 800432e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	09db      	lsrs	r3, r3, #7
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2b7f      	cmp	r3, #127	; 0x7f
 8004342:	d8f0      	bhi.n	8004326 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800434a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
 8004358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	e00b      	b.n	8004376 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	1c59      	adds	r1, r3, #1
 8004366:	6279      	str	r1, [r7, #36]	; 0x24
 8004368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	09db      	lsrs	r3, r3, #7
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2b7f      	cmp	r3, #127	; 0x7f
 800437a:	d8f0      	bhi.n	800435e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	627a      	str	r2, [r7, #36]	; 0x24
 8004382:	6a3a      	ldr	r2, [r7, #32]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	69b8      	ldr	r0, [r7, #24]
 8004392:	f7ff fd13 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f383 8811 	msr	BASEPRI, r3
}
 800439c:	bf00      	nop
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20013ae8 	.word	0x20013ae8

080043a8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b092      	sub	sp, #72	; 0x48
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80043b6:	f3ef 8311 	mrs	r3, BASEPRI
 80043ba:	f04f 0120 	mov.w	r1, #32
 80043be:	f381 8811 	msr	BASEPRI, r1
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	484e      	ldr	r0, [pc, #312]	; (8004500 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80043c6:	f7ff fc09 	bl	8003bdc <_PreparePacket>
 80043ca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	647b      	str	r3, [r7, #68]	; 0x44
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
 80043d8:	e00b      	b.n	80043f2 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e0:	1c59      	adds	r1, r3, #1
 80043e2:	6479      	str	r1, [r7, #68]	; 0x44
 80043e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ee:	09db      	lsrs	r3, r3, #7
 80043f0:	643b      	str	r3, [r7, #64]	; 0x40
 80043f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f4:	2b7f      	cmp	r3, #127	; 0x7f
 80043f6:	d8f0      	bhi.n	80043da <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80043f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	647a      	str	r2, [r7, #68]	; 0x44
 80043fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004410:	e00b      	b.n	800442a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	b2da      	uxtb	r2, r3
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	1c59      	adds	r1, r3, #1
 800441a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800441c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	09db      	lsrs	r3, r3, #7
 8004428:	63bb      	str	r3, [r7, #56]	; 0x38
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	2b7f      	cmp	r3, #127	; 0x7f
 800442e:	d8f0      	bhi.n	8004412 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
 8004448:	e00b      	b.n	8004462 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	b2da      	uxtb	r2, r3
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	1c59      	adds	r1, r3, #1
 8004452:	6379      	str	r1, [r7, #52]	; 0x34
 8004454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	09db      	lsrs	r3, r3, #7
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2b7f      	cmp	r3, #127	; 0x7f
 8004466:	d8f0      	bhi.n	800444a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	637a      	str	r2, [r7, #52]	; 0x34
 800446e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004480:	e00b      	b.n	800449a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	b2da      	uxtb	r2, r3
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800448c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	09db      	lsrs	r3, r3, #7
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	2b7f      	cmp	r3, #127	; 0x7f
 800449e:	d8f0      	bhi.n	8004482 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b6:	623b      	str	r3, [r7, #32]
 80044b8:	e00b      	b.n	80044d2 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	1c59      	adds	r1, r3, #1
 80044c2:	6279      	str	r1, [r7, #36]	; 0x24
 80044c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	09db      	lsrs	r3, r3, #7
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	2b7f      	cmp	r3, #127	; 0x7f
 80044d6:	d8f0      	bhi.n	80044ba <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	627a      	str	r2, [r7, #36]	; 0x24
 80044de:	6a3a      	ldr	r2, [r7, #32]
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	6979      	ldr	r1, [r7, #20]
 80044ec:	69b8      	ldr	r0, [r7, #24]
 80044ee:	f7ff fc65 	bl	8003dbc <_SendPacket>
  RECORD_END();
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f383 8811 	msr	BASEPRI, r3
}
 80044f8:	bf00      	nop
 80044fa:	3748      	adds	r7, #72	; 0x48
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20013ae8 	.word	0x20013ae8

08004504 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	; 0x30
 8004508:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800450a:	4b58      	ldr	r3, [pc, #352]	; (800466c <SEGGER_SYSVIEW_Start+0x168>)
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004510:	f3ef 8311 	mrs	r3, BASEPRI
 8004514:	f04f 0120 	mov.w	r1, #32
 8004518:	f381 8811 	msr	BASEPRI, r1
 800451c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800451e:	4b53      	ldr	r3, [pc, #332]	; (800466c <SEGGER_SYSVIEW_Start+0x168>)
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	220a      	movs	r2, #10
 8004524:	4952      	ldr	r1, [pc, #328]	; (8004670 <SEGGER_SYSVIEW_Start+0x16c>)
 8004526:	4618      	mov	r0, r3
 8004528:	f7fb fe5a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004532:	200a      	movs	r0, #10
 8004534:	f7ff fd7c 	bl	8004030 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004538:	f3ef 8311 	mrs	r3, BASEPRI
 800453c:	f04f 0120 	mov.w	r1, #32
 8004540:	f381 8811 	msr	BASEPRI, r1
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	484b      	ldr	r0, [pc, #300]	; (8004674 <SEGGER_SYSVIEW_Start+0x170>)
 8004548:	f7ff fb48 	bl	8003bdc <_PreparePacket>
 800454c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004556:	4b45      	ldr	r3, [pc, #276]	; (800466c <SEGGER_SYSVIEW_Start+0x168>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
 800455c:	e00b      	b.n	8004576 <SEGGER_SYSVIEW_Start+0x72>
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	b2da      	uxtb	r2, r3
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	09db      	lsrs	r3, r3, #7
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2b7f      	cmp	r3, #127	; 0x7f
 800457a:	d8f0      	bhi.n	800455e <SEGGER_SYSVIEW_Start+0x5a>
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
 8004590:	4b36      	ldr	r3, [pc, #216]	; (800466c <SEGGER_SYSVIEW_Start+0x168>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	e00b      	b.n	80045b0 <SEGGER_SYSVIEW_Start+0xac>
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	6279      	str	r1, [r7, #36]	; 0x24
 80045a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	09db      	lsrs	r3, r3, #7
 80045ae:	623b      	str	r3, [r7, #32]
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	2b7f      	cmp	r3, #127	; 0x7f
 80045b4:	d8f0      	bhi.n	8004598 <SEGGER_SYSVIEW_Start+0x94>
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	627a      	str	r2, [r7, #36]	; 0x24
 80045bc:	6a3a      	ldr	r2, [r7, #32]
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <SEGGER_SYSVIEW_Start+0x168>)
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e00b      	b.n	80045ea <SEGGER_SYSVIEW_Start+0xe6>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	1c59      	adds	r1, r3, #1
 80045da:	61f9      	str	r1, [r7, #28]
 80045dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	09db      	lsrs	r3, r3, #7
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b7f      	cmp	r3, #127	; 0x7f
 80045ee:	d8f0      	bhi.n	80045d2 <SEGGER_SYSVIEW_Start+0xce>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	61fa      	str	r2, [r7, #28]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	e00b      	b.n	8004622 <SEGGER_SYSVIEW_Start+0x11e>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	1c59      	adds	r1, r3, #1
 8004612:	6179      	str	r1, [r7, #20]
 8004614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	09db      	lsrs	r3, r3, #7
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b7f      	cmp	r3, #127	; 0x7f
 8004626:	d8f0      	bhi.n	800460a <SEGGER_SYSVIEW_Start+0x106>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	617a      	str	r2, [r7, #20]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004638:	2218      	movs	r2, #24
 800463a:	6839      	ldr	r1, [r7, #0]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff fbbd 	bl	8003dbc <_SendPacket>
      RECORD_END();
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <SEGGER_SYSVIEW_Start+0x168>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <SEGGER_SYSVIEW_Start+0x168>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004656:	f000 f9eb 	bl	8004a30 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800465a:	f000 f9b1 	bl	80049c0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800465e:	f000 fc83 	bl	8004f68 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004662:	bf00      	nop
 8004664:	3730      	adds	r7, #48	; 0x30
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20013ab8 	.word	0x20013ab8
 8004670:	08007cd4 	.word	0x08007cd4
 8004674:	20013ae8 	.word	0x20013ae8

08004678 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800467e:	f3ef 8311 	mrs	r3, BASEPRI
 8004682:	f04f 0120 	mov.w	r1, #32
 8004686:	f381 8811 	msr	BASEPRI, r1
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	480b      	ldr	r0, [pc, #44]	; (80046bc <SEGGER_SYSVIEW_Stop+0x44>)
 800468e:	f7ff faa5 	bl	8003bdc <_PreparePacket>
 8004692:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <SEGGER_SYSVIEW_Stop+0x48>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800469c:	220b      	movs	r2, #11
 800469e:	6839      	ldr	r1, [r7, #0]
 80046a0:	6838      	ldr	r0, [r7, #0]
 80046a2:	f7ff fb8b 	bl	8003dbc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <SEGGER_SYSVIEW_Stop+0x48>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f383 8811 	msr	BASEPRI, r3
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20013ae8 	.word	0x20013ae8
 80046c0:	20013ab8 	.word	0x20013ab8

080046c4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046ca:	f3ef 8311 	mrs	r3, BASEPRI
 80046ce:	f04f 0120 	mov.w	r1, #32
 80046d2:	f381 8811 	msr	BASEPRI, r1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	4845      	ldr	r0, [pc, #276]	; (80047f0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80046da:	f7ff fa7f 	bl	8003bdc <_PreparePacket>
 80046de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e8:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ee:	e00b      	b.n	8004708 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	1c59      	adds	r1, r3, #1
 80046f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	09db      	lsrs	r3, r3, #7
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	2b7f      	cmp	r3, #127	; 0x7f
 800470c:	d8f0      	bhi.n	80046f0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	623b      	str	r3, [r7, #32]
 8004728:	e00b      	b.n	8004742 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	1c59      	adds	r1, r3, #1
 8004732:	6279      	str	r1, [r7, #36]	; 0x24
 8004734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	09db      	lsrs	r3, r3, #7
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	2b7f      	cmp	r3, #127	; 0x7f
 8004746:	d8f0      	bhi.n	800472a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	627a      	str	r2, [r7, #36]	; 0x24
 800474e:	6a3a      	ldr	r2, [r7, #32]
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e00b      	b.n	800477c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	1c59      	adds	r1, r3, #1
 800476c:	61f9      	str	r1, [r7, #28]
 800476e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	09db      	lsrs	r3, r3, #7
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b7f      	cmp	r3, #127	; 0x7f
 8004780:	d8f0      	bhi.n	8004764 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	61fa      	str	r2, [r7, #28]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e00b      	b.n	80047b4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1c59      	adds	r1, r3, #1
 80047a4:	6179      	str	r1, [r7, #20]
 80047a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	09db      	lsrs	r3, r3, #7
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b7f      	cmp	r3, #127	; 0x7f
 80047b8:	d8f0      	bhi.n	800479c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	617a      	str	r2, [r7, #20]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047ca:	2218      	movs	r2, #24
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	68b8      	ldr	r0, [r7, #8]
 80047d0:	f7ff faf4 	bl	8003dbc <_SendPacket>
  RECORD_END();
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80047e2:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	4798      	blx	r3
  }
}
 80047e8:	bf00      	nop
 80047ea:	3730      	adds	r7, #48	; 0x30
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20013ae8 	.word	0x20013ae8
 80047f4:	20013ab8 	.word	0x20013ab8

080047f8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b092      	sub	sp, #72	; 0x48
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004800:	f3ef 8311 	mrs	r3, BASEPRI
 8004804:	f04f 0120 	mov.w	r1, #32
 8004808:	f381 8811 	msr	BASEPRI, r1
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	486a      	ldr	r0, [pc, #424]	; (80049b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004810:	f7ff f9e4 	bl	8003bdc <_PreparePacket>
 8004814:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b66      	ldr	r3, [pc, #408]	; (80049bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	643b      	str	r3, [r7, #64]	; 0x40
 800482a:	e00b      	b.n	8004844 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800482c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482e:	b2da      	uxtb	r2, r3
 8004830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004832:	1c59      	adds	r1, r3, #1
 8004834:	6479      	str	r1, [r7, #68]	; 0x44
 8004836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004840:	09db      	lsrs	r3, r3, #7
 8004842:	643b      	str	r3, [r7, #64]	; 0x40
 8004844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004846:	2b7f      	cmp	r3, #127	; 0x7f
 8004848:	d8f0      	bhi.n	800482c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800484a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	647a      	str	r2, [r7, #68]	; 0x44
 8004850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004858:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	63bb      	str	r3, [r7, #56]	; 0x38
 8004864:	e00b      	b.n	800487e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	b2da      	uxtb	r2, r3
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	1c59      	adds	r1, r3, #1
 800486e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	09db      	lsrs	r3, r3, #7
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	2b7f      	cmp	r3, #127	; 0x7f
 8004882:	d8f0      	bhi.n	8004866 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	63fa      	str	r2, [r7, #60]	; 0x3c
 800488a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004892:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	4619      	mov	r1, r3
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7ff f94d 	bl	8003b3c <_EncodeStr>
 80048a2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80048a4:	2209      	movs	r2, #9
 80048a6:	68f9      	ldr	r1, [r7, #12]
 80048a8:	6938      	ldr	r0, [r7, #16]
 80048aa:	f7ff fa87 	bl	8003dbc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b40      	ldr	r3, [pc, #256]	; (80049bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
 80048c2:	e00b      	b.n	80048dc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	6379      	str	r1, [r7, #52]	; 0x34
 80048ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	09db      	lsrs	r3, r3, #7
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2b7f      	cmp	r3, #127	; 0x7f
 80048e0:	d8f0      	bhi.n	80048c4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80048e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	637a      	str	r2, [r7, #52]	; 0x34
 80048e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fc:	e00b      	b.n	8004916 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	b2da      	uxtb	r2, r3
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	1c59      	adds	r1, r3, #1
 8004906:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004908:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	09db      	lsrs	r3, r3, #7
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	2b7f      	cmp	r3, #127	; 0x7f
 800491a:	d8f0      	bhi.n	80048fe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	e00b      	b.n	8004950 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	1c59      	adds	r1, r3, #1
 8004940:	6279      	str	r1, [r7, #36]	; 0x24
 8004942:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	09db      	lsrs	r3, r3, #7
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b7f      	cmp	r3, #127	; 0x7f
 8004954:	d8f0      	bhi.n	8004938 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	627a      	str	r2, [r7, #36]	; 0x24
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e00b      	b.n	8004988 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	1c59      	adds	r1, r3, #1
 8004978:	61f9      	str	r1, [r7, #28]
 800497a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	09db      	lsrs	r3, r3, #7
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b7f      	cmp	r3, #127	; 0x7f
 800498c:	d8f0      	bhi.n	8004970 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800499e:	2215      	movs	r2, #21
 80049a0:	68f9      	ldr	r1, [r7, #12]
 80049a2:	6938      	ldr	r0, [r7, #16]
 80049a4:	f7ff fa0a 	bl	8003dbc <_SendPacket>
  RECORD_END();
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f383 8811 	msr	BASEPRI, r3
}
 80049ae:	bf00      	nop
 80049b0:	3748      	adds	r7, #72	; 0x48
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20013ae8 	.word	0x20013ae8
 80049bc:	20013ab8 	.word	0x20013ab8

080049c0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80049d6:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4798      	blx	r3
  }
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20013ab8 	.word	0x20013ab8

080049e8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80049f0:	f3ef 8311 	mrs	r3, BASEPRI
 80049f4:	f04f 0120 	mov.w	r1, #32
 80049f8:	f381 8811 	msr	BASEPRI, r1
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	480b      	ldr	r0, [pc, #44]	; (8004a2c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004a00:	f7ff f8ec 	bl	8003bdc <_PreparePacket>
 8004a04:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a06:	2280      	movs	r2, #128	; 0x80
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	6938      	ldr	r0, [r7, #16]
 8004a0c:	f7ff f896 	bl	8003b3c <_EncodeStr>
 8004a10:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004a12:	220e      	movs	r2, #14
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	6938      	ldr	r0, [r7, #16]
 8004a18:	f7ff f9d0 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f383 8811 	msr	BASEPRI, r3
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20013ae8 	.word	0x20013ae8

08004a30 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01a      	beq.n	8004a74 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004a48:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4798      	blx	r3
 8004a50:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a54:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	000a      	movs	r2, r1
 8004a64:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a66:	4613      	mov	r3, r2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	200d      	movs	r0, #13
 8004a6e:	f7ff fb39 	bl	80040e4 <SEGGER_SYSVIEW_RecordU32x2>
 8004a72:	e006      	b.n	8004a82 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	200c      	movs	r0, #12
 8004a7c:	f7ff faf6 	bl	800406c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd90      	pop	{r4, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20013ab8 	.word	0x20013ab8
 8004a90:	e0001004 	.word	0xe0001004

08004a94 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a9e:	f04f 0120 	mov.w	r1, #32
 8004aa2:	f381 8811 	msr	BASEPRI, r1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	4819      	ldr	r0, [pc, #100]	; (8004b10 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004aaa:	f7ff f897 	bl	8003bdc <_PreparePacket>
 8004aae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	e00b      	b.n	8004ae0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	6179      	str	r1, [r7, #20]
 8004ad2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	09db      	lsrs	r3, r3, #7
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae4:	d8f0      	bhi.n	8004ac8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	617a      	str	r2, [r7, #20]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004af6:	2202      	movs	r2, #2
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	68b8      	ldr	r0, [r7, #8]
 8004afc:	f7ff f95e 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f383 8811 	msr	BASEPRI, r3
}
 8004b06:	bf00      	nop
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20013ae8 	.word	0x20013ae8
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b22:	f04f 0120 	mov.w	r1, #32
 8004b26:	f381 8811 	msr	BASEPRI, r1
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	4807      	ldr	r0, [pc, #28]	; (8004b4c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004b2e:	f7ff f855 	bl	8003bdc <_PreparePacket>
 8004b32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004b34:	2203      	movs	r2, #3
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	6838      	ldr	r0, [r7, #0]
 8004b3a:	f7ff f93f 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f383 8811 	msr	BASEPRI, r3
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20013ae8 	.word	0x20013ae8

08004b50 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b56:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5a:	f04f 0120 	mov.w	r1, #32
 8004b5e:	f381 8811 	msr	BASEPRI, r1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	4807      	ldr	r0, [pc, #28]	; (8004b84 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004b66:	f7ff f839 	bl	8003bdc <_PreparePacket>
 8004b6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004b6c:	2212      	movs	r2, #18
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	6838      	ldr	r0, [r7, #0]
 8004b72:	f7ff f923 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f383 8811 	msr	BASEPRI, r3
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20013ae8 	.word	0x20013ae8

08004b88 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b92:	f04f 0120 	mov.w	r1, #32
 8004b96:	f381 8811 	msr	BASEPRI, r1
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	4807      	ldr	r0, [pc, #28]	; (8004bbc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004b9e:	f7ff f81d 	bl	8003bdc <_PreparePacket>
 8004ba2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004ba4:	2211      	movs	r2, #17
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	6838      	ldr	r0, [r7, #0]
 8004baa:	f7ff f907 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20013ae8 	.word	0x20013ae8

08004bc0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bcc:	f04f 0120 	mov.w	r1, #32
 8004bd0:	f381 8811 	msr	BASEPRI, r1
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	4819      	ldr	r0, [pc, #100]	; (8004c3c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004bd8:	f7ff f800 	bl	8003bdc <_PreparePacket>
 8004bdc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004be2:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	e00b      	b.n	8004c0e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	1c59      	adds	r1, r3, #1
 8004bfe:	61f9      	str	r1, [r7, #28]
 8004c00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	09db      	lsrs	r3, r3, #7
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b7f      	cmp	r3, #127	; 0x7f
 8004c12:	d8f0      	bhi.n	8004bf6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	61fa      	str	r2, [r7, #28]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004c24:	2208      	movs	r2, #8
 8004c26:	68f9      	ldr	r1, [r7, #12]
 8004c28:	6938      	ldr	r0, [r7, #16]
 8004c2a:	f7ff f8c7 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f383 8811 	msr	BASEPRI, r3
}
 8004c34:	bf00      	nop
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20013ae8 	.word	0x20013ae8
 8004c40:	20013ab8 	.word	0x20013ab8

08004c44 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c50:	f04f 0120 	mov.w	r1, #32
 8004c54:	f381 8811 	msr	BASEPRI, r1
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	4819      	ldr	r0, [pc, #100]	; (8004cc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004c5c:	f7fe ffbe 	bl	8003bdc <_PreparePacket>
 8004c60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c66:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	e00b      	b.n	8004c92 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	1c59      	adds	r1, r3, #1
 8004c82:	61f9      	str	r1, [r7, #28]
 8004c84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	09db      	lsrs	r3, r3, #7
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b7f      	cmp	r3, #127	; 0x7f
 8004c96:	d8f0      	bhi.n	8004c7a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004ca8:	2204      	movs	r2, #4
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	6938      	ldr	r0, [r7, #16]
 8004cae:	f7ff f885 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f383 8811 	msr	BASEPRI, r3
}
 8004cb8:	bf00      	nop
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20013ae8 	.word	0x20013ae8
 8004cc4:	20013ab8 	.word	0x20013ab8

08004cc8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd4:	f04f 0120 	mov.w	r1, #32
 8004cd8:	f381 8811 	msr	BASEPRI, r1
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	4819      	ldr	r0, [pc, #100]	; (8004d44 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ce0:	f7fe ff7c 	bl	8003bdc <_PreparePacket>
 8004ce4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e00b      	b.n	8004d16 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	61f9      	str	r1, [r7, #28]
 8004d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	09db      	lsrs	r3, r3, #7
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1a:	d8f0      	bhi.n	8004cfe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	61fa      	str	r2, [r7, #28]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004d2c:	2206      	movs	r2, #6
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	6938      	ldr	r0, [r7, #16]
 8004d32:	f7ff f843 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f383 8811 	msr	BASEPRI, r3
}
 8004d3c:	bf00      	nop
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20013ae8 	.word	0x20013ae8
 8004d48:	20013ab8 	.word	0x20013ab8

08004d4c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d56:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5a:	f04f 0120 	mov.w	r1, #32
 8004d5e:	f381 8811 	msr	BASEPRI, r1
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	4827      	ldr	r0, [pc, #156]	; (8004e04 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004d66:	f7fe ff39 	bl	8003bdc <_PreparePacket>
 8004d6a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	623b      	str	r3, [r7, #32]
 8004d82:	e00b      	b.n	8004d9c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	1c59      	adds	r1, r3, #1
 8004d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	09db      	lsrs	r3, r3, #7
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004da0:	d8f0      	bhi.n	8004d84 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	627a      	str	r2, [r7, #36]	; 0x24
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	e00b      	b.n	8004dd4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	61f9      	str	r1, [r7, #28]
 8004dc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	09db      	lsrs	r3, r3, #7
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd8:	d8f0      	bhi.n	8004dbc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	61fa      	str	r2, [r7, #28]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004dea:	2207      	movs	r2, #7
 8004dec:	68f9      	ldr	r1, [r7, #12]
 8004dee:	6938      	ldr	r0, [r7, #16]
 8004df0:	f7fe ffe4 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f383 8811 	msr	BASEPRI, r3
}
 8004dfa:	bf00      	nop
 8004dfc:	3728      	adds	r7, #40	; 0x28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20013ae8 	.word	0x20013ae8
 8004e08:	20013ab8 	.word	0x20013ab8

08004e0c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004e14:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	1ad3      	subs	r3, r2, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	20013ab8 	.word	0x20013ab8

08004e2c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08c      	sub	sp, #48	; 0x30
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004e36:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d06d      	beq.n	8004f1a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004e44:	2300      	movs	r3, #0
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e48:	e008      	b.n	8004e5c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	3301      	adds	r3, #1
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3f2      	bcc.n	8004e4a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004e64:	e000      	b.n	8004e68 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004e66:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d055      	beq.n	8004f1a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e72:	f04f 0120 	mov.w	r1, #32
 8004e76:	f381 8811 	msr	BASEPRI, r1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	482a      	ldr	r0, [pc, #168]	; (8004f28 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004e7e:	f7fe fead 	bl	8003bdc <_PreparePacket>
 8004e82:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	e00b      	b.n	8004eaa <SEGGER_SYSVIEW_SendModule+0x7e>
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	1c59      	adds	r1, r3, #1
 8004e9a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	09db      	lsrs	r3, r3, #7
 8004ea8:	623b      	str	r3, [r7, #32]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	2b7f      	cmp	r3, #127	; 0x7f
 8004eae:	d8f0      	bhi.n	8004e92 <SEGGER_SYSVIEW_SendModule+0x66>
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e00b      	b.n	8004ee4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	61f9      	str	r1, [r7, #28]
 8004ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	09db      	lsrs	r3, r3, #7
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee8:	d8f0      	bhi.n	8004ecc <SEGGER_SYSVIEW_SendModule+0xa0>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	61fa      	str	r2, [r7, #28]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2280      	movs	r2, #128	; 0x80
 8004f00:	4619      	mov	r1, r3
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7fe fe1a 	bl	8003b3c <_EncodeStr>
 8004f08:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004f0a:	2216      	movs	r2, #22
 8004f0c:	68f9      	ldr	r1, [r7, #12]
 8004f0e:	6938      	ldr	r0, [r7, #16]
 8004f10:	f7fe ff54 	bl	8003dbc <_SendPacket>
      RECORD_END();
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	3730      	adds	r7, #48	; 0x30
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20013ae0 	.word	0x20013ae0
 8004f28:	20013ae8 	.word	0x20013ae8

08004f2c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00f      	beq.n	8004f5a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f2      	bne.n	8004f40 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20013ae0 	.word	0x20013ae0

08004f68 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f72:	f04f 0120 	mov.w	r1, #32
 8004f76:	f381 8811 	msr	BASEPRI, r1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	4817      	ldr	r0, [pc, #92]	; (8004fdc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004f7e:	f7fe fe2d 	bl	8003bdc <_PreparePacket>
 8004f82:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e00b      	b.n	8004fac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	6179      	str	r1, [r7, #20]
 8004f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	09db      	lsrs	r3, r3, #7
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb0:	d8f0      	bhi.n	8004f94 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	617a      	str	r2, [r7, #20]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004fc2:	221b      	movs	r2, #27
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	68b8      	ldr	r0, [r7, #8]
 8004fc8:	f7fe fef8 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f383 8811 	msr	BASEPRI, r3
}
 8004fd2:	bf00      	nop
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20013ae8 	.word	0x20013ae8
 8004fe0:	20013ae4 	.word	0x20013ae4

08004fe4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fec:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff0:	f04f 0120 	mov.w	r1, #32
 8004ff4:	f381 8811 	msr	BASEPRI, r1
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	4827      	ldr	r0, [pc, #156]	; (8005098 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004ffc:	f7fe fdee 	bl	8003bdc <_PreparePacket>
 8005000:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005002:	2280      	movs	r2, #128	; 0x80
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	6938      	ldr	r0, [r7, #16]
 8005008:	f7fe fd98 	bl	8003b3c <_EncodeStr>
 800500c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	2301      	movs	r3, #1
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	e00b      	b.n	8005030 <SEGGER_SYSVIEW_Warn+0x4c>
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	1c59      	adds	r1, r3, #1
 8005020:	6279      	str	r1, [r7, #36]	; 0x24
 8005022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	09db      	lsrs	r3, r3, #7
 800502e:	623b      	str	r3, [r7, #32]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2b7f      	cmp	r3, #127	; 0x7f
 8005034:	d8f0      	bhi.n	8005018 <SEGGER_SYSVIEW_Warn+0x34>
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	627a      	str	r2, [r7, #36]	; 0x24
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	2300      	movs	r3, #0
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	e00b      	b.n	8005068 <SEGGER_SYSVIEW_Warn+0x84>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	1c59      	adds	r1, r3, #1
 8005058:	61f9      	str	r1, [r7, #28]
 800505a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	09db      	lsrs	r3, r3, #7
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b7f      	cmp	r3, #127	; 0x7f
 800506c:	d8f0      	bhi.n	8005050 <SEGGER_SYSVIEW_Warn+0x6c>
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	61fa      	str	r2, [r7, #28]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800507e:	221a      	movs	r2, #26
 8005080:	68f9      	ldr	r1, [r7, #12]
 8005082:	6938      	ldr	r0, [r7, #16]
 8005084:	f7fe fe9a 	bl	8003dbc <_SendPacket>
  RECORD_END();
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f383 8811 	msr	BASEPRI, r3
}
 800508e:	bf00      	nop
 8005090:	3728      	adds	r7, #40	; 0x28
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20013ae8 	.word	0x20013ae8

0800509c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	2000      	movs	r0, #0
 80050b0:	f7fe fc4e 	bl	8003950 <SEGGER_RTT_Write>
  return len;
 80050b4:	683b      	ldr	r3, [r7, #0]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
	/*TaskHandle_t redTask_Handle;
	 TaskHandle_t yellowTask_Handle;
	 TaskHandle_t greenTask_Handle;
	 TaskHandle_t butTask_Handle;*/
	BaseType_t stat;
	DWT_CTRL |= (0 << 1);
 80050c6:	4b30      	ldr	r3, [pc, #192]	; (8005188 <main+0xc8>)
 80050c8:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <main+0xc8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050ce:	f000 fbb9 	bl	8005844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050d2:	f000 f86f 	bl	80051b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050d6:	f000 f8d9 	bl	800528c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	SEGGER_SYSVIEW_Conf();
 80050da:	f7fe f863 	bl	80031a4 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80050de:	f7ff fa11 	bl	8004504 <SEGGER_SYSVIEW_Start>
	stat = xTaskCreate(redTask_Handler, "redTask", 200, NULL, 3,
 80050e2:	4b2a      	ldr	r3, [pc, #168]	; (800518c <main+0xcc>)
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2303      	movs	r3, #3
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	22c8      	movs	r2, #200	; 0xc8
 80050ee:	4928      	ldr	r1, [pc, #160]	; (8005190 <main+0xd0>)
 80050f0:	4828      	ldr	r0, [pc, #160]	; (8005194 <main+0xd4>)
 80050f2:	f7fb fe75 	bl	8000de0 <xTaskCreate>
 80050f6:	60f8      	str	r0, [r7, #12]
			&redTask_Handle);
	configASSERT(stat == pdPASS);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d00a      	beq.n	8005114 <main+0x54>
        __asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	60bb      	str	r3, [r7, #8]
    }
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <main+0x52>
	nextTask_Handle = redTask_Handle;
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <main+0xcc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <main+0xd8>)
 800511a:	6013      	str	r3, [r2, #0]
	stat = xTaskCreate(yellowTask_Handler, "yellowTask", 200, NULL, 2,
 800511c:	4b1f      	ldr	r3, [pc, #124]	; (800519c <main+0xdc>)
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	2302      	movs	r3, #2
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	22c8      	movs	r2, #200	; 0xc8
 8005128:	491d      	ldr	r1, [pc, #116]	; (80051a0 <main+0xe0>)
 800512a:	481e      	ldr	r0, [pc, #120]	; (80051a4 <main+0xe4>)
 800512c:	f7fb fe58 	bl	8000de0 <xTaskCreate>
 8005130:	60f8      	str	r0, [r7, #12]
			&yellowTask_Handle);
	configASSERT(stat == pdPASS);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d00a      	beq.n	800514e <main+0x8e>
        __asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	607b      	str	r3, [r7, #4]
    }
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <main+0x8c>
	stat = xTaskCreate(greenTask_Handler, "greenTask", 200, NULL, 1,
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <main+0xe8>)
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	2301      	movs	r3, #1
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	22c8      	movs	r2, #200	; 0xc8
 800515a:	4914      	ldr	r1, [pc, #80]	; (80051ac <main+0xec>)
 800515c:	4814      	ldr	r0, [pc, #80]	; (80051b0 <main+0xf0>)
 800515e:	f7fb fe3f 	bl	8000de0 <xTaskCreate>
 8005162:	60f8      	str	r0, [r7, #12]
			&greenTask_Handle);
	configASSERT(stat == pdPASS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d00a      	beq.n	8005180 <main+0xc0>
        __asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	603b      	str	r3, [r7, #0]
    }
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <main+0xbe>
	/*stat = xTaskCreate(butTask_Handler, "buttonTask", 200, NULL, 2,
	 &butTask_Handle);
	 configASSERT(stat == pdPASS);*/
	vTaskStartScheduler();
 8005180:	f7fc f872 	bl	8001268 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8005184:	e7fe      	b.n	8005184 <main+0xc4>
 8005186:	bf00      	nop
 8005188:	e0001000 	.word	0xe0001000
 800518c:	20013cc8 	.word	0x20013cc8
 8005190:	08007c80 	.word	0x08007c80
 8005194:	08005411 	.word	0x08005411
 8005198:	20013cc4 	.word	0x20013cc4
 800519c:	20013ccc 	.word	0x20013ccc
 80051a0:	08007c88 	.word	0x08007c88
 80051a4:	08005475 	.word	0x08005475
 80051a8:	20013cc0 	.word	0x20013cc0
 80051ac:	08007c94 	.word	0x08007c94
 80051b0:	080054d9 	.word	0x080054d9

080051b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b094      	sub	sp, #80	; 0x50
 80051b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051ba:	f107 0320 	add.w	r3, r7, #32
 80051be:	2230      	movs	r2, #48	; 0x30
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 fd96 	bl	8006cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051c8:	f107 030c 	add.w	r3, r7, #12
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	4b29      	ldr	r3, [pc, #164]	; (8005284 <SystemClock_Config+0xd0>)
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <SystemClock_Config+0xd0>)
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e6:	6413      	str	r3, [r2, #64]	; 0x40
 80051e8:	4b26      	ldr	r3, [pc, #152]	; (8005284 <SystemClock_Config+0xd0>)
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80051f4:	2300      	movs	r3, #0
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	4b23      	ldr	r3, [pc, #140]	; (8005288 <SystemClock_Config+0xd4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005200:	4a21      	ldr	r2, [pc, #132]	; (8005288 <SystemClock_Config+0xd4>)
 8005202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <SystemClock_Config+0xd4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005214:	2302      	movs	r3, #2
 8005216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005218:	2301      	movs	r3, #1
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800521c:	2310      	movs	r3, #16
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005220:	2302      	movs	r3, #2
 8005222:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005224:	2300      	movs	r3, #0
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005228:	2310      	movs	r3, #16
 800522a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800522c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005232:	2304      	movs	r3, #4
 8005234:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005236:	2307      	movs	r3, #7
 8005238:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800523a:	f107 0320 	add.w	r3, r7, #32
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fe00 	bl	8005e44 <HAL_RCC_OscConfig>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800524a:	f000 f985 	bl	8005558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800524e:	230f      	movs	r3, #15
 8005250:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005252:	2302      	movs	r3, #2
 8005254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800525a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800525e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	2102      	movs	r1, #2
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f862 	bl	8006334 <HAL_RCC_ClockConfig>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005276:	f000 f96f 	bl	8005558 <Error_Handler>
  }
}
 800527a:	bf00      	nop
 800527c:	3750      	adds	r7, #80	; 0x50
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800
 8005288:	40007000 	.word	0x40007000

0800528c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	60da      	str	r2, [r3, #12]
 80052a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	4a42      	ldr	r2, [pc, #264]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052ac:	f043 0304 	orr.w	r3, r3, #4
 80052b0:	6313      	str	r3, [r2, #48]	; 0x30
 80052b2:	4b40      	ldr	r3, [pc, #256]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	4b3c      	ldr	r3, [pc, #240]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	4a3b      	ldr	r2, [pc, #236]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052cc:	6313      	str	r3, [r2, #48]	; 0x30
 80052ce:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a34      	ldr	r2, [pc, #208]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	4b2e      	ldr	r3, [pc, #184]	; (80053b4 <MX_GPIO_Init+0x128>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a2d      	ldr	r2, [pc, #180]	; (80053b4 <MX_GPIO_Init+0x128>)
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <MX_GPIO_Init+0x128>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8005312:	2200      	movs	r2, #0
 8005314:	2103      	movs	r1, #3
 8005316:	4828      	ldr	r0, [pc, #160]	; (80053b8 <MX_GPIO_Init+0x12c>)
 8005318:	f000 fd3c 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800531c:	2200      	movs	r2, #0
 800531e:	2120      	movs	r1, #32
 8005320:	4826      	ldr	r0, [pc, #152]	; (80053bc <MX_GPIO_Init+0x130>)
 8005322:	f000 fd37 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800532a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800532c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005336:	f107 0314 	add.w	r3, r7, #20
 800533a:	4619      	mov	r1, r3
 800533c:	481e      	ldr	r0, [pc, #120]	; (80053b8 <MX_GPIO_Init+0x12c>)
 800533e:	f000 fba5 	bl	8005a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005342:	2303      	movs	r3, #3
 8005344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005346:	2301      	movs	r3, #1
 8005348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800534e:	2300      	movs	r3, #0
 8005350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005352:	f107 0314 	add.w	r3, r7, #20
 8005356:	4619      	mov	r1, r3
 8005358:	4817      	ldr	r0, [pc, #92]	; (80053b8 <MX_GPIO_Init+0x12c>)
 800535a:	f000 fb97 	bl	8005a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800535e:	230c      	movs	r3, #12
 8005360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005362:	2302      	movs	r3, #2
 8005364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800536a:	2300      	movs	r3, #0
 800536c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800536e:	2307      	movs	r3, #7
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005372:	f107 0314 	add.w	r3, r7, #20
 8005376:	4619      	mov	r1, r3
 8005378:	4810      	ldr	r0, [pc, #64]	; (80053bc <MX_GPIO_Init+0x130>)
 800537a:	f000 fb87 	bl	8005a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800537e:	2320      	movs	r3, #32
 8005380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005382:	2301      	movs	r3, #1
 8005384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538a:	2300      	movs	r3, #0
 800538c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	4619      	mov	r1, r3
 8005394:	4809      	ldr	r0, [pc, #36]	; (80053bc <MX_GPIO_Init+0x130>)
 8005396:	f000 fb79 	bl	8005a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	2105      	movs	r1, #5
 800539e:	2028      	movs	r0, #40	; 0x28
 80053a0:	f000 fb4a 	bl	8005a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053a4:	2028      	movs	r0, #40	; 0x28
 80053a6:	f000 fb63 	bl	8005a70 <HAL_NVIC_EnableIRQ>

}
 80053aa:	bf00      	nop
 80053ac:	3728      	adds	r7, #40	; 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40020800 	.word	0x40020800
 80053bc:	40020000 	.word	0x40020000

080053c0 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
	traceISR_ENTER();
 80053ca:	f7ff fb63 	bl	8004a94 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(nextTask_Handle, 0, eNoAction,
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <button_interrupt_handler+0x48>)
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	f7fc fd7c 	bl	8001edc <xTaskGenericNotifyFromISR>
			&pxHigherPriorityTaskWoken);
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken); traceISR_EXIT();
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <button_interrupt_handler+0x3a>
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <button_interrupt_handler+0x4c>)
 80053ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f7ff fb8d 	bl	8004b18 <SEGGER_SYSVIEW_RecordExitISR>
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20013cc4 	.word	0x20013cc4
 800540c:	e000ed04 	.word	0xe000ed04

08005410 <redTask_Handler>:

static void redTask_Handler(void *para) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af02      	add	r7, sp, #8
 8005416:	6078      	str	r0, [r7, #4]
	BaseType_t stat;
	while (1) {
		printf("Led red is toggled");
 8005418:	4812      	ldr	r0, [pc, #72]	; (8005464 <redTask_Handler+0x54>)
 800541a:	f001 fc73 	bl	8006d04 <iprintf>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800541e:	2101      	movs	r1, #1
 8005420:	4811      	ldr	r0, [pc, #68]	; (8005468 <redTask_Handler+0x58>)
 8005422:	f000 fcd0 	bl	8005dc6 <HAL_GPIO_TogglePin>
		stat = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8005426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	2300      	movs	r3, #0
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	2000      	movs	r0, #0
 8005434:	f7fc fcca 	bl	8001dcc <xTaskGenericNotifyWait>
 8005438:	60f8      	str	r0, [r7, #12]
		if (stat == pdTRUE) {
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d1eb      	bne.n	8005418 <redTask_Handler+0x8>
			portENTER_CRITICAL();
 8005440:	f7fd fb78 	bl	8002b34 <vPortEnterCritical>
			nextTask_Handle = yellowTask_Handle;
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <redTask_Handler+0x5c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a09      	ldr	r2, [pc, #36]	; (8005470 <redTask_Handler+0x60>)
 800544a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800544c:	2200      	movs	r2, #0
 800544e:	2101      	movs	r1, #1
 8005450:	4805      	ldr	r0, [pc, #20]	; (8005468 <redTask_Handler+0x58>)
 8005452:	f000 fc9f 	bl	8005d94 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8005456:	f7fd fb9d 	bl	8002b94 <vPortExitCritical>
			vTaskDelete(NULL);
 800545a:	2000      	movs	r0, #0
 800545c:	f7fb fe5a 	bl	8001114 <vTaskDelete>
		printf("Led red is toggled");
 8005460:	e7da      	b.n	8005418 <redTask_Handler+0x8>
 8005462:	bf00      	nop
 8005464:	08007ca0 	.word	0x08007ca0
 8005468:	40020800 	.word	0x40020800
 800546c:	20013ccc 	.word	0x20013ccc
 8005470:	20013cc4 	.word	0x20013cc4

08005474 <yellowTask_Handler>:
		}

	}
}

static void yellowTask_Handler(void *para) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
	BaseType_t stat;
	while (1) {
		printf("Led yellow is toggled");
 800547c:	4812      	ldr	r0, [pc, #72]	; (80054c8 <yellowTask_Handler+0x54>)
 800547e:	f001 fc41 	bl	8006d04 <iprintf>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8005482:	2102      	movs	r1, #2
 8005484:	4811      	ldr	r0, [pc, #68]	; (80054cc <yellowTask_Handler+0x58>)
 8005486:	f000 fc9e 	bl	8005dc6 <HAL_GPIO_TogglePin>
		stat = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 800548a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	2300      	movs	r3, #0
 8005492:	2200      	movs	r2, #0
 8005494:	2100      	movs	r1, #0
 8005496:	2000      	movs	r0, #0
 8005498:	f7fc fc98 	bl	8001dcc <xTaskGenericNotifyWait>
 800549c:	60f8      	str	r0, [r7, #12]
		if (stat == pdTRUE) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d1eb      	bne.n	800547c <yellowTask_Handler+0x8>
			portENTER_CRITICAL();
 80054a4:	f7fd fb46 	bl	8002b34 <vPortEnterCritical>
			nextTask_Handle = greenTask_Handle;
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <yellowTask_Handler+0x5c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <yellowTask_Handler+0x60>)
 80054ae:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2102      	movs	r1, #2
 80054b4:	4805      	ldr	r0, [pc, #20]	; (80054cc <yellowTask_Handler+0x58>)
 80054b6:	f000 fc6d 	bl	8005d94 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80054ba:	f7fd fb6b 	bl	8002b94 <vPortExitCritical>
			vTaskDelete(NULL);
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fb fe28 	bl	8001114 <vTaskDelete>
		printf("Led yellow is toggled");
 80054c4:	e7da      	b.n	800547c <yellowTask_Handler+0x8>
 80054c6:	bf00      	nop
 80054c8:	08007cb4 	.word	0x08007cb4
 80054cc:	40020800 	.word	0x40020800
 80054d0:	20013cc0 	.word	0x20013cc0
 80054d4:	20013cc4 	.word	0x20013cc4

080054d8 <greenTask_Handler>:
		}

	}
}
static void greenTask_Handler(void *para) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af02      	add	r7, sp, #8
 80054de:	6078      	str	r0, [r7, #4]
	BaseType_t stat;
	while (1) {
		printf("Led red is toggled");
 80054e0:	4811      	ldr	r0, [pc, #68]	; (8005528 <greenTask_Handler+0x50>)
 80054e2:	f001 fc0f 	bl	8006d04 <iprintf>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80054e6:	2120      	movs	r1, #32
 80054e8:	4810      	ldr	r0, [pc, #64]	; (800552c <greenTask_Handler+0x54>)
 80054ea:	f000 fc6c 	bl	8005dc6 <HAL_GPIO_TogglePin>
		stat = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80054ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fc fc66 	bl	8001dcc <xTaskGenericNotifyWait>
 8005500:	60f8      	str	r0, [r7, #12]
		if (stat == pdTRUE) {
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d1eb      	bne.n	80054e0 <greenTask_Handler+0x8>
			portENTER_CRITICAL();
 8005508:	f7fd fb14 	bl	8002b34 <vPortEnterCritical>
			nextTask_Handle = NULL;
 800550c:	4b08      	ldr	r3, [pc, #32]	; (8005530 <greenTask_Handler+0x58>)
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005512:	2200      	movs	r2, #0
 8005514:	2120      	movs	r1, #32
 8005516:	4805      	ldr	r0, [pc, #20]	; (800552c <greenTask_Handler+0x54>)
 8005518:	f000 fc3c 	bl	8005d94 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 800551c:	f7fd fb3a 	bl	8002b94 <vPortExitCritical>
			vTaskDelete(NULL);
 8005520:	2000      	movs	r0, #0
 8005522:	f7fb fdf7 	bl	8001114 <vTaskDelete>
		printf("Led red is toggled");
 8005526:	e7db      	b.n	80054e0 <greenTask_Handler+0x8>
 8005528:	08007ca0 	.word	0x08007ca0
 800552c:	40020000 	.word	0x40020000
 8005530:	20013cc4 	.word	0x20013cc4

08005534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d101      	bne.n	800554a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005546:	f000 f99f 	bl	8005888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40000c00 	.word	0x40000c00

08005558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800555c:	b672      	cpsid	i
}
 800555e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005560:	e7fe      	b.n	8005560 <Error_Handler+0x8>
	...

08005564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_MspInit+0x4c>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	4a0f      	ldr	r2, [pc, #60]	; (80055b0 <HAL_MspInit+0x4c>)
 8005574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005578:	6453      	str	r3, [r2, #68]	; 0x44
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <HAL_MspInit+0x4c>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_MspInit+0x4c>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <HAL_MspInit+0x4c>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_MspInit+0x4c>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
      vInitPrioGroupValue();
 80055a2:	f7fd fa49 	bl	8002a38 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800

080055b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	; 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80055c4:	2200      	movs	r2, #0
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	2032      	movs	r0, #50	; 0x32
 80055ca:	f000 fa35 	bl	8005a38 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80055ce:	2032      	movs	r0, #50	; 0x32
 80055d0:	f000 fa4e 	bl	8005a70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <HAL_InitTick+0xa4>)
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <HAL_InitTick+0xa4>)
 80055de:	f043 0308 	orr.w	r3, r3, #8
 80055e2:	6413      	str	r3, [r2, #64]	; 0x40
 80055e4:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <HAL_InitTick+0xa4>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055f0:	f107 0210 	add.w	r2, r7, #16
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 f882 	bl	8006704 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005600:	f001 f86c 	bl	80066dc <HAL_RCC_GetPCLK1Freq>
 8005604:	4603      	mov	r3, r0
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	4a13      	ldr	r2, [pc, #76]	; (800565c <HAL_InitTick+0xa8>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	0c9b      	lsrs	r3, r3, #18
 8005614:	3b01      	subs	r3, #1
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <HAL_InitTick+0xac>)
 800561a:	4a12      	ldr	r2, [pc, #72]	; (8005664 <HAL_InitTick+0xb0>)
 800561c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_InitTick+0xac>)
 8005620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005624:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8005626:	4a0e      	ldr	r2, [pc, #56]	; (8005660 <HAL_InitTick+0xac>)
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <HAL_InitTick+0xac>)
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_InitTick+0xac>)
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8005638:	4809      	ldr	r0, [pc, #36]	; (8005660 <HAL_InitTick+0xac>)
 800563a:	f001 f895 	bl	8006768 <HAL_TIM_Base_Init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8005644:	4806      	ldr	r0, [pc, #24]	; (8005660 <HAL_InitTick+0xac>)
 8005646:	f001 f8e9 	bl	800681c <HAL_TIM_Base_Start_IT>
 800564a:	4603      	mov	r3, r0
 800564c:	e000      	b.n	8005650 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
}
 8005650:	4618      	mov	r0, r3
 8005652:	3730      	adds	r7, #48	; 0x30
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40023800 	.word	0x40023800
 800565c:	431bde83 	.word	0x431bde83
 8005660:	20013cd0 	.word	0x20013cd0
 8005664:	40000c00 	.word	0x40000c00

08005668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800566c:	e7fe      	b.n	800566c <NMI_Handler+0x4>

0800566e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800566e:	b480      	push	{r7}
 8005670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005672:	e7fe      	b.n	8005672 <HardFault_Handler+0x4>

08005674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005678:	e7fe      	b.n	8005678 <MemManage_Handler+0x4>

0800567a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800567e:	e7fe      	b.n	800567e <BusFault_Handler+0x4>

08005680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005684:	e7fe      	b.n	8005684 <UsageFault_Handler+0x4>

08005686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
     button_interrupt_handler();
 8005698:	f7ff fe92 	bl	80053c0 <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800569c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80056a0:	f000 fbac 	bl	8005dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056a4:	bf00      	nop
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80056ac:	4802      	ldr	r0, [pc, #8]	; (80056b8 <TIM5_IRQHandler+0x10>)
 80056ae:	f001 f917 	bl	80068e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20013cd0 	.word	0x20013cd0

080056bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e00a      	b.n	80056e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056ce:	f3af 8000 	nop.w
 80056d2:	4601      	mov	r1, r0
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	60ba      	str	r2, [r7, #8]
 80056da:	b2ca      	uxtb	r2, r1
 80056dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	3301      	adds	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	dbf0      	blt.n	80056ce <_read+0x12>
	}

return len;
 80056ec:	687b      	ldr	r3, [r7, #4]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
	return -1;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800571e:	605a      	str	r2, [r3, #4]
	return 0;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <_isatty>:

int _isatty(int file)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
	return 1;
 8005736:	2301      	movs	r3, #1
}
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
	return 0;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005768:	4a14      	ldr	r2, [pc, #80]	; (80057bc <_sbrk+0x5c>)
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <_sbrk+0x60>)
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <_sbrk+0x64>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800577c:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <_sbrk+0x64>)
 800577e:	4a12      	ldr	r2, [pc, #72]	; (80057c8 <_sbrk+0x68>)
 8005780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <_sbrk+0x64>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d207      	bcs.n	80057a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005790:	f001 fa6a 	bl	8006c68 <__errno>
 8005794:	4603      	mov	r3, r0
 8005796:	220c      	movs	r2, #12
 8005798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800579e:	e009      	b.n	80057b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057a0:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <_sbrk+0x64>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057a6:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <_sbrk+0x64>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <_sbrk+0x64>)
 80057b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057b2:	68fb      	ldr	r3, [r7, #12]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20018000 	.word	0x20018000
 80057c0:	00000400 	.word	0x00000400
 80057c4:	20013bcc 	.word	0x20013bcc
 80057c8:	20013d30 	.word	0x20013d30

080057cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <SystemInit+0x20>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	4a05      	ldr	r2, [pc, #20]	; (80057ec <SystemInit+0x20>)
 80057d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	e000ed00 	.word	0xe000ed00

080057f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80057f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057f4:	480d      	ldr	r0, [pc, #52]	; (800582c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80057f6:	490e      	ldr	r1, [pc, #56]	; (8005830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057f8:	4a0e      	ldr	r2, [pc, #56]	; (8005834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057fc:	e002      	b.n	8005804 <LoopCopyDataInit>

080057fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005802:	3304      	adds	r3, #4

08005804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005808:	d3f9      	bcc.n	80057fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800580a:	4a0b      	ldr	r2, [pc, #44]	; (8005838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800580c:	4c0b      	ldr	r4, [pc, #44]	; (800583c <LoopFillZerobss+0x26>)
  movs r3, #0
 800580e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005810:	e001      	b.n	8005816 <LoopFillZerobss>

08005812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005814:	3204      	adds	r2, #4

08005816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005818:	d3fb      	bcc.n	8005812 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800581a:	f7ff ffd7 	bl	80057cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800581e:	f001 fa29 	bl	8006c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005822:	f7ff fc4d 	bl	80050c0 <main>
  bx  lr    
 8005826:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800582c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005830:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005834:	08007da0 	.word	0x08007da0
  ldr r2, =_sbss
 8005838:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800583c:	20013d2c 	.word	0x20013d2c

08005840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005840:	e7fe      	b.n	8005840 <ADC_IRQHandler>
	...

08005844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_Init+0x40>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a0d      	ldr	r2, [pc, #52]	; (8005884 <HAL_Init+0x40>)
 800584e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_Init+0x40>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <HAL_Init+0x40>)
 800585a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800585e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005860:	4b08      	ldr	r3, [pc, #32]	; (8005884 <HAL_Init+0x40>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a07      	ldr	r2, [pc, #28]	; (8005884 <HAL_Init+0x40>)
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800586c:	2003      	movs	r0, #3
 800586e:	f000 f8d8 	bl	8005a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005872:	200f      	movs	r0, #15
 8005874:	f7ff fe9e 	bl	80055b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005878:	f7ff fe74 	bl	8005564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40023c00 	.word	0x40023c00

08005888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <HAL_IncTick+0x20>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_IncTick+0x24>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4413      	add	r3, r2
 8005898:	4a04      	ldr	r2, [pc, #16]	; (80058ac <HAL_IncTick+0x24>)
 800589a:	6013      	str	r3, [r2, #0]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000010 	.word	0x20000010
 80058ac:	20013d18 	.word	0x20013d18

080058b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return uwTick;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <HAL_GetTick+0x14>)
 80058b6:	681b      	ldr	r3, [r3, #0]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20013d18 	.word	0x20013d18

080058c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <__NVIC_SetPriorityGrouping+0x44>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058e4:	4013      	ands	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058fa:	4a04      	ldr	r2, [pc, #16]	; (800590c <__NVIC_SetPriorityGrouping+0x44>)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	60d3      	str	r3, [r2, #12]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <__NVIC_GetPriorityGrouping+0x18>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	f003 0307 	and.w	r3, r3, #7
}
 800591e:	4618      	mov	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	e000ed00 	.word	0xe000ed00

0800592c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	2b00      	cmp	r3, #0
 800593c:	db0b      	blt.n	8005956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	f003 021f 	and.w	r2, r3, #31
 8005944:	4907      	ldr	r1, [pc, #28]	; (8005964 <__NVIC_EnableIRQ+0x38>)
 8005946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	2001      	movs	r0, #1
 800594e:	fa00 f202 	lsl.w	r2, r0, r2
 8005952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	e000e100 	.word	0xe000e100

08005968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005978:	2b00      	cmp	r3, #0
 800597a:	db0a      	blt.n	8005992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	490c      	ldr	r1, [pc, #48]	; (80059b4 <__NVIC_SetPriority+0x4c>)
 8005982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005986:	0112      	lsls	r2, r2, #4
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	440b      	add	r3, r1
 800598c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005990:	e00a      	b.n	80059a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4908      	ldr	r1, [pc, #32]	; (80059b8 <__NVIC_SetPriority+0x50>)
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	3b04      	subs	r3, #4
 80059a0:	0112      	lsls	r2, r2, #4
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	440b      	add	r3, r1
 80059a6:	761a      	strb	r2, [r3, #24]
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	e000e100 	.word	0xe000e100
 80059b8:	e000ed00 	.word	0xe000ed00

080059bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f1c3 0307 	rsb	r3, r3, #7
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	bf28      	it	cs
 80059da:	2304      	movcs	r3, #4
 80059dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3304      	adds	r3, #4
 80059e2:	2b06      	cmp	r3, #6
 80059e4:	d902      	bls.n	80059ec <NVIC_EncodePriority+0x30>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3b03      	subs	r3, #3
 80059ea:	e000      	b.n	80059ee <NVIC_EncodePriority+0x32>
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43da      	mvns	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	401a      	ands	r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0e:	43d9      	mvns	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a14:	4313      	orrs	r3, r2
         );
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3724      	adds	r7, #36	; 0x24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ff4c 	bl	80058c8 <__NVIC_SetPriorityGrouping>
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a4a:	f7ff ff61 	bl	8005910 <__NVIC_GetPriorityGrouping>
 8005a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6978      	ldr	r0, [r7, #20]
 8005a56:	f7ff ffb1 	bl	80059bc <NVIC_EncodePriority>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff ff80 	bl	8005968 <__NVIC_SetPriority>
}
 8005a68:	bf00      	nop
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ff54 	bl	800592c <__NVIC_EnableIRQ>
}
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	e159      	b.n	8005d5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	f040 8148 	bne.w	8005d56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d005      	beq.n	8005ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d130      	bne.n	8005b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	2203      	movs	r2, #3
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b14:	2201      	movs	r2, #1
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f003 0201 	and.w	r2, r3, #1
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d017      	beq.n	8005b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	2203      	movs	r2, #3
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d123      	bne.n	8005bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	08da      	lsrs	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3208      	adds	r2, #8
 8005b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	220f      	movs	r2, #15
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	08da      	lsrs	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3208      	adds	r2, #8
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	2203      	movs	r2, #3
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 0203 	and.w	r2, r3, #3
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a2 	beq.w	8005d56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	4b57      	ldr	r3, [pc, #348]	; (8005d74 <HAL_GPIO_Init+0x2e8>)
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	4a56      	ldr	r2, [pc, #344]	; (8005d74 <HAL_GPIO_Init+0x2e8>)
 8005c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c20:	6453      	str	r3, [r2, #68]	; 0x44
 8005c22:	4b54      	ldr	r3, [pc, #336]	; (8005d74 <HAL_GPIO_Init+0x2e8>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c2e:	4a52      	ldr	r2, [pc, #328]	; (8005d78 <HAL_GPIO_Init+0x2ec>)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	3302      	adds	r3, #2
 8005c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	220f      	movs	r2, #15
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a49      	ldr	r2, [pc, #292]	; (8005d7c <HAL_GPIO_Init+0x2f0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d019      	beq.n	8005c8e <HAL_GPIO_Init+0x202>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a48      	ldr	r2, [pc, #288]	; (8005d80 <HAL_GPIO_Init+0x2f4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_GPIO_Init+0x1fe>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a47      	ldr	r2, [pc, #284]	; (8005d84 <HAL_GPIO_Init+0x2f8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00d      	beq.n	8005c86 <HAL_GPIO_Init+0x1fa>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a46      	ldr	r2, [pc, #280]	; (8005d88 <HAL_GPIO_Init+0x2fc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <HAL_GPIO_Init+0x1f6>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a45      	ldr	r2, [pc, #276]	; (8005d8c <HAL_GPIO_Init+0x300>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_GPIO_Init+0x1f2>
 8005c7a:	2304      	movs	r3, #4
 8005c7c:	e008      	b.n	8005c90 <HAL_GPIO_Init+0x204>
 8005c7e:	2307      	movs	r3, #7
 8005c80:	e006      	b.n	8005c90 <HAL_GPIO_Init+0x204>
 8005c82:	2303      	movs	r3, #3
 8005c84:	e004      	b.n	8005c90 <HAL_GPIO_Init+0x204>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e002      	b.n	8005c90 <HAL_GPIO_Init+0x204>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_GPIO_Init+0x204>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	f002 0203 	and.w	r2, r2, #3
 8005c96:	0092      	lsls	r2, r2, #2
 8005c98:	4093      	lsls	r3, r2
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ca0:	4935      	ldr	r1, [pc, #212]	; (8005d78 <HAL_GPIO_Init+0x2ec>)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cae:	4b38      	ldr	r3, [pc, #224]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cd2:	4a2f      	ldr	r2, [pc, #188]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cfc:	4a24      	ldr	r2, [pc, #144]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d02:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d26:	4a1a      	ldr	r2, [pc, #104]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d2c:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d50:	4a0f      	ldr	r2, [pc, #60]	; (8005d90 <HAL_GPIO_Init+0x304>)
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b0f      	cmp	r3, #15
 8005d60:	f67f aea2 	bls.w	8005aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	3724      	adds	r7, #36	; 0x24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800
 8005d78:	40013800 	.word	0x40013800
 8005d7c:	40020000 	.word	0x40020000
 8005d80:	40020400 	.word	0x40020400
 8005d84:	40020800 	.word	0x40020800
 8005d88:	40020c00 	.word	0x40020c00
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40013c00 	.word	0x40013c00

08005d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	807b      	strh	r3, [r7, #2]
 8005da0:	4613      	mov	r3, r2
 8005da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da4:	787b      	ldrb	r3, [r7, #1]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005db0:	e003      	b.n	8005dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	041a      	lsls	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	619a      	str	r2, [r3, #24]
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dd8:	887a      	ldrh	r2, [r7, #2]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	041a      	lsls	r2, r3, #16
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	43d9      	mvns	r1, r3
 8005de4:	887b      	ldrh	r3, [r7, #2]
 8005de6:	400b      	ands	r3, r1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	619a      	str	r2, [r3, #24]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d006      	beq.n	8005e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e12:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 f806 	bl	8005e2c <HAL_GPIO_EXTI_Callback>
  }
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40013c00 	.word	0x40013c00

08005e2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e264      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d075      	beq.n	8005f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e62:	4ba3      	ldr	r3, [pc, #652]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d00c      	beq.n	8005e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e6e:	4ba0      	ldr	r3, [pc, #640]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d112      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e7a:	4b9d      	ldr	r3, [pc, #628]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e86:	d10b      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e88:	4b99      	ldr	r3, [pc, #612]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05b      	beq.n	8005f4c <HAL_RCC_OscConfig+0x108>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d157      	bne.n	8005f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e23f      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d106      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x74>
 8005eaa:	4b91      	ldr	r3, [pc, #580]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a90      	ldr	r2, [pc, #576]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e01d      	b.n	8005ef4 <HAL_RCC_OscConfig+0xb0>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ec0:	d10c      	bne.n	8005edc <HAL_RCC_OscConfig+0x98>
 8005ec2:	4b8b      	ldr	r3, [pc, #556]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a8a      	ldr	r2, [pc, #552]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	4b88      	ldr	r3, [pc, #544]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a87      	ldr	r2, [pc, #540]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e00b      	b.n	8005ef4 <HAL_RCC_OscConfig+0xb0>
 8005edc:	4b84      	ldr	r3, [pc, #528]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a83      	ldr	r2, [pc, #524]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4b81      	ldr	r3, [pc, #516]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a80      	ldr	r2, [pc, #512]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d013      	beq.n	8005f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7ff fcd8 	bl	80058b0 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f04:	f7ff fcd4 	bl	80058b0 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	; 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e204      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f16:	4b76      	ldr	r3, [pc, #472]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0xc0>
 8005f22:	e014      	b.n	8005f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f24:	f7ff fcc4 	bl	80058b0 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f2c:	f7ff fcc0 	bl	80058b0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	; 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e1f0      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3e:	4b6c      	ldr	r3, [pc, #432]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0xe8>
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d063      	beq.n	8006022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5a:	4b65      	ldr	r3, [pc, #404]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f66:	4b62      	ldr	r3, [pc, #392]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d11c      	bne.n	8005fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f72:	4b5f      	ldr	r3, [pc, #380]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d116      	bne.n	8005fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f7e:	4b5c      	ldr	r3, [pc, #368]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <HAL_RCC_OscConfig+0x152>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d001      	beq.n	8005f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e1c4      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f96:	4b56      	ldr	r3, [pc, #344]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4952      	ldr	r1, [pc, #328]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005faa:	e03a      	b.n	8006022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d020      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb4:	4b4f      	ldr	r3, [pc, #316]	; (80060f4 <HAL_RCC_OscConfig+0x2b0>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fba:	f7ff fc79 	bl	80058b0 <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc2:	f7ff fc75 	bl	80058b0 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e1a5      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd4:	4b46      	ldr	r3, [pc, #280]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe0:	4b43      	ldr	r3, [pc, #268]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4940      	ldr	r1, [pc, #256]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]
 8005ff4:	e015      	b.n	8006022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff6:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <HAL_RCC_OscConfig+0x2b0>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7ff fc58 	bl	80058b0 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006004:	f7ff fc54 	bl	80058b0 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e184      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006016:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d030      	beq.n	8006090 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d016      	beq.n	8006064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006036:	4b30      	ldr	r3, [pc, #192]	; (80060f8 <HAL_RCC_OscConfig+0x2b4>)
 8006038:	2201      	movs	r2, #1
 800603a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603c:	f7ff fc38 	bl	80058b0 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006044:	f7ff fc34 	bl	80058b0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e164      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006056:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x200>
 8006062:	e015      	b.n	8006090 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <HAL_RCC_OscConfig+0x2b4>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800606a:	f7ff fc21 	bl	80058b0 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006072:	f7ff fc1d 	bl	80058b0 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e14d      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 8006086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f0      	bne.n	8006072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80a0 	beq.w	80061de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060a2:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	4a0e      	ldr	r2, [pc, #56]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060bc:	6413      	str	r3, [r2, #64]	; 0x40
 80060be:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <HAL_RCC_OscConfig+0x2ac>)
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ca:	2301      	movs	r3, #1
 80060cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ce:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <HAL_RCC_OscConfig+0x2b8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d121      	bne.n	800611e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <HAL_RCC_OscConfig+0x2b8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a07      	ldr	r2, [pc, #28]	; (80060fc <HAL_RCC_OscConfig+0x2b8>)
 80060e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060e6:	f7ff fbe3 	bl	80058b0 <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ec:	e011      	b.n	8006112 <HAL_RCC_OscConfig+0x2ce>
 80060ee:	bf00      	nop
 80060f0:	40023800 	.word	0x40023800
 80060f4:	42470000 	.word	0x42470000
 80060f8:	42470e80 	.word	0x42470e80
 80060fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006100:	f7ff fbd6 	bl	80058b0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e106      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006112:	4b85      	ldr	r3, [pc, #532]	; (8006328 <HAL_RCC_OscConfig+0x4e4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d106      	bne.n	8006134 <HAL_RCC_OscConfig+0x2f0>
 8006126:	4b81      	ldr	r3, [pc, #516]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	4a80      	ldr	r2, [pc, #512]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	6713      	str	r3, [r2, #112]	; 0x70
 8006132:	e01c      	b.n	800616e <HAL_RCC_OscConfig+0x32a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b05      	cmp	r3, #5
 800613a:	d10c      	bne.n	8006156 <HAL_RCC_OscConfig+0x312>
 800613c:	4b7b      	ldr	r3, [pc, #492]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	4a7a      	ldr	r2, [pc, #488]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 8006142:	f043 0304 	orr.w	r3, r3, #4
 8006146:	6713      	str	r3, [r2, #112]	; 0x70
 8006148:	4b78      	ldr	r3, [pc, #480]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 800614a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614c:	4a77      	ldr	r2, [pc, #476]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	6713      	str	r3, [r2, #112]	; 0x70
 8006154:	e00b      	b.n	800616e <HAL_RCC_OscConfig+0x32a>
 8006156:	4b75      	ldr	r3, [pc, #468]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	4a74      	ldr	r2, [pc, #464]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	6713      	str	r3, [r2, #112]	; 0x70
 8006162:	4b72      	ldr	r3, [pc, #456]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	4a71      	ldr	r2, [pc, #452]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 8006168:	f023 0304 	bic.w	r3, r3, #4
 800616c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d015      	beq.n	80061a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006176:	f7ff fb9b 	bl	80058b0 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617c:	e00a      	b.n	8006194 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800617e:	f7ff fb97 	bl	80058b0 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	f241 3288 	movw	r2, #5000	; 0x1388
 800618c:	4293      	cmp	r3, r2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e0c5      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006194:	4b65      	ldr	r3, [pc, #404]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 8006196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ee      	beq.n	800617e <HAL_RCC_OscConfig+0x33a>
 80061a0:	e014      	b.n	80061cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a2:	f7ff fb85 	bl	80058b0 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a8:	e00a      	b.n	80061c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061aa:	f7ff fb81 	bl	80058b0 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e0af      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c0:	4b5a      	ldr	r3, [pc, #360]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1ee      	bne.n	80061aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d105      	bne.n	80061de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d2:	4b56      	ldr	r3, [pc, #344]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	4a55      	ldr	r2, [pc, #340]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 80061d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 809b 	beq.w	800631e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061e8:	4b50      	ldr	r3, [pc, #320]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 030c 	and.w	r3, r3, #12
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d05c      	beq.n	80062ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d141      	bne.n	8006280 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061fc:	4b4c      	ldr	r3, [pc, #304]	; (8006330 <HAL_RCC_OscConfig+0x4ec>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006202:	f7ff fb55 	bl	80058b0 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620a:	f7ff fb51 	bl	80058b0 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e081      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621c:	4b43      	ldr	r3, [pc, #268]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f0      	bne.n	800620a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	019b      	lsls	r3, r3, #6
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	3b01      	subs	r3, #1
 8006242:	041b      	lsls	r3, r3, #16
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	061b      	lsls	r3, r3, #24
 800624c:	4937      	ldr	r1, [pc, #220]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 800624e:	4313      	orrs	r3, r2
 8006250:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006252:	4b37      	ldr	r3, [pc, #220]	; (8006330 <HAL_RCC_OscConfig+0x4ec>)
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7ff fb2a 	bl	80058b0 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006260:	f7ff fb26 	bl	80058b0 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e056      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006272:	4b2e      	ldr	r3, [pc, #184]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0x41c>
 800627e:	e04e      	b.n	800631e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006280:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <HAL_RCC_OscConfig+0x4ec>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006286:	f7ff fb13 	bl	80058b0 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628e:	f7ff fb0f 	bl	80058b0 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e03f      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a0:	4b22      	ldr	r3, [pc, #136]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <HAL_RCC_OscConfig+0x44a>
 80062ac:	e037      	b.n	800631e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e032      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062ba:	4b1c      	ldr	r3, [pc, #112]	; (800632c <HAL_RCC_OscConfig+0x4e8>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d028      	beq.n	800631a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d121      	bne.n	800631a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d11a      	bne.n	800631a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062ea:	4013      	ands	r3, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d111      	bne.n	800631a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	3b01      	subs	r3, #1
 8006304:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d107      	bne.n	800631a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006316:	429a      	cmp	r2, r3
 8006318:	d001      	beq.n	800631e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40007000 	.word	0x40007000
 800632c:	40023800 	.word	0x40023800
 8006330:	42470060 	.word	0x42470060

08006334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0cc      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006348:	4b68      	ldr	r3, [pc, #416]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d90c      	bls.n	8006370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006356:	4b65      	ldr	r3, [pc, #404]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635e:	4b63      	ldr	r3, [pc, #396]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d001      	beq.n	8006370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0b8      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d020      	beq.n	80063be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006388:	4b59      	ldr	r3, [pc, #356]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4a58      	ldr	r2, [pc, #352]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063a0:	4b53      	ldr	r3, [pc, #332]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4a52      	ldr	r2, [pc, #328]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ac:	4b50      	ldr	r3, [pc, #320]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	494d      	ldr	r1, [pc, #308]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d044      	beq.n	8006454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d107      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d2:	4b47      	ldr	r3, [pc, #284]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d119      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e07f      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d003      	beq.n	80063f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d107      	bne.n	8006402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f2:	4b3f      	ldr	r3, [pc, #252]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e06f      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006402:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e067      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006412:	4b37      	ldr	r3, [pc, #220]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f023 0203 	bic.w	r2, r3, #3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4934      	ldr	r1, [pc, #208]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	4313      	orrs	r3, r2
 8006422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006424:	f7ff fa44 	bl	80058b0 <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642a:	e00a      	b.n	8006442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642c:	f7ff fa40 	bl	80058b0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	; 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e04f      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	4b2b      	ldr	r3, [pc, #172]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 020c 	and.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	429a      	cmp	r2, r3
 8006452:	d1eb      	bne.n	800642c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006454:	4b25      	ldr	r3, [pc, #148]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d20c      	bcs.n	800647c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b22      	ldr	r3, [pc, #136]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b20      	ldr	r3, [pc, #128]	; (80064ec <HAL_RCC_ClockConfig+0x1b8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e032      	b.n	80064e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006488:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4916      	ldr	r1, [pc, #88]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	4313      	orrs	r3, r2
 8006498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	490e      	ldr	r1, [pc, #56]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064ba:	f000 f821 	bl	8006500 <HAL_RCC_GetSysClockFreq>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	490a      	ldr	r1, [pc, #40]	; (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 80064cc:	5ccb      	ldrb	r3, [r1, r3]
 80064ce:	fa22 f303 	lsr.w	r3, r2, r3
 80064d2:	4a09      	ldr	r2, [pc, #36]	; (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80064d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064d6:	4b09      	ldr	r3, [pc, #36]	; (80064fc <HAL_RCC_ClockConfig+0x1c8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff f86a 	bl	80055b4 <HAL_InitTick>

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	40023c00 	.word	0x40023c00
 80064f0:	40023800 	.word	0x40023800
 80064f4:	08007ce0 	.word	0x08007ce0
 80064f8:	20000008 	.word	0x20000008
 80064fc:	2000000c 	.word	0x2000000c

08006500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	2300      	movs	r3, #0
 8006512:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006518:	4b67      	ldr	r3, [pc, #412]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 030c 	and.w	r3, r3, #12
 8006520:	2b08      	cmp	r3, #8
 8006522:	d00d      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0x40>
 8006524:	2b08      	cmp	r3, #8
 8006526:	f200 80bd 	bhi.w	80066a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x34>
 800652e:	2b04      	cmp	r3, #4
 8006530:	d003      	beq.n	800653a <HAL_RCC_GetSysClockFreq+0x3a>
 8006532:	e0b7      	b.n	80066a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006534:	4b61      	ldr	r3, [pc, #388]	; (80066bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006536:	60bb      	str	r3, [r7, #8]
       break;
 8006538:	e0b7      	b.n	80066aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800653a:	4b61      	ldr	r3, [pc, #388]	; (80066c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800653c:	60bb      	str	r3, [r7, #8]
      break;
 800653e:	e0b4      	b.n	80066aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006540:	4b5d      	ldr	r3, [pc, #372]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800654a:	4b5b      	ldr	r3, [pc, #364]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d04d      	beq.n	80065f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006556:	4b58      	ldr	r3, [pc, #352]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	099b      	lsrs	r3, r3, #6
 800655c:	461a      	mov	r2, r3
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006566:	f04f 0100 	mov.w	r1, #0
 800656a:	ea02 0800 	and.w	r8, r2, r0
 800656e:	ea03 0901 	and.w	r9, r3, r1
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	014b      	lsls	r3, r1, #5
 8006580:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006584:	0142      	lsls	r2, r0, #5
 8006586:	4610      	mov	r0, r2
 8006588:	4619      	mov	r1, r3
 800658a:	ebb0 0008 	subs.w	r0, r0, r8
 800658e:	eb61 0109 	sbc.w	r1, r1, r9
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	018b      	lsls	r3, r1, #6
 800659c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065a0:	0182      	lsls	r2, r0, #6
 80065a2:	1a12      	subs	r2, r2, r0
 80065a4:	eb63 0301 	sbc.w	r3, r3, r1
 80065a8:	f04f 0000 	mov.w	r0, #0
 80065ac:	f04f 0100 	mov.w	r1, #0
 80065b0:	00d9      	lsls	r1, r3, #3
 80065b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065b6:	00d0      	lsls	r0, r2, #3
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	eb12 0208 	adds.w	r2, r2, r8
 80065c0:	eb43 0309 	adc.w	r3, r3, r9
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f04f 0100 	mov.w	r1, #0
 80065cc:	0259      	lsls	r1, r3, #9
 80065ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80065d2:	0250      	lsls	r0, r2, #9
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	461a      	mov	r2, r3
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	f7f9 fe9c 	bl	8000320 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4613      	mov	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e04a      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065f2:	4b31      	ldr	r3, [pc, #196]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	099b      	lsrs	r3, r3, #6
 80065f8:	461a      	mov	r2, r3
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006602:	f04f 0100 	mov.w	r1, #0
 8006606:	ea02 0400 	and.w	r4, r2, r0
 800660a:	ea03 0501 	and.w	r5, r3, r1
 800660e:	4620      	mov	r0, r4
 8006610:	4629      	mov	r1, r5
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	014b      	lsls	r3, r1, #5
 800661c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006620:	0142      	lsls	r2, r0, #5
 8006622:	4610      	mov	r0, r2
 8006624:	4619      	mov	r1, r3
 8006626:	1b00      	subs	r0, r0, r4
 8006628:	eb61 0105 	sbc.w	r1, r1, r5
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	018b      	lsls	r3, r1, #6
 8006636:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800663a:	0182      	lsls	r2, r0, #6
 800663c:	1a12      	subs	r2, r2, r0
 800663e:	eb63 0301 	sbc.w	r3, r3, r1
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f04f 0100 	mov.w	r1, #0
 800664a:	00d9      	lsls	r1, r3, #3
 800664c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006650:	00d0      	lsls	r0, r2, #3
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	1912      	adds	r2, r2, r4
 8006658:	eb45 0303 	adc.w	r3, r5, r3
 800665c:	f04f 0000 	mov.w	r0, #0
 8006660:	f04f 0100 	mov.w	r1, #0
 8006664:	0299      	lsls	r1, r3, #10
 8006666:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800666a:	0290      	lsls	r0, r2, #10
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	461a      	mov	r2, r3
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	f7f9 fe50 	bl	8000320 <__aeabi_uldivmod>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4613      	mov	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006688:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	0c1b      	lsrs	r3, r3, #16
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	3301      	adds	r3, #1
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a0:	60bb      	str	r3, [r7, #8]
      break;
 80066a2:	e002      	b.n	80066aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066a6:	60bb      	str	r3, [r7, #8]
      break;
 80066a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066aa:	68bb      	ldr	r3, [r7, #8]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800
 80066bc:	00f42400 	.word	0x00f42400
 80066c0:	007a1200 	.word	0x007a1200

080066c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c8:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066ca:	681b      	ldr	r3, [r3, #0]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000008 	.word	0x20000008

080066dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066e0:	f7ff fff0 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	0a9b      	lsrs	r3, r3, #10
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	4903      	ldr	r1, [pc, #12]	; (8006700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066f2:	5ccb      	ldrb	r3, [r1, r3]
 80066f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40023800 	.word	0x40023800
 8006700:	08007cf0 	.word	0x08007cf0

08006704 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	220f      	movs	r2, #15
 8006712:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006714:	4b12      	ldr	r3, [pc, #72]	; (8006760 <HAL_RCC_GetClockConfig+0x5c>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0203 	and.w	r2, r3, #3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <HAL_RCC_GetClockConfig+0x5c>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <HAL_RCC_GetClockConfig+0x5c>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <HAL_RCC_GetClockConfig+0x5c>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	08db      	lsrs	r3, r3, #3
 800673e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <HAL_RCC_GetClockConfig+0x60>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0207 	and.w	r2, r3, #7
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	601a      	str	r2, [r3, #0]
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40023800 	.word	0x40023800
 8006764:	40023c00 	.word	0x40023c00

08006768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e041      	b.n	80067fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f839 	bl	8006806 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f000 f9ca 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d001      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e044      	b.n	80068be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <HAL_TIM_Base_Start_IT+0xb0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d018      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0x6c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d013      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0x6c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1a      	ldr	r2, [pc, #104]	; (80068d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00e      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0x6c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d009      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0x6c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIM_Base_Start_IT+0x6c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a16      	ldr	r2, [pc, #88]	; (80068dc <HAL_TIM_Base_Start_IT+0xc0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d111      	bne.n	80068ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b06      	cmp	r3, #6
 8006898:	d010      	beq.n	80068bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068aa:	e007      	b.n	80068bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40014000 	.word	0x40014000

080068e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d122      	bne.n	800693c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b02      	cmp	r3, #2
 8006902:	d11b      	bne.n	800693c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0202 	mvn.w	r2, #2
 800690c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f8ee 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 8006928:	e005      	b.n	8006936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f8e0 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f8f1 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b04      	cmp	r3, #4
 8006948:	d122      	bne.n	8006990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d11b      	bne.n	8006990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0204 	mvn.w	r2, #4
 8006960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f8c4 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 800697c:	e005      	b.n	800698a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8b6 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f8c7 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b08      	cmp	r3, #8
 800699c:	d122      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d11b      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0208 	mvn.w	r2, #8
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2204      	movs	r2, #4
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f89a 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f88c 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f89d 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d122      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d11b      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0210 	mvn.w	r2, #16
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f870 	bl	8006b04 <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f862 	bl	8006af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f873 	bl	8006b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10e      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d107      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0201 	mvn.w	r2, #1
 8006a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fe fd68 	bl	8005534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6e:	2b80      	cmp	r3, #128	; 0x80
 8006a70:	d10e      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	d107      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8e2 	bl	8006c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d10e      	bne.n	8006abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d107      	bne.n	8006abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f838 	bl	8006b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d10e      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d107      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0220 	mvn.w	r2, #32
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8ac 	bl	8006c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a34      	ldr	r2, [pc, #208]	; (8006c24 <TIM_Base_SetConfig+0xe4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00f      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5e:	d00b      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a31      	ldr	r2, [pc, #196]	; (8006c28 <TIM_Base_SetConfig+0xe8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a30      	ldr	r2, [pc, #192]	; (8006c2c <TIM_Base_SetConfig+0xec>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0x38>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2f      	ldr	r2, [pc, #188]	; (8006c30 <TIM_Base_SetConfig+0xf0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <TIM_Base_SetConfig+0xe4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01b      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b98:	d017      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a22      	ldr	r2, [pc, #136]	; (8006c28 <TIM_Base_SetConfig+0xe8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a21      	ldr	r2, [pc, #132]	; (8006c2c <TIM_Base_SetConfig+0xec>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00f      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a20      	ldr	r2, [pc, #128]	; (8006c30 <TIM_Base_SetConfig+0xf0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1f      	ldr	r2, [pc, #124]	; (8006c34 <TIM_Base_SetConfig+0xf4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1e      	ldr	r2, [pc, #120]	; (8006c38 <TIM_Base_SetConfig+0xf8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_Base_SetConfig+0x8a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <TIM_Base_SetConfig+0xfc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d108      	bne.n	8006bdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a08      	ldr	r2, [pc, #32]	; (8006c24 <TIM_Base_SetConfig+0xe4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d103      	bne.n	8006c10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	615a      	str	r2, [r3, #20]
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40014400 	.word	0x40014400
 8006c3c:	40014800 	.word	0x40014800

08006c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <__errno>:
 8006c68:	4b01      	ldr	r3, [pc, #4]	; (8006c70 <__errno+0x8>)
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000014 	.word	0x20000014

08006c74 <__libc_init_array>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4d0d      	ldr	r5, [pc, #52]	; (8006cac <__libc_init_array+0x38>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	; (8006cb0 <__libc_init_array+0x3c>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	d109      	bne.n	8006c98 <__libc_init_array+0x24>
 8006c84:	4d0b      	ldr	r5, [pc, #44]	; (8006cb4 <__libc_init_array+0x40>)
 8006c86:	4c0c      	ldr	r4, [pc, #48]	; (8006cb8 <__libc_init_array+0x44>)
 8006c88:	f000 ff80 	bl	8007b8c <_init>
 8006c8c:	1b64      	subs	r4, r4, r5
 8006c8e:	10a4      	asrs	r4, r4, #2
 8006c90:	2600      	movs	r6, #0
 8006c92:	42a6      	cmp	r6, r4
 8006c94:	d105      	bne.n	8006ca2 <__libc_init_array+0x2e>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9c:	4798      	blx	r3
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7ee      	b.n	8006c80 <__libc_init_array+0xc>
 8006ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca6:	4798      	blx	r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	e7f2      	b.n	8006c92 <__libc_init_array+0x1e>
 8006cac:	08007d98 	.word	0x08007d98
 8006cb0:	08007d98 	.word	0x08007d98
 8006cb4:	08007d98 	.word	0x08007d98
 8006cb8:	08007d9c 	.word	0x08007d9c

08006cbc <memcmp>:
 8006cbc:	b530      	push	{r4, r5, lr}
 8006cbe:	3901      	subs	r1, #1
 8006cc0:	2400      	movs	r4, #0
 8006cc2:	42a2      	cmp	r2, r4
 8006cc4:	d101      	bne.n	8006cca <memcmp+0xe>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e005      	b.n	8006cd6 <memcmp+0x1a>
 8006cca:	5d03      	ldrb	r3, [r0, r4]
 8006ccc:	3401      	adds	r4, #1
 8006cce:	5d0d      	ldrb	r5, [r1, r4]
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	d0f6      	beq.n	8006cc2 <memcmp+0x6>
 8006cd4:	1b58      	subs	r0, r3, r5
 8006cd6:	bd30      	pop	{r4, r5, pc}

08006cd8 <memcpy>:
 8006cd8:	440a      	add	r2, r1
 8006cda:	4291      	cmp	r1, r2
 8006cdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ce0:	d100      	bne.n	8006ce4 <memcpy+0xc>
 8006ce2:	4770      	bx	lr
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cee:	4291      	cmp	r1, r2
 8006cf0:	d1f9      	bne.n	8006ce6 <memcpy+0xe>
 8006cf2:	bd10      	pop	{r4, pc}

08006cf4 <memset>:
 8006cf4:	4402      	add	r2, r0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d100      	bne.n	8006cfe <memset+0xa>
 8006cfc:	4770      	bx	lr
 8006cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006d02:	e7f9      	b.n	8006cf8 <memset+0x4>

08006d04 <iprintf>:
 8006d04:	b40f      	push	{r0, r1, r2, r3}
 8006d06:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <iprintf+0x2c>)
 8006d08:	b513      	push	{r0, r1, r4, lr}
 8006d0a:	681c      	ldr	r4, [r3, #0]
 8006d0c:	b124      	cbz	r4, 8006d18 <iprintf+0x14>
 8006d0e:	69a3      	ldr	r3, [r4, #24]
 8006d10:	b913      	cbnz	r3, 8006d18 <iprintf+0x14>
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 f866 	bl	8006de4 <__sinit>
 8006d18:	ab05      	add	r3, sp, #20
 8006d1a:	9a04      	ldr	r2, [sp, #16]
 8006d1c:	68a1      	ldr	r1, [r4, #8]
 8006d1e:	9301      	str	r3, [sp, #4]
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 f983 	bl	800702c <_vfiprintf_r>
 8006d26:	b002      	add	sp, #8
 8006d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d2c:	b004      	add	sp, #16
 8006d2e:	4770      	bx	lr
 8006d30:	20000014 	.word	0x20000014

08006d34 <std>:
 8006d34:	2300      	movs	r3, #0
 8006d36:	b510      	push	{r4, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d42:	6083      	str	r3, [r0, #8]
 8006d44:	8181      	strh	r1, [r0, #12]
 8006d46:	6643      	str	r3, [r0, #100]	; 0x64
 8006d48:	81c2      	strh	r2, [r0, #14]
 8006d4a:	6183      	str	r3, [r0, #24]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	2208      	movs	r2, #8
 8006d50:	305c      	adds	r0, #92	; 0x5c
 8006d52:	f7ff ffcf 	bl	8006cf4 <memset>
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <std+0x38>)
 8006d58:	6263      	str	r3, [r4, #36]	; 0x24
 8006d5a:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <std+0x3c>)
 8006d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <std+0x40>)
 8006d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d62:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <std+0x44>)
 8006d64:	6224      	str	r4, [r4, #32]
 8006d66:	6323      	str	r3, [r4, #48]	; 0x30
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	bf00      	nop
 8006d6c:	080075d5 	.word	0x080075d5
 8006d70:	080075f7 	.word	0x080075f7
 8006d74:	0800762f 	.word	0x0800762f
 8006d78:	08007653 	.word	0x08007653

08006d7c <_cleanup_r>:
 8006d7c:	4901      	ldr	r1, [pc, #4]	; (8006d84 <_cleanup_r+0x8>)
 8006d7e:	f000 b8af 	b.w	8006ee0 <_fwalk_reent>
 8006d82:	bf00      	nop
 8006d84:	08007909 	.word	0x08007909

08006d88 <__sfmoreglue>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	1e4a      	subs	r2, r1, #1
 8006d8c:	2568      	movs	r5, #104	; 0x68
 8006d8e:	4355      	muls	r5, r2
 8006d90:	460e      	mov	r6, r1
 8006d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d96:	f000 f8c5 	bl	8006f24 <_malloc_r>
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	b140      	cbz	r0, 8006db0 <__sfmoreglue+0x28>
 8006d9e:	2100      	movs	r1, #0
 8006da0:	e9c0 1600 	strd	r1, r6, [r0]
 8006da4:	300c      	adds	r0, #12
 8006da6:	60a0      	str	r0, [r4, #8]
 8006da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dac:	f7ff ffa2 	bl	8006cf4 <memset>
 8006db0:	4620      	mov	r0, r4
 8006db2:	bd70      	pop	{r4, r5, r6, pc}

08006db4 <__sfp_lock_acquire>:
 8006db4:	4801      	ldr	r0, [pc, #4]	; (8006dbc <__sfp_lock_acquire+0x8>)
 8006db6:	f000 b8b3 	b.w	8006f20 <__retarget_lock_acquire_recursive>
 8006dba:	bf00      	nop
 8006dbc:	20013d24 	.word	0x20013d24

08006dc0 <__sfp_lock_release>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	; (8006dc8 <__sfp_lock_release+0x8>)
 8006dc2:	f000 b8ae 	b.w	8006f22 <__retarget_lock_release_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	20013d24 	.word	0x20013d24

08006dcc <__sinit_lock_acquire>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__sinit_lock_acquire+0x8>)
 8006dce:	f000 b8a7 	b.w	8006f20 <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20013d1f 	.word	0x20013d1f

08006dd8 <__sinit_lock_release>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__sinit_lock_release+0x8>)
 8006dda:	f000 b8a2 	b.w	8006f22 <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	20013d1f 	.word	0x20013d1f

08006de4 <__sinit>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	f7ff fff0 	bl	8006dcc <__sinit_lock_acquire>
 8006dec:	69a3      	ldr	r3, [r4, #24]
 8006dee:	b11b      	cbz	r3, 8006df8 <__sinit+0x14>
 8006df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df4:	f7ff bff0 	b.w	8006dd8 <__sinit_lock_release>
 8006df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <__sinit+0x68>)
 8006e00:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <__sinit+0x6c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	bf04      	itt	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	61a3      	streq	r3, [r4, #24]
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 f820 	bl	8006e54 <__sfp>
 8006e14:	6060      	str	r0, [r4, #4]
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 f81c 	bl	8006e54 <__sfp>
 8006e1c:	60a0      	str	r0, [r4, #8]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f818 	bl	8006e54 <__sfp>
 8006e24:	2200      	movs	r2, #0
 8006e26:	60e0      	str	r0, [r4, #12]
 8006e28:	2104      	movs	r1, #4
 8006e2a:	6860      	ldr	r0, [r4, #4]
 8006e2c:	f7ff ff82 	bl	8006d34 <std>
 8006e30:	68a0      	ldr	r0, [r4, #8]
 8006e32:	2201      	movs	r2, #1
 8006e34:	2109      	movs	r1, #9
 8006e36:	f7ff ff7d 	bl	8006d34 <std>
 8006e3a:	68e0      	ldr	r0, [r4, #12]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	2112      	movs	r1, #18
 8006e40:	f7ff ff78 	bl	8006d34 <std>
 8006e44:	2301      	movs	r3, #1
 8006e46:	61a3      	str	r3, [r4, #24]
 8006e48:	e7d2      	b.n	8006df0 <__sinit+0xc>
 8006e4a:	bf00      	nop
 8006e4c:	08007cf8 	.word	0x08007cf8
 8006e50:	08006d7d 	.word	0x08006d7d

08006e54 <__sfp>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	4607      	mov	r7, r0
 8006e58:	f7ff ffac 	bl	8006db4 <__sfp_lock_acquire>
 8006e5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ed8 <__sfp+0x84>)
 8006e5e:	681e      	ldr	r6, [r3, #0]
 8006e60:	69b3      	ldr	r3, [r6, #24]
 8006e62:	b913      	cbnz	r3, 8006e6a <__sfp+0x16>
 8006e64:	4630      	mov	r0, r6
 8006e66:	f7ff ffbd 	bl	8006de4 <__sinit>
 8006e6a:	3648      	adds	r6, #72	; 0x48
 8006e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	d503      	bpl.n	8006e7c <__sfp+0x28>
 8006e74:	6833      	ldr	r3, [r6, #0]
 8006e76:	b30b      	cbz	r3, 8006ebc <__sfp+0x68>
 8006e78:	6836      	ldr	r6, [r6, #0]
 8006e7a:	e7f7      	b.n	8006e6c <__sfp+0x18>
 8006e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e80:	b9d5      	cbnz	r5, 8006eb8 <__sfp+0x64>
 8006e82:	4b16      	ldr	r3, [pc, #88]	; (8006edc <__sfp+0x88>)
 8006e84:	60e3      	str	r3, [r4, #12]
 8006e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e8c:	f000 f847 	bl	8006f1e <__retarget_lock_init_recursive>
 8006e90:	f7ff ff96 	bl	8006dc0 <__sfp_lock_release>
 8006e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e9c:	6025      	str	r5, [r4, #0]
 8006e9e:	61a5      	str	r5, [r4, #24]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ea8:	f7ff ff24 	bl	8006cf4 <memset>
 8006eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb8:	3468      	adds	r4, #104	; 0x68
 8006eba:	e7d9      	b.n	8006e70 <__sfp+0x1c>
 8006ebc:	2104      	movs	r1, #4
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f7ff ff62 	bl	8006d88 <__sfmoreglue>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	6030      	str	r0, [r6, #0]
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d1d5      	bne.n	8006e78 <__sfp+0x24>
 8006ecc:	f7ff ff78 	bl	8006dc0 <__sfp_lock_release>
 8006ed0:	230c      	movs	r3, #12
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	e7ee      	b.n	8006eb4 <__sfp+0x60>
 8006ed6:	bf00      	nop
 8006ed8:	08007cf8 	.word	0x08007cf8
 8006edc:	ffff0001 	.word	0xffff0001

08006ee0 <_fwalk_reent>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	4688      	mov	r8, r1
 8006ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eec:	2700      	movs	r7, #0
 8006eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ef6:	d505      	bpl.n	8006f04 <_fwalk_reent+0x24>
 8006ef8:	6824      	ldr	r4, [r4, #0]
 8006efa:	2c00      	cmp	r4, #0
 8006efc:	d1f7      	bne.n	8006eee <_fwalk_reent+0xe>
 8006efe:	4638      	mov	r0, r7
 8006f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f04:	89ab      	ldrh	r3, [r5, #12]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d907      	bls.n	8006f1a <_fwalk_reent+0x3a>
 8006f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	d003      	beq.n	8006f1a <_fwalk_reent+0x3a>
 8006f12:	4629      	mov	r1, r5
 8006f14:	4630      	mov	r0, r6
 8006f16:	47c0      	blx	r8
 8006f18:	4307      	orrs	r7, r0
 8006f1a:	3568      	adds	r5, #104	; 0x68
 8006f1c:	e7e9      	b.n	8006ef2 <_fwalk_reent+0x12>

08006f1e <__retarget_lock_init_recursive>:
 8006f1e:	4770      	bx	lr

08006f20 <__retarget_lock_acquire_recursive>:
 8006f20:	4770      	bx	lr

08006f22 <__retarget_lock_release_recursive>:
 8006f22:	4770      	bx	lr

08006f24 <_malloc_r>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	1ccd      	adds	r5, r1, #3
 8006f28:	f025 0503 	bic.w	r5, r5, #3
 8006f2c:	3508      	adds	r5, #8
 8006f2e:	2d0c      	cmp	r5, #12
 8006f30:	bf38      	it	cc
 8006f32:	250c      	movcc	r5, #12
 8006f34:	2d00      	cmp	r5, #0
 8006f36:	4606      	mov	r6, r0
 8006f38:	db01      	blt.n	8006f3e <_malloc_r+0x1a>
 8006f3a:	42a9      	cmp	r1, r5
 8006f3c:	d903      	bls.n	8006f46 <_malloc_r+0x22>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	6033      	str	r3, [r6, #0]
 8006f42:	2000      	movs	r0, #0
 8006f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f46:	f000 fd91 	bl	8007a6c <__malloc_lock>
 8006f4a:	4921      	ldr	r1, [pc, #132]	; (8006fd0 <_malloc_r+0xac>)
 8006f4c:	680a      	ldr	r2, [r1, #0]
 8006f4e:	4614      	mov	r4, r2
 8006f50:	b99c      	cbnz	r4, 8006f7a <_malloc_r+0x56>
 8006f52:	4f20      	ldr	r7, [pc, #128]	; (8006fd4 <_malloc_r+0xb0>)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	b923      	cbnz	r3, 8006f62 <_malloc_r+0x3e>
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f000 fb2a 	bl	80075b4 <_sbrk_r>
 8006f60:	6038      	str	r0, [r7, #0]
 8006f62:	4629      	mov	r1, r5
 8006f64:	4630      	mov	r0, r6
 8006f66:	f000 fb25 	bl	80075b4 <_sbrk_r>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d123      	bne.n	8006fb6 <_malloc_r+0x92>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	4630      	mov	r0, r6
 8006f74:	f000 fd80 	bl	8007a78 <__malloc_unlock>
 8006f78:	e7e3      	b.n	8006f42 <_malloc_r+0x1e>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	1b5b      	subs	r3, r3, r5
 8006f7e:	d417      	bmi.n	8006fb0 <_malloc_r+0x8c>
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d903      	bls.n	8006f8c <_malloc_r+0x68>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	441c      	add	r4, r3
 8006f88:	6025      	str	r5, [r4, #0]
 8006f8a:	e004      	b.n	8006f96 <_malloc_r+0x72>
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	42a2      	cmp	r2, r4
 8006f90:	bf0c      	ite	eq
 8006f92:	600b      	streq	r3, [r1, #0]
 8006f94:	6053      	strne	r3, [r2, #4]
 8006f96:	4630      	mov	r0, r6
 8006f98:	f000 fd6e 	bl	8007a78 <__malloc_unlock>
 8006f9c:	f104 000b 	add.w	r0, r4, #11
 8006fa0:	1d23      	adds	r3, r4, #4
 8006fa2:	f020 0007 	bic.w	r0, r0, #7
 8006fa6:	1ac2      	subs	r2, r0, r3
 8006fa8:	d0cc      	beq.n	8006f44 <_malloc_r+0x20>
 8006faa:	1a1b      	subs	r3, r3, r0
 8006fac:	50a3      	str	r3, [r4, r2]
 8006fae:	e7c9      	b.n	8006f44 <_malloc_r+0x20>
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	6864      	ldr	r4, [r4, #4]
 8006fb4:	e7cc      	b.n	8006f50 <_malloc_r+0x2c>
 8006fb6:	1cc4      	adds	r4, r0, #3
 8006fb8:	f024 0403 	bic.w	r4, r4, #3
 8006fbc:	42a0      	cmp	r0, r4
 8006fbe:	d0e3      	beq.n	8006f88 <_malloc_r+0x64>
 8006fc0:	1a21      	subs	r1, r4, r0
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f000 faf6 	bl	80075b4 <_sbrk_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d1dd      	bne.n	8006f88 <_malloc_r+0x64>
 8006fcc:	e7cf      	b.n	8006f6e <_malloc_r+0x4a>
 8006fce:	bf00      	nop
 8006fd0:	20013bd0 	.word	0x20013bd0
 8006fd4:	20013bd4 	.word	0x20013bd4

08006fd8 <__sfputc_r>:
 8006fd8:	6893      	ldr	r3, [r2, #8]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	b410      	push	{r4}
 8006fe0:	6093      	str	r3, [r2, #8]
 8006fe2:	da08      	bge.n	8006ff6 <__sfputc_r+0x1e>
 8006fe4:	6994      	ldr	r4, [r2, #24]
 8006fe6:	42a3      	cmp	r3, r4
 8006fe8:	db01      	blt.n	8006fee <__sfputc_r+0x16>
 8006fea:	290a      	cmp	r1, #10
 8006fec:	d103      	bne.n	8006ff6 <__sfputc_r+0x1e>
 8006fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ff2:	f000 bb33 	b.w	800765c <__swbuf_r>
 8006ff6:	6813      	ldr	r3, [r2, #0]
 8006ff8:	1c58      	adds	r0, r3, #1
 8006ffa:	6010      	str	r0, [r2, #0]
 8006ffc:	7019      	strb	r1, [r3, #0]
 8006ffe:	4608      	mov	r0, r1
 8007000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007004:	4770      	bx	lr

08007006 <__sfputs_r>:
 8007006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007008:	4606      	mov	r6, r0
 800700a:	460f      	mov	r7, r1
 800700c:	4614      	mov	r4, r2
 800700e:	18d5      	adds	r5, r2, r3
 8007010:	42ac      	cmp	r4, r5
 8007012:	d101      	bne.n	8007018 <__sfputs_r+0x12>
 8007014:	2000      	movs	r0, #0
 8007016:	e007      	b.n	8007028 <__sfputs_r+0x22>
 8007018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701c:	463a      	mov	r2, r7
 800701e:	4630      	mov	r0, r6
 8007020:	f7ff ffda 	bl	8006fd8 <__sfputc_r>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d1f3      	bne.n	8007010 <__sfputs_r+0xa>
 8007028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800702c <_vfiprintf_r>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	460d      	mov	r5, r1
 8007032:	b09d      	sub	sp, #116	; 0x74
 8007034:	4614      	mov	r4, r2
 8007036:	4698      	mov	r8, r3
 8007038:	4606      	mov	r6, r0
 800703a:	b118      	cbz	r0, 8007044 <_vfiprintf_r+0x18>
 800703c:	6983      	ldr	r3, [r0, #24]
 800703e:	b90b      	cbnz	r3, 8007044 <_vfiprintf_r+0x18>
 8007040:	f7ff fed0 	bl	8006de4 <__sinit>
 8007044:	4b89      	ldr	r3, [pc, #548]	; (800726c <_vfiprintf_r+0x240>)
 8007046:	429d      	cmp	r5, r3
 8007048:	d11b      	bne.n	8007082 <_vfiprintf_r+0x56>
 800704a:	6875      	ldr	r5, [r6, #4]
 800704c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800704e:	07d9      	lsls	r1, r3, #31
 8007050:	d405      	bmi.n	800705e <_vfiprintf_r+0x32>
 8007052:	89ab      	ldrh	r3, [r5, #12]
 8007054:	059a      	lsls	r2, r3, #22
 8007056:	d402      	bmi.n	800705e <_vfiprintf_r+0x32>
 8007058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800705a:	f7ff ff61 	bl	8006f20 <__retarget_lock_acquire_recursive>
 800705e:	89ab      	ldrh	r3, [r5, #12]
 8007060:	071b      	lsls	r3, r3, #28
 8007062:	d501      	bpl.n	8007068 <_vfiprintf_r+0x3c>
 8007064:	692b      	ldr	r3, [r5, #16]
 8007066:	b9eb      	cbnz	r3, 80070a4 <_vfiprintf_r+0x78>
 8007068:	4629      	mov	r1, r5
 800706a:	4630      	mov	r0, r6
 800706c:	f000 fb48 	bl	8007700 <__swsetup_r>
 8007070:	b1c0      	cbz	r0, 80070a4 <_vfiprintf_r+0x78>
 8007072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007074:	07dc      	lsls	r4, r3, #31
 8007076:	d50e      	bpl.n	8007096 <_vfiprintf_r+0x6a>
 8007078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800707c:	b01d      	add	sp, #116	; 0x74
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	4b7b      	ldr	r3, [pc, #492]	; (8007270 <_vfiprintf_r+0x244>)
 8007084:	429d      	cmp	r5, r3
 8007086:	d101      	bne.n	800708c <_vfiprintf_r+0x60>
 8007088:	68b5      	ldr	r5, [r6, #8]
 800708a:	e7df      	b.n	800704c <_vfiprintf_r+0x20>
 800708c:	4b79      	ldr	r3, [pc, #484]	; (8007274 <_vfiprintf_r+0x248>)
 800708e:	429d      	cmp	r5, r3
 8007090:	bf08      	it	eq
 8007092:	68f5      	ldreq	r5, [r6, #12]
 8007094:	e7da      	b.n	800704c <_vfiprintf_r+0x20>
 8007096:	89ab      	ldrh	r3, [r5, #12]
 8007098:	0598      	lsls	r0, r3, #22
 800709a:	d4ed      	bmi.n	8007078 <_vfiprintf_r+0x4c>
 800709c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800709e:	f7ff ff40 	bl	8006f22 <__retarget_lock_release_recursive>
 80070a2:	e7e9      	b.n	8007078 <_vfiprintf_r+0x4c>
 80070a4:	2300      	movs	r3, #0
 80070a6:	9309      	str	r3, [sp, #36]	; 0x24
 80070a8:	2320      	movs	r3, #32
 80070aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b2:	2330      	movs	r3, #48	; 0x30
 80070b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007278 <_vfiprintf_r+0x24c>
 80070b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070bc:	f04f 0901 	mov.w	r9, #1
 80070c0:	4623      	mov	r3, r4
 80070c2:	469a      	mov	sl, r3
 80070c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070c8:	b10a      	cbz	r2, 80070ce <_vfiprintf_r+0xa2>
 80070ca:	2a25      	cmp	r2, #37	; 0x25
 80070cc:	d1f9      	bne.n	80070c2 <_vfiprintf_r+0x96>
 80070ce:	ebba 0b04 	subs.w	fp, sl, r4
 80070d2:	d00b      	beq.n	80070ec <_vfiprintf_r+0xc0>
 80070d4:	465b      	mov	r3, fp
 80070d6:	4622      	mov	r2, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	4630      	mov	r0, r6
 80070dc:	f7ff ff93 	bl	8007006 <__sfputs_r>
 80070e0:	3001      	adds	r0, #1
 80070e2:	f000 80aa 	beq.w	800723a <_vfiprintf_r+0x20e>
 80070e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e8:	445a      	add	r2, fp
 80070ea:	9209      	str	r2, [sp, #36]	; 0x24
 80070ec:	f89a 3000 	ldrb.w	r3, [sl]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80a2 	beq.w	800723a <_vfiprintf_r+0x20e>
 80070f6:	2300      	movs	r3, #0
 80070f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007100:	f10a 0a01 	add.w	sl, sl, #1
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	9307      	str	r3, [sp, #28]
 8007108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800710c:	931a      	str	r3, [sp, #104]	; 0x68
 800710e:	4654      	mov	r4, sl
 8007110:	2205      	movs	r2, #5
 8007112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007116:	4858      	ldr	r0, [pc, #352]	; (8007278 <_vfiprintf_r+0x24c>)
 8007118:	f7f9 f8b2 	bl	8000280 <memchr>
 800711c:	9a04      	ldr	r2, [sp, #16]
 800711e:	b9d8      	cbnz	r0, 8007158 <_vfiprintf_r+0x12c>
 8007120:	06d1      	lsls	r1, r2, #27
 8007122:	bf44      	itt	mi
 8007124:	2320      	movmi	r3, #32
 8007126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712a:	0713      	lsls	r3, r2, #28
 800712c:	bf44      	itt	mi
 800712e:	232b      	movmi	r3, #43	; 0x2b
 8007130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007134:	f89a 3000 	ldrb.w	r3, [sl]
 8007138:	2b2a      	cmp	r3, #42	; 0x2a
 800713a:	d015      	beq.n	8007168 <_vfiprintf_r+0x13c>
 800713c:	9a07      	ldr	r2, [sp, #28]
 800713e:	4654      	mov	r4, sl
 8007140:	2000      	movs	r0, #0
 8007142:	f04f 0c0a 	mov.w	ip, #10
 8007146:	4621      	mov	r1, r4
 8007148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800714c:	3b30      	subs	r3, #48	; 0x30
 800714e:	2b09      	cmp	r3, #9
 8007150:	d94e      	bls.n	80071f0 <_vfiprintf_r+0x1c4>
 8007152:	b1b0      	cbz	r0, 8007182 <_vfiprintf_r+0x156>
 8007154:	9207      	str	r2, [sp, #28]
 8007156:	e014      	b.n	8007182 <_vfiprintf_r+0x156>
 8007158:	eba0 0308 	sub.w	r3, r0, r8
 800715c:	fa09 f303 	lsl.w	r3, r9, r3
 8007160:	4313      	orrs	r3, r2
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	46a2      	mov	sl, r4
 8007166:	e7d2      	b.n	800710e <_vfiprintf_r+0xe2>
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	1d19      	adds	r1, r3, #4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	9103      	str	r1, [sp, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	bfbb      	ittet	lt
 8007174:	425b      	neglt	r3, r3
 8007176:	f042 0202 	orrlt.w	r2, r2, #2
 800717a:	9307      	strge	r3, [sp, #28]
 800717c:	9307      	strlt	r3, [sp, #28]
 800717e:	bfb8      	it	lt
 8007180:	9204      	strlt	r2, [sp, #16]
 8007182:	7823      	ldrb	r3, [r4, #0]
 8007184:	2b2e      	cmp	r3, #46	; 0x2e
 8007186:	d10c      	bne.n	80071a2 <_vfiprintf_r+0x176>
 8007188:	7863      	ldrb	r3, [r4, #1]
 800718a:	2b2a      	cmp	r3, #42	; 0x2a
 800718c:	d135      	bne.n	80071fa <_vfiprintf_r+0x1ce>
 800718e:	9b03      	ldr	r3, [sp, #12]
 8007190:	1d1a      	adds	r2, r3, #4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	9203      	str	r2, [sp, #12]
 8007196:	2b00      	cmp	r3, #0
 8007198:	bfb8      	it	lt
 800719a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800719e:	3402      	adds	r4, #2
 80071a0:	9305      	str	r3, [sp, #20]
 80071a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007288 <_vfiprintf_r+0x25c>
 80071a6:	7821      	ldrb	r1, [r4, #0]
 80071a8:	2203      	movs	r2, #3
 80071aa:	4650      	mov	r0, sl
 80071ac:	f7f9 f868 	bl	8000280 <memchr>
 80071b0:	b140      	cbz	r0, 80071c4 <_vfiprintf_r+0x198>
 80071b2:	2340      	movs	r3, #64	; 0x40
 80071b4:	eba0 000a 	sub.w	r0, r0, sl
 80071b8:	fa03 f000 	lsl.w	r0, r3, r0
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	4303      	orrs	r3, r0
 80071c0:	3401      	adds	r4, #1
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c8:	482c      	ldr	r0, [pc, #176]	; (800727c <_vfiprintf_r+0x250>)
 80071ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ce:	2206      	movs	r2, #6
 80071d0:	f7f9 f856 	bl	8000280 <memchr>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d03f      	beq.n	8007258 <_vfiprintf_r+0x22c>
 80071d8:	4b29      	ldr	r3, [pc, #164]	; (8007280 <_vfiprintf_r+0x254>)
 80071da:	bb1b      	cbnz	r3, 8007224 <_vfiprintf_r+0x1f8>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	3307      	adds	r3, #7
 80071e0:	f023 0307 	bic.w	r3, r3, #7
 80071e4:	3308      	adds	r3, #8
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ea:	443b      	add	r3, r7
 80071ec:	9309      	str	r3, [sp, #36]	; 0x24
 80071ee:	e767      	b.n	80070c0 <_vfiprintf_r+0x94>
 80071f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f4:	460c      	mov	r4, r1
 80071f6:	2001      	movs	r0, #1
 80071f8:	e7a5      	b.n	8007146 <_vfiprintf_r+0x11a>
 80071fa:	2300      	movs	r3, #0
 80071fc:	3401      	adds	r4, #1
 80071fe:	9305      	str	r3, [sp, #20]
 8007200:	4619      	mov	r1, r3
 8007202:	f04f 0c0a 	mov.w	ip, #10
 8007206:	4620      	mov	r0, r4
 8007208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800720c:	3a30      	subs	r2, #48	; 0x30
 800720e:	2a09      	cmp	r2, #9
 8007210:	d903      	bls.n	800721a <_vfiprintf_r+0x1ee>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0c5      	beq.n	80071a2 <_vfiprintf_r+0x176>
 8007216:	9105      	str	r1, [sp, #20]
 8007218:	e7c3      	b.n	80071a2 <_vfiprintf_r+0x176>
 800721a:	fb0c 2101 	mla	r1, ip, r1, r2
 800721e:	4604      	mov	r4, r0
 8007220:	2301      	movs	r3, #1
 8007222:	e7f0      	b.n	8007206 <_vfiprintf_r+0x1da>
 8007224:	ab03      	add	r3, sp, #12
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	462a      	mov	r2, r5
 800722a:	4b16      	ldr	r3, [pc, #88]	; (8007284 <_vfiprintf_r+0x258>)
 800722c:	a904      	add	r1, sp, #16
 800722e:	4630      	mov	r0, r6
 8007230:	f3af 8000 	nop.w
 8007234:	4607      	mov	r7, r0
 8007236:	1c78      	adds	r0, r7, #1
 8007238:	d1d6      	bne.n	80071e8 <_vfiprintf_r+0x1bc>
 800723a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800723c:	07d9      	lsls	r1, r3, #31
 800723e:	d405      	bmi.n	800724c <_vfiprintf_r+0x220>
 8007240:	89ab      	ldrh	r3, [r5, #12]
 8007242:	059a      	lsls	r2, r3, #22
 8007244:	d402      	bmi.n	800724c <_vfiprintf_r+0x220>
 8007246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007248:	f7ff fe6b 	bl	8006f22 <__retarget_lock_release_recursive>
 800724c:	89ab      	ldrh	r3, [r5, #12]
 800724e:	065b      	lsls	r3, r3, #25
 8007250:	f53f af12 	bmi.w	8007078 <_vfiprintf_r+0x4c>
 8007254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007256:	e711      	b.n	800707c <_vfiprintf_r+0x50>
 8007258:	ab03      	add	r3, sp, #12
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	462a      	mov	r2, r5
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <_vfiprintf_r+0x258>)
 8007260:	a904      	add	r1, sp, #16
 8007262:	4630      	mov	r0, r6
 8007264:	f000 f880 	bl	8007368 <_printf_i>
 8007268:	e7e4      	b.n	8007234 <_vfiprintf_r+0x208>
 800726a:	bf00      	nop
 800726c:	08007d1c 	.word	0x08007d1c
 8007270:	08007d3c 	.word	0x08007d3c
 8007274:	08007cfc 	.word	0x08007cfc
 8007278:	08007d5c 	.word	0x08007d5c
 800727c:	08007d66 	.word	0x08007d66
 8007280:	00000000 	.word	0x00000000
 8007284:	08007007 	.word	0x08007007
 8007288:	08007d62 	.word	0x08007d62

0800728c <_printf_common>:
 800728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	4616      	mov	r6, r2
 8007292:	4699      	mov	r9, r3
 8007294:	688a      	ldr	r2, [r1, #8]
 8007296:	690b      	ldr	r3, [r1, #16]
 8007298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800729c:	4293      	cmp	r3, r2
 800729e:	bfb8      	it	lt
 80072a0:	4613      	movlt	r3, r2
 80072a2:	6033      	str	r3, [r6, #0]
 80072a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072a8:	4607      	mov	r7, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	b10a      	cbz	r2, 80072b2 <_printf_common+0x26>
 80072ae:	3301      	adds	r3, #1
 80072b0:	6033      	str	r3, [r6, #0]
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	0699      	lsls	r1, r3, #26
 80072b6:	bf42      	ittt	mi
 80072b8:	6833      	ldrmi	r3, [r6, #0]
 80072ba:	3302      	addmi	r3, #2
 80072bc:	6033      	strmi	r3, [r6, #0]
 80072be:	6825      	ldr	r5, [r4, #0]
 80072c0:	f015 0506 	ands.w	r5, r5, #6
 80072c4:	d106      	bne.n	80072d4 <_printf_common+0x48>
 80072c6:	f104 0a19 	add.w	sl, r4, #25
 80072ca:	68e3      	ldr	r3, [r4, #12]
 80072cc:	6832      	ldr	r2, [r6, #0]
 80072ce:	1a9b      	subs	r3, r3, r2
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	dc26      	bgt.n	8007322 <_printf_common+0x96>
 80072d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072d8:	1e13      	subs	r3, r2, #0
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	bf18      	it	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	0692      	lsls	r2, r2, #26
 80072e2:	d42b      	bmi.n	800733c <_printf_common+0xb0>
 80072e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072e8:	4649      	mov	r1, r9
 80072ea:	4638      	mov	r0, r7
 80072ec:	47c0      	blx	r8
 80072ee:	3001      	adds	r0, #1
 80072f0:	d01e      	beq.n	8007330 <_printf_common+0xa4>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	68e5      	ldr	r5, [r4, #12]
 80072f6:	6832      	ldr	r2, [r6, #0]
 80072f8:	f003 0306 	and.w	r3, r3, #6
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	bf08      	it	eq
 8007300:	1aad      	subeq	r5, r5, r2
 8007302:	68a3      	ldr	r3, [r4, #8]
 8007304:	6922      	ldr	r2, [r4, #16]
 8007306:	bf0c      	ite	eq
 8007308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800730c:	2500      	movne	r5, #0
 800730e:	4293      	cmp	r3, r2
 8007310:	bfc4      	itt	gt
 8007312:	1a9b      	subgt	r3, r3, r2
 8007314:	18ed      	addgt	r5, r5, r3
 8007316:	2600      	movs	r6, #0
 8007318:	341a      	adds	r4, #26
 800731a:	42b5      	cmp	r5, r6
 800731c:	d11a      	bne.n	8007354 <_printf_common+0xc8>
 800731e:	2000      	movs	r0, #0
 8007320:	e008      	b.n	8007334 <_printf_common+0xa8>
 8007322:	2301      	movs	r3, #1
 8007324:	4652      	mov	r2, sl
 8007326:	4649      	mov	r1, r9
 8007328:	4638      	mov	r0, r7
 800732a:	47c0      	blx	r8
 800732c:	3001      	adds	r0, #1
 800732e:	d103      	bne.n	8007338 <_printf_common+0xac>
 8007330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007338:	3501      	adds	r5, #1
 800733a:	e7c6      	b.n	80072ca <_printf_common+0x3e>
 800733c:	18e1      	adds	r1, r4, r3
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	2030      	movs	r0, #48	; 0x30
 8007342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007346:	4422      	add	r2, r4
 8007348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800734c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007350:	3302      	adds	r3, #2
 8007352:	e7c7      	b.n	80072e4 <_printf_common+0x58>
 8007354:	2301      	movs	r3, #1
 8007356:	4622      	mov	r2, r4
 8007358:	4649      	mov	r1, r9
 800735a:	4638      	mov	r0, r7
 800735c:	47c0      	blx	r8
 800735e:	3001      	adds	r0, #1
 8007360:	d0e6      	beq.n	8007330 <_printf_common+0xa4>
 8007362:	3601      	adds	r6, #1
 8007364:	e7d9      	b.n	800731a <_printf_common+0x8e>
	...

08007368 <_printf_i>:
 8007368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800736c:	460c      	mov	r4, r1
 800736e:	4691      	mov	r9, r2
 8007370:	7e27      	ldrb	r7, [r4, #24]
 8007372:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007374:	2f78      	cmp	r7, #120	; 0x78
 8007376:	4680      	mov	r8, r0
 8007378:	469a      	mov	sl, r3
 800737a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800737e:	d807      	bhi.n	8007390 <_printf_i+0x28>
 8007380:	2f62      	cmp	r7, #98	; 0x62
 8007382:	d80a      	bhi.n	800739a <_printf_i+0x32>
 8007384:	2f00      	cmp	r7, #0
 8007386:	f000 80d8 	beq.w	800753a <_printf_i+0x1d2>
 800738a:	2f58      	cmp	r7, #88	; 0x58
 800738c:	f000 80a3 	beq.w	80074d6 <_printf_i+0x16e>
 8007390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007398:	e03a      	b.n	8007410 <_printf_i+0xa8>
 800739a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800739e:	2b15      	cmp	r3, #21
 80073a0:	d8f6      	bhi.n	8007390 <_printf_i+0x28>
 80073a2:	a001      	add	r0, pc, #4	; (adr r0, 80073a8 <_printf_i+0x40>)
 80073a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073a8:	08007401 	.word	0x08007401
 80073ac:	08007415 	.word	0x08007415
 80073b0:	08007391 	.word	0x08007391
 80073b4:	08007391 	.word	0x08007391
 80073b8:	08007391 	.word	0x08007391
 80073bc:	08007391 	.word	0x08007391
 80073c0:	08007415 	.word	0x08007415
 80073c4:	08007391 	.word	0x08007391
 80073c8:	08007391 	.word	0x08007391
 80073cc:	08007391 	.word	0x08007391
 80073d0:	08007391 	.word	0x08007391
 80073d4:	08007521 	.word	0x08007521
 80073d8:	08007445 	.word	0x08007445
 80073dc:	08007503 	.word	0x08007503
 80073e0:	08007391 	.word	0x08007391
 80073e4:	08007391 	.word	0x08007391
 80073e8:	08007543 	.word	0x08007543
 80073ec:	08007391 	.word	0x08007391
 80073f0:	08007445 	.word	0x08007445
 80073f4:	08007391 	.word	0x08007391
 80073f8:	08007391 	.word	0x08007391
 80073fc:	0800750b 	.word	0x0800750b
 8007400:	680b      	ldr	r3, [r1, #0]
 8007402:	1d1a      	adds	r2, r3, #4
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	600a      	str	r2, [r1, #0]
 8007408:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800740c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007410:	2301      	movs	r3, #1
 8007412:	e0a3      	b.n	800755c <_printf_i+0x1f4>
 8007414:	6825      	ldr	r5, [r4, #0]
 8007416:	6808      	ldr	r0, [r1, #0]
 8007418:	062e      	lsls	r6, r5, #24
 800741a:	f100 0304 	add.w	r3, r0, #4
 800741e:	d50a      	bpl.n	8007436 <_printf_i+0xce>
 8007420:	6805      	ldr	r5, [r0, #0]
 8007422:	600b      	str	r3, [r1, #0]
 8007424:	2d00      	cmp	r5, #0
 8007426:	da03      	bge.n	8007430 <_printf_i+0xc8>
 8007428:	232d      	movs	r3, #45	; 0x2d
 800742a:	426d      	negs	r5, r5
 800742c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007430:	485e      	ldr	r0, [pc, #376]	; (80075ac <_printf_i+0x244>)
 8007432:	230a      	movs	r3, #10
 8007434:	e019      	b.n	800746a <_printf_i+0x102>
 8007436:	f015 0f40 	tst.w	r5, #64	; 0x40
 800743a:	6805      	ldr	r5, [r0, #0]
 800743c:	600b      	str	r3, [r1, #0]
 800743e:	bf18      	it	ne
 8007440:	b22d      	sxthne	r5, r5
 8007442:	e7ef      	b.n	8007424 <_printf_i+0xbc>
 8007444:	680b      	ldr	r3, [r1, #0]
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	1d18      	adds	r0, r3, #4
 800744a:	6008      	str	r0, [r1, #0]
 800744c:	0628      	lsls	r0, r5, #24
 800744e:	d501      	bpl.n	8007454 <_printf_i+0xec>
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	e002      	b.n	800745a <_printf_i+0xf2>
 8007454:	0669      	lsls	r1, r5, #25
 8007456:	d5fb      	bpl.n	8007450 <_printf_i+0xe8>
 8007458:	881d      	ldrh	r5, [r3, #0]
 800745a:	4854      	ldr	r0, [pc, #336]	; (80075ac <_printf_i+0x244>)
 800745c:	2f6f      	cmp	r7, #111	; 0x6f
 800745e:	bf0c      	ite	eq
 8007460:	2308      	moveq	r3, #8
 8007462:	230a      	movne	r3, #10
 8007464:	2100      	movs	r1, #0
 8007466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800746a:	6866      	ldr	r6, [r4, #4]
 800746c:	60a6      	str	r6, [r4, #8]
 800746e:	2e00      	cmp	r6, #0
 8007470:	bfa2      	ittt	ge
 8007472:	6821      	ldrge	r1, [r4, #0]
 8007474:	f021 0104 	bicge.w	r1, r1, #4
 8007478:	6021      	strge	r1, [r4, #0]
 800747a:	b90d      	cbnz	r5, 8007480 <_printf_i+0x118>
 800747c:	2e00      	cmp	r6, #0
 800747e:	d04d      	beq.n	800751c <_printf_i+0x1b4>
 8007480:	4616      	mov	r6, r2
 8007482:	fbb5 f1f3 	udiv	r1, r5, r3
 8007486:	fb03 5711 	mls	r7, r3, r1, r5
 800748a:	5dc7      	ldrb	r7, [r0, r7]
 800748c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007490:	462f      	mov	r7, r5
 8007492:	42bb      	cmp	r3, r7
 8007494:	460d      	mov	r5, r1
 8007496:	d9f4      	bls.n	8007482 <_printf_i+0x11a>
 8007498:	2b08      	cmp	r3, #8
 800749a:	d10b      	bne.n	80074b4 <_printf_i+0x14c>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	07df      	lsls	r7, r3, #31
 80074a0:	d508      	bpl.n	80074b4 <_printf_i+0x14c>
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	6861      	ldr	r1, [r4, #4]
 80074a6:	4299      	cmp	r1, r3
 80074a8:	bfde      	ittt	le
 80074aa:	2330      	movle	r3, #48	; 0x30
 80074ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074b0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80074b4:	1b92      	subs	r2, r2, r6
 80074b6:	6122      	str	r2, [r4, #16]
 80074b8:	f8cd a000 	str.w	sl, [sp]
 80074bc:	464b      	mov	r3, r9
 80074be:	aa03      	add	r2, sp, #12
 80074c0:	4621      	mov	r1, r4
 80074c2:	4640      	mov	r0, r8
 80074c4:	f7ff fee2 	bl	800728c <_printf_common>
 80074c8:	3001      	adds	r0, #1
 80074ca:	d14c      	bne.n	8007566 <_printf_i+0x1fe>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074d0:	b004      	add	sp, #16
 80074d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d6:	4835      	ldr	r0, [pc, #212]	; (80075ac <_printf_i+0x244>)
 80074d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	680e      	ldr	r6, [r1, #0]
 80074e0:	061f      	lsls	r7, r3, #24
 80074e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80074e6:	600e      	str	r6, [r1, #0]
 80074e8:	d514      	bpl.n	8007514 <_printf_i+0x1ac>
 80074ea:	07d9      	lsls	r1, r3, #31
 80074ec:	bf44      	itt	mi
 80074ee:	f043 0320 	orrmi.w	r3, r3, #32
 80074f2:	6023      	strmi	r3, [r4, #0]
 80074f4:	b91d      	cbnz	r5, 80074fe <_printf_i+0x196>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	f023 0320 	bic.w	r3, r3, #32
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	2310      	movs	r3, #16
 8007500:	e7b0      	b.n	8007464 <_printf_i+0xfc>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	f043 0320 	orr.w	r3, r3, #32
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	2378      	movs	r3, #120	; 0x78
 800750c:	4828      	ldr	r0, [pc, #160]	; (80075b0 <_printf_i+0x248>)
 800750e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007512:	e7e3      	b.n	80074dc <_printf_i+0x174>
 8007514:	065e      	lsls	r6, r3, #25
 8007516:	bf48      	it	mi
 8007518:	b2ad      	uxthmi	r5, r5
 800751a:	e7e6      	b.n	80074ea <_printf_i+0x182>
 800751c:	4616      	mov	r6, r2
 800751e:	e7bb      	b.n	8007498 <_printf_i+0x130>
 8007520:	680b      	ldr	r3, [r1, #0]
 8007522:	6826      	ldr	r6, [r4, #0]
 8007524:	6960      	ldr	r0, [r4, #20]
 8007526:	1d1d      	adds	r5, r3, #4
 8007528:	600d      	str	r5, [r1, #0]
 800752a:	0635      	lsls	r5, r6, #24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	d501      	bpl.n	8007534 <_printf_i+0x1cc>
 8007530:	6018      	str	r0, [r3, #0]
 8007532:	e002      	b.n	800753a <_printf_i+0x1d2>
 8007534:	0671      	lsls	r1, r6, #25
 8007536:	d5fb      	bpl.n	8007530 <_printf_i+0x1c8>
 8007538:	8018      	strh	r0, [r3, #0]
 800753a:	2300      	movs	r3, #0
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	4616      	mov	r6, r2
 8007540:	e7ba      	b.n	80074b8 <_printf_i+0x150>
 8007542:	680b      	ldr	r3, [r1, #0]
 8007544:	1d1a      	adds	r2, r3, #4
 8007546:	600a      	str	r2, [r1, #0]
 8007548:	681e      	ldr	r6, [r3, #0]
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	2100      	movs	r1, #0
 800754e:	4630      	mov	r0, r6
 8007550:	f7f8 fe96 	bl	8000280 <memchr>
 8007554:	b108      	cbz	r0, 800755a <_printf_i+0x1f2>
 8007556:	1b80      	subs	r0, r0, r6
 8007558:	6060      	str	r0, [r4, #4]
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	2300      	movs	r3, #0
 8007560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007564:	e7a8      	b.n	80074b8 <_printf_i+0x150>
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	4632      	mov	r2, r6
 800756a:	4649      	mov	r1, r9
 800756c:	4640      	mov	r0, r8
 800756e:	47d0      	blx	sl
 8007570:	3001      	adds	r0, #1
 8007572:	d0ab      	beq.n	80074cc <_printf_i+0x164>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	079b      	lsls	r3, r3, #30
 8007578:	d413      	bmi.n	80075a2 <_printf_i+0x23a>
 800757a:	68e0      	ldr	r0, [r4, #12]
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	4298      	cmp	r0, r3
 8007580:	bfb8      	it	lt
 8007582:	4618      	movlt	r0, r3
 8007584:	e7a4      	b.n	80074d0 <_printf_i+0x168>
 8007586:	2301      	movs	r3, #1
 8007588:	4632      	mov	r2, r6
 800758a:	4649      	mov	r1, r9
 800758c:	4640      	mov	r0, r8
 800758e:	47d0      	blx	sl
 8007590:	3001      	adds	r0, #1
 8007592:	d09b      	beq.n	80074cc <_printf_i+0x164>
 8007594:	3501      	adds	r5, #1
 8007596:	68e3      	ldr	r3, [r4, #12]
 8007598:	9903      	ldr	r1, [sp, #12]
 800759a:	1a5b      	subs	r3, r3, r1
 800759c:	42ab      	cmp	r3, r5
 800759e:	dcf2      	bgt.n	8007586 <_printf_i+0x21e>
 80075a0:	e7eb      	b.n	800757a <_printf_i+0x212>
 80075a2:	2500      	movs	r5, #0
 80075a4:	f104 0619 	add.w	r6, r4, #25
 80075a8:	e7f5      	b.n	8007596 <_printf_i+0x22e>
 80075aa:	bf00      	nop
 80075ac:	08007d6d 	.word	0x08007d6d
 80075b0:	08007d7e 	.word	0x08007d7e

080075b4 <_sbrk_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d06      	ldr	r5, [pc, #24]	; (80075d0 <_sbrk_r+0x1c>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fe f8ce 	bl	8005760 <_sbrk>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_sbrk_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_sbrk_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20013d28 	.word	0x20013d28

080075d4 <__sread>:
 80075d4:	b510      	push	{r4, lr}
 80075d6:	460c      	mov	r4, r1
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	f000 faa2 	bl	8007b24 <_read_r>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	bfab      	itete	ge
 80075e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075e6:	89a3      	ldrhlt	r3, [r4, #12]
 80075e8:	181b      	addge	r3, r3, r0
 80075ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075ee:	bfac      	ite	ge
 80075f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80075f2:	81a3      	strhlt	r3, [r4, #12]
 80075f4:	bd10      	pop	{r4, pc}

080075f6 <__swrite>:
 80075f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	461f      	mov	r7, r3
 80075fc:	898b      	ldrh	r3, [r1, #12]
 80075fe:	05db      	lsls	r3, r3, #23
 8007600:	4605      	mov	r5, r0
 8007602:	460c      	mov	r4, r1
 8007604:	4616      	mov	r6, r2
 8007606:	d505      	bpl.n	8007614 <__swrite+0x1e>
 8007608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760c:	2302      	movs	r3, #2
 800760e:	2200      	movs	r2, #0
 8007610:	f000 f9b6 	bl	8007980 <_lseek_r>
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800761a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800761e:	81a3      	strh	r3, [r4, #12]
 8007620:	4632      	mov	r2, r6
 8007622:	463b      	mov	r3, r7
 8007624:	4628      	mov	r0, r5
 8007626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800762a:	f7fd bd37 	b.w	800509c <_write_r>

0800762e <__sseek>:
 800762e:	b510      	push	{r4, lr}
 8007630:	460c      	mov	r4, r1
 8007632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007636:	f000 f9a3 	bl	8007980 <_lseek_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	bf15      	itete	ne
 8007640:	6560      	strne	r0, [r4, #84]	; 0x54
 8007642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800764a:	81a3      	strheq	r3, [r4, #12]
 800764c:	bf18      	it	ne
 800764e:	81a3      	strhne	r3, [r4, #12]
 8007650:	bd10      	pop	{r4, pc}

08007652 <__sclose>:
 8007652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007656:	f000 b8c1 	b.w	80077dc <_close_r>
	...

0800765c <__swbuf_r>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	460e      	mov	r6, r1
 8007660:	4614      	mov	r4, r2
 8007662:	4605      	mov	r5, r0
 8007664:	b118      	cbz	r0, 800766e <__swbuf_r+0x12>
 8007666:	6983      	ldr	r3, [r0, #24]
 8007668:	b90b      	cbnz	r3, 800766e <__swbuf_r+0x12>
 800766a:	f7ff fbbb 	bl	8006de4 <__sinit>
 800766e:	4b21      	ldr	r3, [pc, #132]	; (80076f4 <__swbuf_r+0x98>)
 8007670:	429c      	cmp	r4, r3
 8007672:	d12b      	bne.n	80076cc <__swbuf_r+0x70>
 8007674:	686c      	ldr	r4, [r5, #4]
 8007676:	69a3      	ldr	r3, [r4, #24]
 8007678:	60a3      	str	r3, [r4, #8]
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	071a      	lsls	r2, r3, #28
 800767e:	d52f      	bpl.n	80076e0 <__swbuf_r+0x84>
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	b36b      	cbz	r3, 80076e0 <__swbuf_r+0x84>
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	6820      	ldr	r0, [r4, #0]
 8007688:	1ac0      	subs	r0, r0, r3
 800768a:	6963      	ldr	r3, [r4, #20]
 800768c:	b2f6      	uxtb	r6, r6
 800768e:	4283      	cmp	r3, r0
 8007690:	4637      	mov	r7, r6
 8007692:	dc04      	bgt.n	800769e <__swbuf_r+0x42>
 8007694:	4621      	mov	r1, r4
 8007696:	4628      	mov	r0, r5
 8007698:	f000 f936 	bl	8007908 <_fflush_r>
 800769c:	bb30      	cbnz	r0, 80076ec <__swbuf_r+0x90>
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	60a3      	str	r3, [r4, #8]
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	6022      	str	r2, [r4, #0]
 80076aa:	701e      	strb	r6, [r3, #0]
 80076ac:	6963      	ldr	r3, [r4, #20]
 80076ae:	3001      	adds	r0, #1
 80076b0:	4283      	cmp	r3, r0
 80076b2:	d004      	beq.n	80076be <__swbuf_r+0x62>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	07db      	lsls	r3, r3, #31
 80076b8:	d506      	bpl.n	80076c8 <__swbuf_r+0x6c>
 80076ba:	2e0a      	cmp	r6, #10
 80076bc:	d104      	bne.n	80076c8 <__swbuf_r+0x6c>
 80076be:	4621      	mov	r1, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 f921 	bl	8007908 <_fflush_r>
 80076c6:	b988      	cbnz	r0, 80076ec <__swbuf_r+0x90>
 80076c8:	4638      	mov	r0, r7
 80076ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <__swbuf_r+0x9c>)
 80076ce:	429c      	cmp	r4, r3
 80076d0:	d101      	bne.n	80076d6 <__swbuf_r+0x7a>
 80076d2:	68ac      	ldr	r4, [r5, #8]
 80076d4:	e7cf      	b.n	8007676 <__swbuf_r+0x1a>
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <__swbuf_r+0xa0>)
 80076d8:	429c      	cmp	r4, r3
 80076da:	bf08      	it	eq
 80076dc:	68ec      	ldreq	r4, [r5, #12]
 80076de:	e7ca      	b.n	8007676 <__swbuf_r+0x1a>
 80076e0:	4621      	mov	r1, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f80c 	bl	8007700 <__swsetup_r>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d0cb      	beq.n	8007684 <__swbuf_r+0x28>
 80076ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80076f0:	e7ea      	b.n	80076c8 <__swbuf_r+0x6c>
 80076f2:	bf00      	nop
 80076f4:	08007d1c 	.word	0x08007d1c
 80076f8:	08007d3c 	.word	0x08007d3c
 80076fc:	08007cfc 	.word	0x08007cfc

08007700 <__swsetup_r>:
 8007700:	4b32      	ldr	r3, [pc, #200]	; (80077cc <__swsetup_r+0xcc>)
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	681d      	ldr	r5, [r3, #0]
 8007706:	4606      	mov	r6, r0
 8007708:	460c      	mov	r4, r1
 800770a:	b125      	cbz	r5, 8007716 <__swsetup_r+0x16>
 800770c:	69ab      	ldr	r3, [r5, #24]
 800770e:	b913      	cbnz	r3, 8007716 <__swsetup_r+0x16>
 8007710:	4628      	mov	r0, r5
 8007712:	f7ff fb67 	bl	8006de4 <__sinit>
 8007716:	4b2e      	ldr	r3, [pc, #184]	; (80077d0 <__swsetup_r+0xd0>)
 8007718:	429c      	cmp	r4, r3
 800771a:	d10f      	bne.n	800773c <__swsetup_r+0x3c>
 800771c:	686c      	ldr	r4, [r5, #4]
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007724:	0719      	lsls	r1, r3, #28
 8007726:	d42c      	bmi.n	8007782 <__swsetup_r+0x82>
 8007728:	06dd      	lsls	r5, r3, #27
 800772a:	d411      	bmi.n	8007750 <__swsetup_r+0x50>
 800772c:	2309      	movs	r3, #9
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800773a:	e03e      	b.n	80077ba <__swsetup_r+0xba>
 800773c:	4b25      	ldr	r3, [pc, #148]	; (80077d4 <__swsetup_r+0xd4>)
 800773e:	429c      	cmp	r4, r3
 8007740:	d101      	bne.n	8007746 <__swsetup_r+0x46>
 8007742:	68ac      	ldr	r4, [r5, #8]
 8007744:	e7eb      	b.n	800771e <__swsetup_r+0x1e>
 8007746:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <__swsetup_r+0xd8>)
 8007748:	429c      	cmp	r4, r3
 800774a:	bf08      	it	eq
 800774c:	68ec      	ldreq	r4, [r5, #12]
 800774e:	e7e6      	b.n	800771e <__swsetup_r+0x1e>
 8007750:	0758      	lsls	r0, r3, #29
 8007752:	d512      	bpl.n	800777a <__swsetup_r+0x7a>
 8007754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007756:	b141      	cbz	r1, 800776a <__swsetup_r+0x6a>
 8007758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800775c:	4299      	cmp	r1, r3
 800775e:	d002      	beq.n	8007766 <__swsetup_r+0x66>
 8007760:	4630      	mov	r0, r6
 8007762:	f000 f98f 	bl	8007a84 <_free_r>
 8007766:	2300      	movs	r3, #0
 8007768:	6363      	str	r3, [r4, #52]	; 0x34
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	2300      	movs	r3, #0
 8007774:	6063      	str	r3, [r4, #4]
 8007776:	6923      	ldr	r3, [r4, #16]
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f043 0308 	orr.w	r3, r3, #8
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	b94b      	cbnz	r3, 800779a <__swsetup_r+0x9a>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800778c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007790:	d003      	beq.n	800779a <__swsetup_r+0x9a>
 8007792:	4621      	mov	r1, r4
 8007794:	4630      	mov	r0, r6
 8007796:	f000 f929 	bl	80079ec <__smakebuf_r>
 800779a:	89a0      	ldrh	r0, [r4, #12]
 800779c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077a0:	f010 0301 	ands.w	r3, r0, #1
 80077a4:	d00a      	beq.n	80077bc <__swsetup_r+0xbc>
 80077a6:	2300      	movs	r3, #0
 80077a8:	60a3      	str	r3, [r4, #8]
 80077aa:	6963      	ldr	r3, [r4, #20]
 80077ac:	425b      	negs	r3, r3
 80077ae:	61a3      	str	r3, [r4, #24]
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	b943      	cbnz	r3, 80077c6 <__swsetup_r+0xc6>
 80077b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077b8:	d1ba      	bne.n	8007730 <__swsetup_r+0x30>
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	0781      	lsls	r1, r0, #30
 80077be:	bf58      	it	pl
 80077c0:	6963      	ldrpl	r3, [r4, #20]
 80077c2:	60a3      	str	r3, [r4, #8]
 80077c4:	e7f4      	b.n	80077b0 <__swsetup_r+0xb0>
 80077c6:	2000      	movs	r0, #0
 80077c8:	e7f7      	b.n	80077ba <__swsetup_r+0xba>
 80077ca:	bf00      	nop
 80077cc:	20000014 	.word	0x20000014
 80077d0:	08007d1c 	.word	0x08007d1c
 80077d4:	08007d3c 	.word	0x08007d3c
 80077d8:	08007cfc 	.word	0x08007cfc

080077dc <_close_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d06      	ldr	r5, [pc, #24]	; (80077f8 <_close_r+0x1c>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7fd ff85 	bl	80056f6 <_close>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_close_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_close_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20013d28 	.word	0x20013d28

080077fc <__sflush_r>:
 80077fc:	898a      	ldrh	r2, [r1, #12]
 80077fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007802:	4605      	mov	r5, r0
 8007804:	0710      	lsls	r0, r2, #28
 8007806:	460c      	mov	r4, r1
 8007808:	d458      	bmi.n	80078bc <__sflush_r+0xc0>
 800780a:	684b      	ldr	r3, [r1, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dc05      	bgt.n	800781c <__sflush_r+0x20>
 8007810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	dc02      	bgt.n	800781c <__sflush_r+0x20>
 8007816:	2000      	movs	r0, #0
 8007818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800781c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800781e:	2e00      	cmp	r6, #0
 8007820:	d0f9      	beq.n	8007816 <__sflush_r+0x1a>
 8007822:	2300      	movs	r3, #0
 8007824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007828:	682f      	ldr	r7, [r5, #0]
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	d032      	beq.n	8007894 <__sflush_r+0x98>
 800782e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	075a      	lsls	r2, r3, #29
 8007834:	d505      	bpl.n	8007842 <__sflush_r+0x46>
 8007836:	6863      	ldr	r3, [r4, #4]
 8007838:	1ac0      	subs	r0, r0, r3
 800783a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800783c:	b10b      	cbz	r3, 8007842 <__sflush_r+0x46>
 800783e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007840:	1ac0      	subs	r0, r0, r3
 8007842:	2300      	movs	r3, #0
 8007844:	4602      	mov	r2, r0
 8007846:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007848:	6a21      	ldr	r1, [r4, #32]
 800784a:	4628      	mov	r0, r5
 800784c:	47b0      	blx	r6
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	d106      	bne.n	8007862 <__sflush_r+0x66>
 8007854:	6829      	ldr	r1, [r5, #0]
 8007856:	291d      	cmp	r1, #29
 8007858:	d82c      	bhi.n	80078b4 <__sflush_r+0xb8>
 800785a:	4a2a      	ldr	r2, [pc, #168]	; (8007904 <__sflush_r+0x108>)
 800785c:	40ca      	lsrs	r2, r1
 800785e:	07d6      	lsls	r6, r2, #31
 8007860:	d528      	bpl.n	80078b4 <__sflush_r+0xb8>
 8007862:	2200      	movs	r2, #0
 8007864:	6062      	str	r2, [r4, #4]
 8007866:	04d9      	lsls	r1, r3, #19
 8007868:	6922      	ldr	r2, [r4, #16]
 800786a:	6022      	str	r2, [r4, #0]
 800786c:	d504      	bpl.n	8007878 <__sflush_r+0x7c>
 800786e:	1c42      	adds	r2, r0, #1
 8007870:	d101      	bne.n	8007876 <__sflush_r+0x7a>
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	b903      	cbnz	r3, 8007878 <__sflush_r+0x7c>
 8007876:	6560      	str	r0, [r4, #84]	; 0x54
 8007878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800787a:	602f      	str	r7, [r5, #0]
 800787c:	2900      	cmp	r1, #0
 800787e:	d0ca      	beq.n	8007816 <__sflush_r+0x1a>
 8007880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007884:	4299      	cmp	r1, r3
 8007886:	d002      	beq.n	800788e <__sflush_r+0x92>
 8007888:	4628      	mov	r0, r5
 800788a:	f000 f8fb 	bl	8007a84 <_free_r>
 800788e:	2000      	movs	r0, #0
 8007890:	6360      	str	r0, [r4, #52]	; 0x34
 8007892:	e7c1      	b.n	8007818 <__sflush_r+0x1c>
 8007894:	6a21      	ldr	r1, [r4, #32]
 8007896:	2301      	movs	r3, #1
 8007898:	4628      	mov	r0, r5
 800789a:	47b0      	blx	r6
 800789c:	1c41      	adds	r1, r0, #1
 800789e:	d1c7      	bne.n	8007830 <__sflush_r+0x34>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0c4      	beq.n	8007830 <__sflush_r+0x34>
 80078a6:	2b1d      	cmp	r3, #29
 80078a8:	d001      	beq.n	80078ae <__sflush_r+0xb2>
 80078aa:	2b16      	cmp	r3, #22
 80078ac:	d101      	bne.n	80078b2 <__sflush_r+0xb6>
 80078ae:	602f      	str	r7, [r5, #0]
 80078b0:	e7b1      	b.n	8007816 <__sflush_r+0x1a>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	e7ad      	b.n	8007818 <__sflush_r+0x1c>
 80078bc:	690f      	ldr	r7, [r1, #16]
 80078be:	2f00      	cmp	r7, #0
 80078c0:	d0a9      	beq.n	8007816 <__sflush_r+0x1a>
 80078c2:	0793      	lsls	r3, r2, #30
 80078c4:	680e      	ldr	r6, [r1, #0]
 80078c6:	bf08      	it	eq
 80078c8:	694b      	ldreq	r3, [r1, #20]
 80078ca:	600f      	str	r7, [r1, #0]
 80078cc:	bf18      	it	ne
 80078ce:	2300      	movne	r3, #0
 80078d0:	eba6 0807 	sub.w	r8, r6, r7
 80078d4:	608b      	str	r3, [r1, #8]
 80078d6:	f1b8 0f00 	cmp.w	r8, #0
 80078da:	dd9c      	ble.n	8007816 <__sflush_r+0x1a>
 80078dc:	6a21      	ldr	r1, [r4, #32]
 80078de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078e0:	4643      	mov	r3, r8
 80078e2:	463a      	mov	r2, r7
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b0      	blx	r6
 80078e8:	2800      	cmp	r0, #0
 80078ea:	dc06      	bgt.n	80078fa <__sflush_r+0xfe>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078f8:	e78e      	b.n	8007818 <__sflush_r+0x1c>
 80078fa:	4407      	add	r7, r0
 80078fc:	eba8 0800 	sub.w	r8, r8, r0
 8007900:	e7e9      	b.n	80078d6 <__sflush_r+0xda>
 8007902:	bf00      	nop
 8007904:	20400001 	.word	0x20400001

08007908 <_fflush_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	690b      	ldr	r3, [r1, #16]
 800790c:	4605      	mov	r5, r0
 800790e:	460c      	mov	r4, r1
 8007910:	b913      	cbnz	r3, 8007918 <_fflush_r+0x10>
 8007912:	2500      	movs	r5, #0
 8007914:	4628      	mov	r0, r5
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	b118      	cbz	r0, 8007922 <_fflush_r+0x1a>
 800791a:	6983      	ldr	r3, [r0, #24]
 800791c:	b90b      	cbnz	r3, 8007922 <_fflush_r+0x1a>
 800791e:	f7ff fa61 	bl	8006de4 <__sinit>
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <_fflush_r+0x6c>)
 8007924:	429c      	cmp	r4, r3
 8007926:	d11b      	bne.n	8007960 <_fflush_r+0x58>
 8007928:	686c      	ldr	r4, [r5, #4]
 800792a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0ef      	beq.n	8007912 <_fflush_r+0xa>
 8007932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007934:	07d0      	lsls	r0, r2, #31
 8007936:	d404      	bmi.n	8007942 <_fflush_r+0x3a>
 8007938:	0599      	lsls	r1, r3, #22
 800793a:	d402      	bmi.n	8007942 <_fflush_r+0x3a>
 800793c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800793e:	f7ff faef 	bl	8006f20 <__retarget_lock_acquire_recursive>
 8007942:	4628      	mov	r0, r5
 8007944:	4621      	mov	r1, r4
 8007946:	f7ff ff59 	bl	80077fc <__sflush_r>
 800794a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800794c:	07da      	lsls	r2, r3, #31
 800794e:	4605      	mov	r5, r0
 8007950:	d4e0      	bmi.n	8007914 <_fflush_r+0xc>
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	059b      	lsls	r3, r3, #22
 8007956:	d4dd      	bmi.n	8007914 <_fflush_r+0xc>
 8007958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800795a:	f7ff fae2 	bl	8006f22 <__retarget_lock_release_recursive>
 800795e:	e7d9      	b.n	8007914 <_fflush_r+0xc>
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <_fflush_r+0x70>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d101      	bne.n	800796a <_fflush_r+0x62>
 8007966:	68ac      	ldr	r4, [r5, #8]
 8007968:	e7df      	b.n	800792a <_fflush_r+0x22>
 800796a:	4b04      	ldr	r3, [pc, #16]	; (800797c <_fflush_r+0x74>)
 800796c:	429c      	cmp	r4, r3
 800796e:	bf08      	it	eq
 8007970:	68ec      	ldreq	r4, [r5, #12]
 8007972:	e7da      	b.n	800792a <_fflush_r+0x22>
 8007974:	08007d1c 	.word	0x08007d1c
 8007978:	08007d3c 	.word	0x08007d3c
 800797c:	08007cfc 	.word	0x08007cfc

08007980 <_lseek_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d07      	ldr	r5, [pc, #28]	; (80079a0 <_lseek_r+0x20>)
 8007984:	4604      	mov	r4, r0
 8007986:	4608      	mov	r0, r1
 8007988:	4611      	mov	r1, r2
 800798a:	2200      	movs	r2, #0
 800798c:	602a      	str	r2, [r5, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	f7fd fed8 	bl	8005744 <_lseek>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_lseek_r+0x1e>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_lseek_r+0x1e>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	20013d28 	.word	0x20013d28

080079a4 <__swhatbuf_r>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	460e      	mov	r6, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2900      	cmp	r1, #0
 80079ae:	b096      	sub	sp, #88	; 0x58
 80079b0:	4614      	mov	r4, r2
 80079b2:	461d      	mov	r5, r3
 80079b4:	da07      	bge.n	80079c6 <__swhatbuf_r+0x22>
 80079b6:	2300      	movs	r3, #0
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	89b3      	ldrh	r3, [r6, #12]
 80079bc:	061a      	lsls	r2, r3, #24
 80079be:	d410      	bmi.n	80079e2 <__swhatbuf_r+0x3e>
 80079c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c4:	e00e      	b.n	80079e4 <__swhatbuf_r+0x40>
 80079c6:	466a      	mov	r2, sp
 80079c8:	f000 f8be 	bl	8007b48 <_fstat_r>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	dbf2      	blt.n	80079b6 <__swhatbuf_r+0x12>
 80079d0:	9a01      	ldr	r2, [sp, #4]
 80079d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079da:	425a      	negs	r2, r3
 80079dc:	415a      	adcs	r2, r3
 80079de:	602a      	str	r2, [r5, #0]
 80079e0:	e7ee      	b.n	80079c0 <__swhatbuf_r+0x1c>
 80079e2:	2340      	movs	r3, #64	; 0x40
 80079e4:	2000      	movs	r0, #0
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	b016      	add	sp, #88	; 0x58
 80079ea:	bd70      	pop	{r4, r5, r6, pc}

080079ec <__smakebuf_r>:
 80079ec:	898b      	ldrh	r3, [r1, #12]
 80079ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079f0:	079d      	lsls	r5, r3, #30
 80079f2:	4606      	mov	r6, r0
 80079f4:	460c      	mov	r4, r1
 80079f6:	d507      	bpl.n	8007a08 <__smakebuf_r+0x1c>
 80079f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	2301      	movs	r3, #1
 8007a02:	6163      	str	r3, [r4, #20]
 8007a04:	b002      	add	sp, #8
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	ab01      	add	r3, sp, #4
 8007a0a:	466a      	mov	r2, sp
 8007a0c:	f7ff ffca 	bl	80079a4 <__swhatbuf_r>
 8007a10:	9900      	ldr	r1, [sp, #0]
 8007a12:	4605      	mov	r5, r0
 8007a14:	4630      	mov	r0, r6
 8007a16:	f7ff fa85 	bl	8006f24 <_malloc_r>
 8007a1a:	b948      	cbnz	r0, 8007a30 <__smakebuf_r+0x44>
 8007a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a20:	059a      	lsls	r2, r3, #22
 8007a22:	d4ef      	bmi.n	8007a04 <__smakebuf_r+0x18>
 8007a24:	f023 0303 	bic.w	r3, r3, #3
 8007a28:	f043 0302 	orr.w	r3, r3, #2
 8007a2c:	81a3      	strh	r3, [r4, #12]
 8007a2e:	e7e3      	b.n	80079f8 <__smakebuf_r+0xc>
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <__smakebuf_r+0x7c>)
 8007a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	6020      	str	r0, [r4, #0]
 8007a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3c:	81a3      	strh	r3, [r4, #12]
 8007a3e:	9b00      	ldr	r3, [sp, #0]
 8007a40:	6163      	str	r3, [r4, #20]
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	6120      	str	r0, [r4, #16]
 8007a46:	b15b      	cbz	r3, 8007a60 <__smakebuf_r+0x74>
 8007a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f000 f88d 	bl	8007b6c <_isatty_r>
 8007a52:	b128      	cbz	r0, 8007a60 <__smakebuf_r+0x74>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f023 0303 	bic.w	r3, r3, #3
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	89a0      	ldrh	r0, [r4, #12]
 8007a62:	4305      	orrs	r5, r0
 8007a64:	81a5      	strh	r5, [r4, #12]
 8007a66:	e7cd      	b.n	8007a04 <__smakebuf_r+0x18>
 8007a68:	08006d7d 	.word	0x08006d7d

08007a6c <__malloc_lock>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <__malloc_lock+0x8>)
 8007a6e:	f7ff ba57 	b.w	8006f20 <__retarget_lock_acquire_recursive>
 8007a72:	bf00      	nop
 8007a74:	20013d20 	.word	0x20013d20

08007a78 <__malloc_unlock>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__malloc_unlock+0x8>)
 8007a7a:	f7ff ba52 	b.w	8006f22 <__retarget_lock_release_recursive>
 8007a7e:	bf00      	nop
 8007a80:	20013d20 	.word	0x20013d20

08007a84 <_free_r>:
 8007a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a86:	2900      	cmp	r1, #0
 8007a88:	d048      	beq.n	8007b1c <_free_r+0x98>
 8007a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a8e:	9001      	str	r0, [sp, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f1a1 0404 	sub.w	r4, r1, #4
 8007a96:	bfb8      	it	lt
 8007a98:	18e4      	addlt	r4, r4, r3
 8007a9a:	f7ff ffe7 	bl	8007a6c <__malloc_lock>
 8007a9e:	4a20      	ldr	r2, [pc, #128]	; (8007b20 <_free_r+0x9c>)
 8007aa0:	9801      	ldr	r0, [sp, #4]
 8007aa2:	6813      	ldr	r3, [r2, #0]
 8007aa4:	4615      	mov	r5, r2
 8007aa6:	b933      	cbnz	r3, 8007ab6 <_free_r+0x32>
 8007aa8:	6063      	str	r3, [r4, #4]
 8007aaa:	6014      	str	r4, [r2, #0]
 8007aac:	b003      	add	sp, #12
 8007aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ab2:	f7ff bfe1 	b.w	8007a78 <__malloc_unlock>
 8007ab6:	42a3      	cmp	r3, r4
 8007ab8:	d90b      	bls.n	8007ad2 <_free_r+0x4e>
 8007aba:	6821      	ldr	r1, [r4, #0]
 8007abc:	1862      	adds	r2, r4, r1
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	bf04      	itt	eq
 8007ac2:	681a      	ldreq	r2, [r3, #0]
 8007ac4:	685b      	ldreq	r3, [r3, #4]
 8007ac6:	6063      	str	r3, [r4, #4]
 8007ac8:	bf04      	itt	eq
 8007aca:	1852      	addeq	r2, r2, r1
 8007acc:	6022      	streq	r2, [r4, #0]
 8007ace:	602c      	str	r4, [r5, #0]
 8007ad0:	e7ec      	b.n	8007aac <_free_r+0x28>
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	b10b      	cbz	r3, 8007adc <_free_r+0x58>
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d9fa      	bls.n	8007ad2 <_free_r+0x4e>
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	1855      	adds	r5, r2, r1
 8007ae0:	42a5      	cmp	r5, r4
 8007ae2:	d10b      	bne.n	8007afc <_free_r+0x78>
 8007ae4:	6824      	ldr	r4, [r4, #0]
 8007ae6:	4421      	add	r1, r4
 8007ae8:	1854      	adds	r4, r2, r1
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	d1dd      	bne.n	8007aac <_free_r+0x28>
 8007af0:	681c      	ldr	r4, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	6053      	str	r3, [r2, #4]
 8007af6:	4421      	add	r1, r4
 8007af8:	6011      	str	r1, [r2, #0]
 8007afa:	e7d7      	b.n	8007aac <_free_r+0x28>
 8007afc:	d902      	bls.n	8007b04 <_free_r+0x80>
 8007afe:	230c      	movs	r3, #12
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	e7d3      	b.n	8007aac <_free_r+0x28>
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	1961      	adds	r1, r4, r5
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf04      	itt	eq
 8007b0c:	6819      	ldreq	r1, [r3, #0]
 8007b0e:	685b      	ldreq	r3, [r3, #4]
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	bf04      	itt	eq
 8007b14:	1949      	addeq	r1, r1, r5
 8007b16:	6021      	streq	r1, [r4, #0]
 8007b18:	6054      	str	r4, [r2, #4]
 8007b1a:	e7c7      	b.n	8007aac <_free_r+0x28>
 8007b1c:	b003      	add	sp, #12
 8007b1e:	bd30      	pop	{r4, r5, pc}
 8007b20:	20013bd0 	.word	0x20013bd0

08007b24 <_read_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d07      	ldr	r5, [pc, #28]	; (8007b44 <_read_r+0x20>)
 8007b28:	4604      	mov	r4, r0
 8007b2a:	4608      	mov	r0, r1
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	602a      	str	r2, [r5, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f7fd fdc2 	bl	80056bc <_read>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_read_r+0x1e>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_read_r+0x1e>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20013d28 	.word	0x20013d28

08007b48 <_fstat_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d07      	ldr	r5, [pc, #28]	; (8007b68 <_fstat_r+0x20>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	4611      	mov	r1, r2
 8007b54:	602b      	str	r3, [r5, #0]
 8007b56:	f7fd fdda 	bl	800570e <_fstat>
 8007b5a:	1c43      	adds	r3, r0, #1
 8007b5c:	d102      	bne.n	8007b64 <_fstat_r+0x1c>
 8007b5e:	682b      	ldr	r3, [r5, #0]
 8007b60:	b103      	cbz	r3, 8007b64 <_fstat_r+0x1c>
 8007b62:	6023      	str	r3, [r4, #0]
 8007b64:	bd38      	pop	{r3, r4, r5, pc}
 8007b66:	bf00      	nop
 8007b68:	20013d28 	.word	0x20013d28

08007b6c <_isatty_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	; (8007b88 <_isatty_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7fd fdd9 	bl	800572e <_isatty>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_isatty_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_isatty_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	20013d28 	.word	0x20013d28

08007b8c <_init>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr

08007b98 <_fini>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr
